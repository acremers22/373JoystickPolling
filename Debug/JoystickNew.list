
JoystickNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000851c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080086e0  080086e0  000096e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad0  08008ad0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ad0  08008ad0  00009ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ad8  08008ad8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008adc  08008adc  00009adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20040000  08008ae0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200401d4  08008cb4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040440  08008cb4  0000a440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f804  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002052  00000000  00000000  00019a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0001ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d5  00000000  00000000  0001c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b971  00000000  00000000  0001d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f208  00000000  00000000  00048a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f660  00000000  00000000  00057c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001672e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004530  00000000  00000000  0016732c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016b85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401d4 	.word	0x200401d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080086c4 	.word	0x080086c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401d8 	.word	0x200401d8
 80001fc:	080086c4 	.word	0x080086c4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fe0c 	bl	8001aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8ab 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 f97b 	bl	80011d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eda:	f000 f8ed 	bl	80010b8 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000ede:	f000 f92b 	bl	8001138 <MX_LPUART1_UART_Init>
  #define CHANNEL_Y 2

  uint16_t X;
  uint16_t Y;

  ADC_ChannelConfTypeDef sConfig = {0};  // Define the configuration structure
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef6:	237f      	movs	r3, #127	@ 0x7f
 8000ef8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efa:	2304      	movs	r3, #4
 8000efc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // X
	  sConfig.Channel = ADC_CHANNEL_1;
 8000f02:	4b43      	ldr	r3, [pc, #268]	@ (8001010 <main+0x148>)
 8000f04:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f06:	2306      	movs	r3, #6
 8000f08:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4841      	ldr	r0, [pc, #260]	@ (8001014 <main+0x14c>)
 8000f10:	f001 fb24 	bl	800255c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000f14:	483f      	ldr	r0, [pc, #252]	@ (8001014 <main+0x14c>)
 8000f16:	f001 f9ef 	bl	80022f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 0xFFFF); // Wait for the conversion to finish
 8000f1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f1e:	483d      	ldr	r0, [pc, #244]	@ (8001014 <main+0x14c>)
 8000f20:	f001 fa80 	bl	8002424 <HAL_ADC_PollForConversion>
	  X = HAL_ADC_GetValue(&hadc1);  // CHANNEL_X (rank 1)
 8000f24:	483b      	ldr	r0, [pc, #236]	@ (8001014 <main+0x14c>)
 8000f26:	f001 fb0c 	bl	8002542 <HAL_ADC_GetValue>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	83fb      	strh	r3, [r7, #30]
	  HAL_ADC_Stop(&hadc1);
 8000f2e:	4839      	ldr	r0, [pc, #228]	@ (8001014 <main+0x14c>)
 8000f30:	f001 fa45 	bl	80023be <HAL_ADC_Stop>

	  // Y
	  sConfig.Channel = ADC_CHANNEL_2;
 8000f34:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <main+0x150>)
 8000f36:	607b      	str	r3, [r7, #4]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4835      	ldr	r0, [pc, #212]	@ (8001014 <main+0x14c>)
 8000f3e:	f001 fb0d 	bl	800255c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000f42:	4834      	ldr	r0, [pc, #208]	@ (8001014 <main+0x14c>)
 8000f44:	f001 f9d8 	bl	80022f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 0xFFFF); // Wait for the conversion to finish
 8000f48:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f4c:	4831      	ldr	r0, [pc, #196]	@ (8001014 <main+0x14c>)
 8000f4e:	f001 fa69 	bl	8002424 <HAL_ADC_PollForConversion>
	  Y = HAL_ADC_GetValue(&hadc1);  // CHANNEL_Y
 8000f52:	4830      	ldr	r0, [pc, #192]	@ (8001014 <main+0x14c>)
 8000f54:	f001 faf5 	bl	8002542 <HAL_ADC_GetValue>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	83bb      	strh	r3, [r7, #28]
	  HAL_ADC_Stop(&hadc1);
 8000f5c:	482d      	ldr	r0, [pc, #180]	@ (8001014 <main+0x14c>)
 8000f5e:	f001 fa2e 	bl	80023be <HAL_ADC_Stop>

	  // Print the values
	  //printf("%d, %d\r\n", X, Y);
	  if (Y >= 250 && Y <= 350 && X >= 450 && X <= 550) {
 8000f62:	8bbb      	ldrh	r3, [r7, #28]
 8000f64:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f66:	d910      	bls.n	8000f8a <main+0xc2>
 8000f68:	8bbb      	ldrh	r3, [r7, #28]
 8000f6a:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000f6e:	d80c      	bhi.n	8000f8a <main+0xc2>
 8000f70:	8bfb      	ldrh	r3, [r7, #30]
 8000f72:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000f76:	d308      	bcc.n	8000f8a <main+0xc2>
 8000f78:	8bfb      	ldrh	r3, [r7, #30]
 8000f7a:	f240 2226 	movw	r2, #550	@ 0x226
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d803      	bhi.n	8000f8a <main+0xc2>
	      printf("N\r\n");  // North
 8000f82:	4826      	ldr	r0, [pc, #152]	@ (800101c <main+0x154>)
 8000f84:	f005 fc30 	bl	80067e8 <puts>
 8000f88:	e03e      	b.n	8001008 <main+0x140>
	  } else if (Y >= 1000 && Y <= 1100 && X >= 450 && X <= 550) {
 8000f8a:	8bbb      	ldrh	r3, [r7, #28]
 8000f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f90:	d311      	bcc.n	8000fb6 <main+0xee>
 8000f92:	8bbb      	ldrh	r3, [r7, #28]
 8000f94:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d80c      	bhi.n	8000fb6 <main+0xee>
 8000f9c:	8bfb      	ldrh	r3, [r7, #30]
 8000f9e:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000fa2:	d308      	bcc.n	8000fb6 <main+0xee>
 8000fa4:	8bfb      	ldrh	r3, [r7, #30]
 8000fa6:	f240 2226 	movw	r2, #550	@ 0x226
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d803      	bhi.n	8000fb6 <main+0xee>
	      printf("S\r\n");  // South
 8000fae:	481c      	ldr	r0, [pc, #112]	@ (8001020 <main+0x158>)
 8000fb0:	f005 fc1a 	bl	80067e8 <puts>
 8000fb4:	e028      	b.n	8001008 <main+0x140>
	  } else if (X >= 1000 && X <= 1100 && Y >= 450 && Y <= 550) {
 8000fb6:	8bfb      	ldrh	r3, [r7, #30]
 8000fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fbc:	d311      	bcc.n	8000fe2 <main+0x11a>
 8000fbe:	8bfb      	ldrh	r3, [r7, #30]
 8000fc0:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d80c      	bhi.n	8000fe2 <main+0x11a>
 8000fc8:	8bbb      	ldrh	r3, [r7, #28]
 8000fca:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000fce:	d308      	bcc.n	8000fe2 <main+0x11a>
 8000fd0:	8bbb      	ldrh	r3, [r7, #28]
 8000fd2:	f240 2226 	movw	r2, #550	@ 0x226
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d803      	bhi.n	8000fe2 <main+0x11a>
	      printf("E\r\n");  // West
 8000fda:	4812      	ldr	r0, [pc, #72]	@ (8001024 <main+0x15c>)
 8000fdc:	f005 fc04 	bl	80067e8 <puts>
 8000fe0:	e012      	b.n	8001008 <main+0x140>
	  } else if (X >= 250 && X <= 350 && Y >= 450 && Y <= 550) {
 8000fe2:	8bfb      	ldrh	r3, [r7, #30]
 8000fe4:	2bf9      	cmp	r3, #249	@ 0xf9
 8000fe6:	d90f      	bls.n	8001008 <main+0x140>
 8000fe8:	8bfb      	ldrh	r3, [r7, #30]
 8000fea:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000fee:	d80b      	bhi.n	8001008 <main+0x140>
 8000ff0:	8bbb      	ldrh	r3, [r7, #28]
 8000ff2:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000ff6:	d307      	bcc.n	8001008 <main+0x140>
 8000ff8:	8bbb      	ldrh	r3, [r7, #28]
 8000ffa:	f240 2226 	movw	r2, #550	@ 0x226
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d802      	bhi.n	8001008 <main+0x140>
	      printf("W\r\n");  // East
 8001002:	4809      	ldr	r0, [pc, #36]	@ (8001028 <main+0x160>)
 8001004:	f005 fbf0 	bl	80067e8 <puts>
	  }

	  HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	@ 0x64
 800100a:	f000 fde3 	bl	8001bd4 <HAL_Delay>
	  sConfig.Channel = ADC_CHANNEL_1;
 800100e:	e778      	b.n	8000f02 <main+0x3a>
 8001010:	04300002 	.word	0x04300002
 8001014:	200401f0 	.word	0x200401f0
 8001018:	08600004 	.word	0x08600004
 800101c:	080086e0 	.word	0x080086e0
 8001020:	080086e4 	.word	0x080086e4
 8001024:	080086e8 	.word	0x080086e8
 8001028:	080086ec 	.word	0x080086ec

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	@ 0x58
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2244      	movs	r2, #68	@ 0x44
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f005 fbdc 	bl	80067f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800104e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001052:	f002 fab9 	bl	80035c8 <HAL_PWREx_ControlVoltageScaling>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800105c:	f000 fae8 	bl	8001630 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001060:	2310      	movs	r3, #16
 8001062:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800106c:	2360      	movs	r3, #96	@ 0x60
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fb59 	bl	8003730 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001084:	f000 fad4 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 ff5f 	bl	8003f64 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010ac:	f000 fac0 	bl	8001630 <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3758      	adds	r7, #88	@ 0x58
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010be:	4a1d      	ldr	r2, [pc, #116]	@ (8001134 <MX_ADC1_Init+0x7c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010dc:	2204      	movs	r2, #4
 80010de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_ADC1_Init+0x78>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_ADC1_Init+0x78>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_ADC1_Init+0x78>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_ADC1_Init+0x78>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_ADC1_Init+0x78>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_ADC1_Init+0x78>)
 800111e:	f000 ffa5 	bl	800206c <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001128:	f000 fa82 	bl	8001630 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200401f0 	.word	0x200401f0
 8001134:	50040000 	.word	0x50040000

08001138 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800113c:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800113e:	4a23      	ldr	r2, [pc, #140]	@ (80011cc <MX_LPUART1_UART_Init+0x94>)
 8001140:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001168:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001182:	f003 fec5 	bl	8004f10 <HAL_UART_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800118c:	f000 fa50 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001194:	f004 fcee 	bl	8005b74 <HAL_UARTEx_SetTxFifoThreshold>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800119e:	f000 fa47 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 80011a6:	f004 fd23 	bl	8005bf0 <HAL_UARTEx_SetRxFifoThreshold>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011b0:	f000 fa3e 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MX_LPUART1_UART_Init+0x90>)
 80011b6:	f004 fca4 	bl	8005b02 <HAL_UARTEx_DisableFifoMode>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011c0:	f000 fa36 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20040258 	.word	0x20040258
 80011cc:	40008000 	.word	0x40008000

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	@ 0x38
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	4bb1      	ldr	r3, [pc, #708]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4ab0      	ldr	r2, [pc, #704]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4bae      	ldr	r3, [pc, #696]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	623b      	str	r3, [r7, #32]
 80011fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4bab      	ldr	r3, [pc, #684]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4aaa      	ldr	r2, [pc, #680]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4ba8      	ldr	r3, [pc, #672]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001216:	4ba5      	ldr	r3, [pc, #660]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4aa4      	ldr	r2, [pc, #656]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4ba2      	ldr	r3, [pc, #648]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	4b9f      	ldr	r3, [pc, #636]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a9e      	ldr	r2, [pc, #632]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b9c      	ldr	r3, [pc, #624]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b99      	ldr	r3, [pc, #612]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a98      	ldr	r2, [pc, #608]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b96      	ldr	r3, [pc, #600]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b93      	ldr	r3, [pc, #588]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a92      	ldr	r2, [pc, #584]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b90      	ldr	r3, [pc, #576]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	4b8d      	ldr	r3, [pc, #564]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a8c      	ldr	r2, [pc, #560]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b8a      	ldr	r3, [pc, #552]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128e:	4b87      	ldr	r3, [pc, #540]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a86      	ldr	r2, [pc, #536]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 8001294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b84      	ldr	r3, [pc, #528]	@ (80014ac <MX_GPIO_Init+0x2dc>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012a6:	f002 fa33 	bl	8003710 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012aa:	230c      	movs	r3, #12
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012ba:	230d      	movs	r3, #13
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	487a      	ldr	r0, [pc, #488]	@ (80014b0 <MX_GPIO_Init+0x2e0>)
 80012c6:	f001 ffcd 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012da:	2304      	movs	r3, #4
 80012dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e2:	4619      	mov	r1, r3
 80012e4:	4873      	ldr	r0, [pc, #460]	@ (80014b4 <MX_GPIO_Init+0x2e4>)
 80012e6:	f001 ffbd 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012fa:	230d      	movs	r3, #13
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	486b      	ldr	r0, [pc, #428]	@ (80014b4 <MX_GPIO_Init+0x2e4>)
 8001306:	f001 ffad 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800131a:	2301      	movs	r3, #1
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f001 ff9c 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800132c:	23f0      	movs	r3, #240	@ 0xf0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800133c:	2305      	movs	r3, #5
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134a:	f001 ff8b 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134e:	2301      	movs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135e:	2302      	movs	r3, #2
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4853      	ldr	r0, [pc, #332]	@ (80014b8 <MX_GPIO_Init+0x2e8>)
 800136a:	f001 ff7b 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800136e:	2344      	movs	r3, #68	@ 0x44
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	484d      	ldr	r0, [pc, #308]	@ (80014b8 <MX_GPIO_Init+0x2e8>)
 8001382:	f001 ff6f 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001386:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001398:	2301      	movs	r3, #1
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4843      	ldr	r0, [pc, #268]	@ (80014b0 <MX_GPIO_Init+0x2e0>)
 80013a4:	f001 ff5e 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013a8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80013ba:	2303      	movs	r3, #3
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	483a      	ldr	r0, [pc, #232]	@ (80014b0 <MX_GPIO_Init+0x2e0>)
 80013c6:	f001 ff4d 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013dc:	2301      	movs	r3, #1
 80013de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4834      	ldr	r0, [pc, #208]	@ (80014b8 <MX_GPIO_Init+0x2e8>)
 80013e8:	f001 ff3c 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013ec:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80013fe:	230d      	movs	r3, #13
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	482b      	ldr	r0, [pc, #172]	@ (80014b8 <MX_GPIO_Init+0x2e8>)
 800140a:	f001 ff2b 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800140e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001420:	230e      	movs	r3, #14
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4823      	ldr	r0, [pc, #140]	@ (80014b8 <MX_GPIO_Init+0x2e8>)
 800142c:	f001 ff1a 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001430:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001442:	2307      	movs	r3, #7
 8001444:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144a:	4619      	mov	r1, r3
 800144c:	481b      	ldr	r0, [pc, #108]	@ (80014bc <MX_GPIO_Init+0x2ec>)
 800144e:	f001 ff09 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001452:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001464:	2302      	movs	r3, #2
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4813      	ldr	r0, [pc, #76]	@ (80014bc <MX_GPIO_Init+0x2ec>)
 8001470:	f001 fef8 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001474:	2340      	movs	r3, #64	@ 0x40
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001484:	230d      	movs	r3, #13
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_GPIO_Init+0x2f0>)
 8001490:	f001 fee8 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a4:	2302      	movs	r3, #2
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014a8:	e00c      	b.n	80014c4 <MX_GPIO_Init+0x2f4>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48001000 	.word	0x48001000
 80014b4:	48001400 	.word	0x48001400
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000c00 	.word	0x48000c00
 80014c0:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	484c      	ldr	r0, [pc, #304]	@ (80015fc <MX_GPIO_Init+0x42c>)
 80014cc:	f001 feca 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014d0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014e2:	230c      	movs	r3, #12
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4843      	ldr	r0, [pc, #268]	@ (80015fc <MX_GPIO_Init+0x42c>)
 80014ee:	f001 feb9 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80014f2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001504:	230a      	movs	r3, #10
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001512:	f001 fea7 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f001 fe99 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001542:	2309      	movs	r3, #9
 8001544:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	482c      	ldr	r0, [pc, #176]	@ (8001600 <MX_GPIO_Init+0x430>)
 800154e:	f001 fe89 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001552:	2304      	movs	r3, #4
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001562:	230c      	movs	r3, #12
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4824      	ldr	r0, [pc, #144]	@ (8001600 <MX_GPIO_Init+0x430>)
 800156e:	f001 fe79 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001572:	2378      	movs	r3, #120	@ 0x78
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	481c      	ldr	r0, [pc, #112]	@ (8001600 <MX_GPIO_Init+0x430>)
 800158e:	f001 fe69 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001592:	2338      	movs	r3, #56	@ 0x38
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a2:	2306      	movs	r3, #6
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	4815      	ldr	r0, [pc, #84]	@ (8001604 <MX_GPIO_Init+0x434>)
 80015ae:	f001 fe59 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c4:	2304      	movs	r3, #4
 80015c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	@ (8001604 <MX_GPIO_Init+0x434>)
 80015d0:	f001 fe48 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015d4:	2301      	movs	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e4:	2302      	movs	r3, #2
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <MX_GPIO_Init+0x438>)
 80015f0:	f001 fe38 	bl	8003264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	@ 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	48000800 	.word	0x48000800
 8001600:	48000c00 	.word	0x48000c00
 8001604:	48000400 	.word	0x48000400
 8001608:	48001000 	.word	0x48001000

0800160c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001614:	1d39      	adds	r1, r7, #4
 8001616:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800161a:	2201      	movs	r2, #1
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <__io_putchar+0x20>)
 800161e:	f003 fcc7 	bl	8004fb0 <HAL_UART_Transmit>
  return ch;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20040258 	.word	0x20040258

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_MspInit+0x44>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001646:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_MspInit+0x44>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6613      	str	r3, [r2, #96]	@ 0x60
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <HAL_MspInit+0x44>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_MspInit+0x44>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_MspInit+0x44>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001664:	6593      	str	r3, [r2, #88]	@ 0x58
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_MspInit+0x44>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0b0      	sub	sp, #192	@ 0xc0
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	2294      	movs	r2, #148	@ 0x94
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 f8a7 	bl	80067f8 <memset>
  if(hadc->Instance==ADC1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a42      	ldr	r2, [pc, #264]	@ (80017b8 <HAL_ADC_MspInit+0x134>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d17d      	bne.n	80017b0 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80016be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016ca:	2308      	movs	r3, #8
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fefb 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016f0:	f7ff ff9e 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016f4:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 80016fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	4a2a      	ldr	r2, [pc, #168]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001728:	4a24      	ldr	r2, [pc, #144]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a1e      	ldr	r2, [pc, #120]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <HAL_ADC_MspInit+0x138>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001754:	233f      	movs	r3, #63	@ 0x3f
 8001756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800175a:	230b      	movs	r3, #11
 800175c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800176a:	4619      	mov	r1, r3
 800176c:	4814      	ldr	r0, [pc, #80]	@ (80017c0 <HAL_ADC_MspInit+0x13c>)
 800176e:	f001 fd79 	bl	8003264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001772:	230a      	movs	r3, #10
 8001774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001778:	230b      	movs	r3, #11
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178e:	f001 fd69 	bl	8003264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001798:	230b      	movs	r3, #11
 800179a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	@ (80017c4 <HAL_ADC_MspInit+0x140>)
 80017ac:	f001 fd5a 	bl	8003264 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017b0:	bf00      	nop
 80017b2:	37c0      	adds	r7, #192	@ 0xc0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	50040000 	.word	0x50040000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000400 	.word	0x48000400

080017c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0ae      	sub	sp, #184	@ 0xb8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2294      	movs	r2, #148	@ 0x94
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 f805 	bl	80067f8 <memset>
  if(huart->Instance==LPUART1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a22      	ldr	r2, [pc, #136]	@ (800187c <HAL_UART_MspInit+0xb4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d13d      	bne.n	8001874 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017f8:	2320      	movs	r3, #32
 80017fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fe6b 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001810:	f7ff ff0e 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <HAL_UART_MspInit+0xb8>)
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <HAL_UART_MspInit+0xb8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_UART_MspInit+0xb8>)
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_UART_MspInit+0xb8>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	4a13      	ldr	r2, [pc, #76]	@ (8001880 <HAL_UART_MspInit+0xb8>)
 8001832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_UART_MspInit+0xb8>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001844:	f001 ff64 	bl	8003710 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001848:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800184c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001862:	2308      	movs	r3, #8
 8001864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001868:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800186c:	4619      	mov	r1, r3
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <HAL_UART_MspInit+0xbc>)
 8001870:	f001 fcf8 	bl	8003264 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001874:	bf00      	nop
 8001876:	37b8      	adds	r7, #184	@ 0xb8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40008000 	.word	0x40008000
 8001880:	40021000 	.word	0x40021000
 8001884:	48001800 	.word	0x48001800

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 f959 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_kill>:

int _kill(int pid, int sig)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001900:	f004 ff86 	bl	8006810 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	2216      	movs	r2, #22
 8001908:	601a      	str	r2, [r3, #0]
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_exit>:

void _exit (int status)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800191e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffe7 	bl	80018f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <_exit+0x12>

0800192c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
  }

  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e009      	b.n	800198c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe43 	bl	800160c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <_write+0x12>
  }
  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
  return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f004 feea 	bl	8006810 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200a0000 	.word	0x200a0000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	200402ec 	.word	0x200402ec
 8001a70:	20040440 	.word	0x20040440

08001a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff ffea 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa2:	490d      	ldr	r1, [pc, #52]	@ (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f004 fea9 	bl	800681c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff f9fd 	bl	8000ec8 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ad4:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001ad8:	200401d4 	.word	0x200401d4
  ldr r2, =_sidata
 8001adc:	08008ae0 	.word	0x08008ae0
  ldr r2, =_sbss
 8001ae0:	200401d4 	.word	0x200401d4
  ldr r4, =_ebss
 8001ae4:	20040440 	.word	0x20040440

08001ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_IRQHandler>

08001aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f001 fb81 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f80e 	bl	8001b1c <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	e001      	b.n	8001b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0c:	f7ff fd96 	bl	800163c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_InitTick+0x6c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_InitTick+0x70>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fb7f 	bl	800324a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d809      	bhi.n	8001b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b60:	f001 fb57 	bl	8003212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <HAL_InitTick+0x74>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e007      	b.n	8001b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e004      	b.n	8001b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	e001      	b.n	8001b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20040008 	.word	0x20040008
 8001b8c:	20040000 	.word	0x20040000
 8001b90:	20040004 	.word	0x20040004

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20040008 	.word	0x20040008
 8001bb8:	200402f0 	.word	0x200402f0

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	200402f0 	.word	0x200402f0

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff ffee 	bl	8001bbc <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bec:	d005      	beq.n	8001bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_Delay+0x44>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f7      	bhi.n	8001bfc <HAL_Delay+0x28>
  {
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20040008 	.word	0x20040008

08001c1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3360      	adds	r3, #96	@ 0x60
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <LL_ADC_SetOffset+0x44>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	03fff000 	.word	0x03fff000

08001ccc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3360      	adds	r3, #96	@ 0x60
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3360      	adds	r3, #96	@ 0x60
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d22:	bf00      	nop
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	615a      	str	r2, [r3, #20]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3330      	adds	r3, #48	@ 0x30
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	4413      	add	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	211f      	movs	r1, #31
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0e9b      	lsrs	r3, r3, #26
 8001db2:	f003 011f 	and.w	r1, r3, #31
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b087      	sub	sp, #28
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3314      	adds	r3, #20
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	0e5b      	lsrs	r3, r3, #25
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	0d1b      	lsrs	r3, r3, #20
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2107      	movs	r1, #7
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	0d1b      	lsrs	r3, r3, #20
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	431a      	orrs	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0318 	and.w	r3, r3, #24
 8001e4a:	4908      	ldr	r1, [pc, #32]	@ (8001e6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e4c:	40d9      	lsrs	r1, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	400b      	ands	r3, r1
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	431a      	orrs	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	0007ffff 	.word	0x0007ffff

08001e70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6093      	str	r3, [r2, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDisableOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDisableOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d101      	bne.n	8002010 <LL_ADC_REG_IsConversionOngoing+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800202e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002032:	f043 0220 	orr.w	r2, r3, #32
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d101      	bne.n	800205e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e129      	b.n	80022da <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff faf5 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fef1 	bl	8001e94 <LL_ADC_IsDeepPowerDownEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fed7 	bl	8001e70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff0c 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fef0 	bl	8001ebc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020dc:	4b81      	ldr	r3, [pc, #516]	@ (80022e4 <HAL_ADC_Init+0x278>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	4a81      	ldr	r2, [pc, #516]	@ (80022e8 <HAL_ADC_Init+0x27c>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff feee 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff62 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 8002134:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80c2 	bne.w	80022c8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80be 	bne.w	80022c8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002154:	f043 0202 	orr.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fefb 	bl	8001f5c <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216c:	485f      	ldr	r0, [pc, #380]	@ (80022ec <HAL_ADC_Init+0x280>)
 800216e:	f7ff fef5 	bl	8001f5c <LL_ADC_IsEnabled>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4619      	mov	r1, r3
 800217e:	485c      	ldr	r0, [pc, #368]	@ (80022f0 <HAL_ADC_Init+0x284>)
 8002180:	f7ff fd4c 	bl	8001c1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e5b      	ldrb	r3, [r3, #25]
 8002188:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800218e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002194:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800219a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	3b01      	subs	r3, #1
 80021b8:	045b      	lsls	r3, r3, #17
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b44      	ldr	r3, [pc, #272]	@ (80022f4 <HAL_ADC_Init+0x288>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff26 	bl	8002046 <LL_ADC_INJ_IsConversionOngoing>
 80021fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d140      	bne.n	8002284 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d13d      	bne.n	8002284 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7e1b      	ldrb	r3, [r3, #24]
 8002210:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002212:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800221a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800222a:	f023 0306 	bic.w	r3, r3, #6
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	430b      	orrs	r3, r1
 8002236:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800223e:	2b01      	cmp	r3, #1
 8002240:	d118      	bne.n	8002274 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002264:	430a      	orrs	r2, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	e007      	b.n	8002284 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10c      	bne.n	80022a6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f023 010f 	bic.w	r1, r3, #15
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	1e5a      	subs	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80022a4:	e007      	b.n	80022b6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 020f 	bic.w	r2, r2, #15
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c6:	e007      	b.n	80022d8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20040000 	.word	0x20040000
 80022e8:	053e2d63 	.word	0x053e2d63
 80022ec:	50040000 	.word	0x50040000
 80022f0:	50040300 	.word	0x50040300
 80022f4:	fff0c007 	.word	0xfff0c007

080022f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fe77 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d14f      	bne.n	80023b0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_Start+0x26>
 800231a:	2302      	movs	r3, #2
 800231c:	e04b      	b.n	80023b6 <HAL_ADC_Start+0xbe>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fdd0 	bl	8002ecc <ADC_Enable>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d137      	bne.n	80023a6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002356:	d106      	bne.n	8002366 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	f023 0206 	bic.w	r2, r3, #6
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002364:	e002      	b.n	800236c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	221c      	movs	r2, #28
 8002372:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002392:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fe02 	bl	8001fa8 <LL_ADC_REG_StartConversion>
 80023a4:	e006      	b.n	80023b4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80023ae:	e001      	b.n	80023b4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
 80023b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_Stop+0x16>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e023      	b.n	800241c <HAL_ADC_Stop+0x5e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023dc:	2103      	movs	r1, #3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fcb8 	bl	8002d54 <ADC_ConversionStop>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d111      	bne.n	8002412 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fdf2 	bl	8002fd8 <ADC_Disable>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d102      	bne.n	800243c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002436:	2308      	movs	r3, #8
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e010      	b.n	800245e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800245a:	2304      	movs	r3, #4
 800245c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800245e:	f7ff fbad 	bl	8001bbc <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002464:	e021      	b.n	80024aa <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800246c:	d01d      	beq.n	80024aa <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800246e:	f7ff fba5 	bl	8001bbc <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <HAL_ADC_PollForConversion+0x60>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d112      	bne.n	80024aa <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e047      	b.n	800253a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0d6      	beq.n	8002466 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fc43 	bl	8001d54 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7e5b      	ldrb	r3, [r3, #25]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d118      	bne.n	800250e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d111      	bne.n	800250e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d104      	bne.n	8002526 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e008      	b.n	8002538 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	220c      	movs	r2, #12
 8002536:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0b6      	sub	sp, #216	@ 0xd8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x22>
 800257a:	2302      	movs	r3, #2
 800257c:	e3d5      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x7ce>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fd34 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 83ba 	bne.w	8002d0c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d824      	bhi.n	80025f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	3b02      	subs	r3, #2
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d81b      	bhi.n	80025ea <HAL_ADC_ConfigChannel+0x8e>
 80025b2:	a201      	add	r2, pc, #4	@ (adr r2, 80025b8 <HAL_ADC_ConfigChannel+0x5c>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025d1 	.word	0x080025d1
 80025c0:	080025d9 	.word	0x080025d9
 80025c4:	080025e1 	.word	0x080025e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80025c8:	230c      	movs	r3, #12
 80025ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ce:	e010      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80025d0:	2312      	movs	r3, #18
 80025d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025d6:	e00c      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025d8:	2318      	movs	r3, #24
 80025da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025de:	e008      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025e8:	e003      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025ea:	2306      	movs	r3, #6
 80025ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002600:	f7ff fbbb 	bl	8001d7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fcf5 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 800260e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fd15 	bl	8002046 <LL_ADC_INJ_IsConversionOngoing>
 800261c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 81bf 	bne.w	80029a8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800262a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 81ba 	bne.w	80029a8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800263c:	d10f      	bne.n	800265e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	4619      	mov	r1, r3
 800264a:	f7ff fbc2 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fb69 	bl	8001d2e <LL_ADC_SetSamplingTimeCommonConfig>
 800265c:	e00e      	b.n	800267c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	461a      	mov	r2, r3
 800266c:	f7ff fbb1 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fb59 	bl	8001d2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00a      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ae:	f7ff fae9 	bl	8001c84 <LL_ADC_SetOffset>
 80026b2:	e179      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fb06 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x184>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fafb 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	e01e      	b.n	800271e <HAL_ADC_ConfigChannel+0x1c2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff faf0 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002702:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1da>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	e018      	b.n	8002768 <HAL_ADC_ConfigChannel+0x20c>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800274a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800274e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e004      	b.n	8002768 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800275e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fabf 	bl	8001cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff faa3 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x24a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fa98 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e01e      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x288>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fa8d 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80027d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x2a0>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e018      	b.n	800282e <HAL_ADC_ConfigChannel+0x2d2>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e004      	b.n	800282e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282e:	429a      	cmp	r2, r3
 8002830:	d106      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fa5c 	bl	8001cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fa40 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_ADC_ConfigChannel+0x310>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fa35 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	e01e      	b.n	80028aa <HAL_ADC_ConfigChannel+0x34e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2102      	movs	r1, #2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fa2a 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800288a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800288e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800289e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x366>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	e014      	b.n	80028ec <HAL_ADC_ConfigChannel+0x390>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e004      	b.n	80028ec <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80028e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d106      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2102      	movs	r1, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f9fd 	bl	8001cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2103      	movs	r1, #3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f9e1 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <HAL_ADC_ConfigChannel+0x3ce>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2103      	movs	r1, #3
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f9d6 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	e017      	b.n	800295a <HAL_ADC_ConfigChannel+0x3fe>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2103      	movs	r1, #3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f9cb 	bl	8001ccc <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002944:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x416>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	e011      	b.n	8002996 <HAL_ADC_ConfigChannel+0x43a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002982:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800298e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002996:	429a      	cmp	r2, r3
 8002998:	d106      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	2103      	movs	r1, #3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f9a8 	bl	8001cf8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fad5 	bl	8001f5c <LL_ADC_IsEnabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 813f 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7ff fa2e 	bl	8001e28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a8e      	ldr	r2, [pc, #568]	@ (8002c0c <HAL_ADC_ConfigChannel+0x6b0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f040 8130 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x4a4>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	3301      	adds	r3, #1
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2b09      	cmp	r3, #9
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e019      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x4d8>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	bf94      	ite	ls
 8002a2e:	2301      	movls	r3, #1
 8002a30:	2300      	movhi	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d079      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x4f8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	069b      	lsls	r3, r3, #26
 8002a4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a52:	e015      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x524>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a64:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x544>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	3301      	adds	r3, #1
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	e017      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x574>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	e003      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	ea42 0103 	orr.w	r1, r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x59a>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	051b      	lsls	r3, r3, #20
 8002af4:	e018      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x5cc>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	e080      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x5ec>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	3301      	adds	r3, #1
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b46:	e015      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x618>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	069b      	lsls	r3, r3, #26
 8002b70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x638>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	e017      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x668>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	ea42 0103 	orr.w	r1, r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10d      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x694>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	3b1e      	subs	r3, #30
 8002be8:	051b      	lsls	r3, r3, #20
 8002bea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	e01d      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x6d0>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
  return result;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e005      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x6bc>
 8002c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	3b1e      	subs	r3, #30
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7ff f8cd 	bl	8001dd2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d06c      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c44:	483c      	ldr	r0, [pc, #240]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c46:	f7ff f80f 	bl	8001c68 <LL_ADC_GetCommonPathInternalCh>
 8002c4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <HAL_ADC_ConfigChannel+0x7e0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d127      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d121      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a35      	ldr	r2, [pc, #212]	@ (8002d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d157      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c76:	4619      	mov	r1, r3
 8002c78:	482f      	ldr	r0, [pc, #188]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c7a:	f7fe ffe2 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c7e:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	4a30      	ldr	r2, [pc, #192]	@ (8002d48 <HAL_ADC_ConfigChannel+0x7ec>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca6:	e03a      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_ADC_ConfigChannel+0x7f0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d113      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d12a      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ccc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4819      	ldr	r0, [pc, #100]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cd4:	f7fe ffb5 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd8:	e021      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d11c      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d116      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d111      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d02:	4619      	mov	r1, r3
 8002d04:	480c      	ldr	r0, [pc, #48]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d06:	f7fe ff9c 	bl	8001c42 <LL_ADC_SetCommonPathInternalCh>
 8002d0a:	e008      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	37d8      	adds	r7, #216	@ 0xd8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	80080000 	.word	0x80080000
 8002d38:	50040300 	.word	0x50040300
 8002d3c:	c7520000 	.word	0xc7520000
 8002d40:	50040000 	.word	0x50040000
 8002d44:	20040000 	.word	0x20040000
 8002d48:	053e2d63 	.word	0x053e2d63
 8002d4c:	cb840000 	.word	0xcb840000
 8002d50:	80000001 	.word	0x80000001

08002d54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff f944 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 8002d70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f965 	bl	8002046 <LL_ADC_INJ_IsConversionOngoing>
 8002d7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8098 	beq.w	8002ebc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02a      	beq.n	8002df0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7e5b      	ldrb	r3, [r3, #25]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d126      	bne.n	8002df0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7e1b      	ldrb	r3, [r3, #24]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d122      	bne.n	8002df0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dae:	e014      	b.n	8002dda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4a45      	ldr	r2, [pc, #276]	@ (8002ec8 <ADC_ConversionStop+0x174>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d90d      	bls.n	8002dd4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f043 0210 	orr.w	r2, r3, #16
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e074      	b.n	8002ebe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d1e3      	bne.n	8002db0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2240      	movs	r2, #64	@ 0x40
 8002dee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d014      	beq.n	8002e20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f8fc 	bl	8001ff8 <LL_ADC_REG_IsConversionOngoing>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f8b9 	bl	8001f82 <LL_ADC_IsDisableOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f8d8 	bl	8001fd0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d014      	beq.n	8002e50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f90b 	bl	8002046 <LL_ADC_INJ_IsConversionOngoing>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f8a1 	bl	8001f82 <LL_ADC_IsDisableOngoing>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f8e7 	bl	800201e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d005      	beq.n	8002e62 <ADC_ConversionStop+0x10e>
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d105      	bne.n	8002e68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	617b      	str	r3, [r7, #20]
        break;
 8002e60:	e005      	b.n	8002e6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e62:	2308      	movs	r3, #8
 8002e64:	617b      	str	r3, [r7, #20]
        break;
 8002e66:	e002      	b.n	8002e6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e68:	2304      	movs	r3, #4
 8002e6a:	617b      	str	r3, [r7, #20]
        break;
 8002e6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e6e:	f7fe fea5 	bl	8001bbc <HAL_GetTick>
 8002e72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e74:	e01b      	b.n	8002eae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e76:	f7fe fea1 	bl	8001bbc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d914      	bls.n	8002eae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e007      	b.n	8002ebe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1dc      	bne.n	8002e76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	a33fffff 	.word	0xa33fffff

08002ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f83d 	bl	8001f5c <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d169      	bne.n	8002fbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <ADC_Enable+0xfc>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e055      	b.n	8002fbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fff8 	bl	8001f0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f1c:	482b      	ldr	r0, [pc, #172]	@ (8002fcc <ADC_Enable+0x100>)
 8002f1e:	f7fe fea3 	bl	8001c68 <LL_ADC_GetCommonPathInternalCh>
 8002f22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2c:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <ADC_Enable+0x104>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <ADC_Enable+0x108>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f46:	e002      	b.n	8002f4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fe32 	bl	8001bbc <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5a:	e028      	b.n	8002fae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fffb 	bl	8001f5c <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe ffcb 	bl	8001f0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f76:	f7fe fe21 	bl	8001bbc <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d914      	bls.n	8002fae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00d      	beq.n	8002fae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1cf      	bne.n	8002f5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	8000003f 	.word	0x8000003f
 8002fcc:	50040300 	.word	0x50040300
 8002fd0:	20040000 	.word	0x20040000
 8002fd4:	053e2d63 	.word	0x053e2d63

08002fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe ffcc 	bl	8001f82 <LL_ADC_IsDisableOngoing>
 8002fea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe ffb3 	bl	8001f5c <LL_ADC_IsEnabled>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d047      	beq.n	800308c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d144      	bne.n	800308c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030d 	and.w	r3, r3, #13
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10c      	bne.n	800302a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe ff8d 	bl	8001f34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2203      	movs	r2, #3
 8003020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003022:	f7fe fdcb 	bl	8001bbc <HAL_GetTick>
 8003026:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003028:	e029      	b.n	800307e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e023      	b.n	800308e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003046:	f7fe fdb9 	bl	8001bbc <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d914      	bls.n	800307e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1dc      	bne.n	8003046 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ca:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db0a      	blt.n	8003126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	490c      	ldr	r1, [pc, #48]	@ (8003148 <__NVIC_SetPriority+0x4c>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	440b      	add	r3, r1
 8003120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003124:	e00a      	b.n	800313c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4908      	ldr	r1, [pc, #32]	@ (800314c <__NVIC_SetPriority+0x50>)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3b04      	subs	r3, #4
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	440b      	add	r3, r1
 800313a:	761a      	strb	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000e100 	.word	0xe000e100
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	@ 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	bf28      	it	cs
 800316e:	2304      	movcs	r3, #4
 8003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3304      	adds	r3, #4
 8003176:	2b06      	cmp	r3, #6
 8003178:	d902      	bls.n	8003180 <NVIC_EncodePriority+0x30>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3b03      	subs	r3, #3
 800317e:	e000      	b.n	8003182 <NVIC_EncodePriority+0x32>
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	401a      	ands	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003198:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	4313      	orrs	r3, r2
         );
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	@ 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c8:	d301      	bcc.n	80031ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00f      	b.n	80031ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ce:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <SysTick_Config+0x40>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d6:	210f      	movs	r1, #15
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031dc:	f7ff ff8e 	bl	80030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <SysTick_Config+0x40>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e6:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <SysTick_Config+0x40>)
 80031e8:	2207      	movs	r2, #7
 80031ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000e010 	.word	0xe000e010

080031fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff47 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003224:	f7ff ff5c 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 8003228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff ff8e 	bl	8003150 <NVIC_EncodePriority>
 8003234:	4602      	mov	r2, r0
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff5d 	bl	80030fc <__NVIC_SetPriority>
}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffb0 	bl	80031b8 <SysTick_Config>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003272:	e166      	b.n	8003542 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8158 	beq.w	800353c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d005      	beq.n	80032a4 <HAL_GPIO_Init+0x40>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d130      	bne.n	8003306 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032da:	2201      	movs	r2, #1
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 0201 	and.w	r2, r3, #1
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b03      	cmp	r3, #3
 8003310:	d017      	beq.n	8003342 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d123      	bne.n	8003396 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	6939      	ldr	r1, [r7, #16]
 8003392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0203 	and.w	r2, r3, #3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80b2 	beq.w	800353c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d8:	4b61      	ldr	r3, [pc, #388]	@ (8003560 <HAL_GPIO_Init+0x2fc>)
 80033da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033dc:	4a60      	ldr	r2, [pc, #384]	@ (8003560 <HAL_GPIO_Init+0x2fc>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80033e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003560 <HAL_GPIO_Init+0x2fc>)
 80033e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003564 <HAL_GPIO_Init+0x300>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800341a:	d02b      	beq.n	8003474 <HAL_GPIO_Init+0x210>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a52      	ldr	r2, [pc, #328]	@ (8003568 <HAL_GPIO_Init+0x304>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d025      	beq.n	8003470 <HAL_GPIO_Init+0x20c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a51      	ldr	r2, [pc, #324]	@ (800356c <HAL_GPIO_Init+0x308>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d01f      	beq.n	800346c <HAL_GPIO_Init+0x208>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a50      	ldr	r2, [pc, #320]	@ (8003570 <HAL_GPIO_Init+0x30c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d019      	beq.n	8003468 <HAL_GPIO_Init+0x204>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a4f      	ldr	r2, [pc, #316]	@ (8003574 <HAL_GPIO_Init+0x310>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_GPIO_Init+0x200>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a4e      	ldr	r2, [pc, #312]	@ (8003578 <HAL_GPIO_Init+0x314>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00d      	beq.n	8003460 <HAL_GPIO_Init+0x1fc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a4d      	ldr	r2, [pc, #308]	@ (800357c <HAL_GPIO_Init+0x318>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <HAL_GPIO_Init+0x1f8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4c      	ldr	r2, [pc, #304]	@ (8003580 <HAL_GPIO_Init+0x31c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_GPIO_Init+0x1f4>
 8003454:	2307      	movs	r3, #7
 8003456:	e00e      	b.n	8003476 <HAL_GPIO_Init+0x212>
 8003458:	2308      	movs	r3, #8
 800345a:	e00c      	b.n	8003476 <HAL_GPIO_Init+0x212>
 800345c:	2306      	movs	r3, #6
 800345e:	e00a      	b.n	8003476 <HAL_GPIO_Init+0x212>
 8003460:	2305      	movs	r3, #5
 8003462:	e008      	b.n	8003476 <HAL_GPIO_Init+0x212>
 8003464:	2304      	movs	r3, #4
 8003466:	e006      	b.n	8003476 <HAL_GPIO_Init+0x212>
 8003468:	2303      	movs	r3, #3
 800346a:	e004      	b.n	8003476 <HAL_GPIO_Init+0x212>
 800346c:	2302      	movs	r3, #2
 800346e:	e002      	b.n	8003476 <HAL_GPIO_Init+0x212>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_GPIO_Init+0x212>
 8003474:	2300      	movs	r3, #0
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	4093      	lsls	r3, r2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003486:	4937      	ldr	r1, [pc, #220]	@ (8003564 <HAL_GPIO_Init+0x300>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003494:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <HAL_GPIO_Init+0x320>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43db      	mvns	r3, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b8:	4a32      	ldr	r2, [pc, #200]	@ (8003584 <HAL_GPIO_Init+0x320>)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034be:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <HAL_GPIO_Init+0x320>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034e2:	4a28      	ldr	r2, [pc, #160]	@ (8003584 <HAL_GPIO_Init+0x320>)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034e8:	4b26      	ldr	r3, [pc, #152]	@ (8003584 <HAL_GPIO_Init+0x320>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800350c:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <HAL_GPIO_Init+0x320>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003512:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <HAL_GPIO_Init+0x320>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003536:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <HAL_GPIO_Init+0x320>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f ae91 	bne.w	8003274 <HAL_GPIO_Init+0x10>
  }
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40021000 	.word	0x40021000
 8003564:	40010000 	.word	0x40010000
 8003568:	48000400 	.word	0x48000400
 800356c:	48000800 	.word	0x48000800
 8003570:	48000c00 	.word	0x48000c00
 8003574:	48001000 	.word	0x48001000
 8003578:	48001400 	.word	0x48001400
 800357c:	48001800 	.word	0x48001800
 8003580:	48001c00 	.word	0x48001c00
 8003584:	40010400 	.word	0x40010400

08003588 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800358c:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003598:	d102      	bne.n	80035a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800359a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359e:	e00b      	b.n	80035b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80035a0:	4b08      	ldr	r3, [pc, #32]	@ (80035c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ae:	d102      	bne.n	80035b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80035b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035b4:	e000      	b.n	80035b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80035b6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40007000 	.word	0x40007000

080035c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d141      	bne.n	800365a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e2:	d131      	bne.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e4:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	4a46      	ldr	r2, [pc, #280]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f4:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035fc:	4a41      	ldr	r2, [pc, #260]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003604:	4b40      	ldr	r3, [pc, #256]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2232      	movs	r2, #50	@ 0x32
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	4a3f      	ldr	r2, [pc, #252]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	0c9b      	lsrs	r3, r3, #18
 8003616:	3301      	adds	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361a:	e002      	b.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3b01      	subs	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003622:	4b38      	ldr	r3, [pc, #224]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362e:	d102      	bne.n	8003636 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f2      	bne.n	800361c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003636:	4b33      	ldr	r3, [pc, #204]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003642:	d158      	bne.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e057      	b.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003648:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800364e:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003658:	e04d      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003660:	d141      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003662:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d131      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003670:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003676:	4a23      	ldr	r2, [pc, #140]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003680:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003688:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800368e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003690:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2232      	movs	r2, #50	@ 0x32
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	0c9b      	lsrs	r3, r3, #18
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a6:	e002      	b.n	80036ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ba:	d102      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f2      	bne.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ce:	d112      	bne.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e011      	b.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036e4:	e007      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036e6:	4b07      	ldr	r3, [pc, #28]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036ee:	4a05      	ldr	r2, [pc, #20]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40007000 	.word	0x40007000
 8003708:	20040000 	.word	0x20040000
 800370c:	431bde83 	.word	0x431bde83

08003710 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a04      	ldr	r2, [pc, #16]	@ (800372c <HAL_PWREx_EnableVddIO2+0x1c>)
 800371a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371e:	6053      	str	r3, [r2, #4]
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40007000 	.word	0x40007000

08003730 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f000 bc08 	b.w	8003f54 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003744:	4b96      	ldr	r3, [pc, #600]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374e:	4b94      	ldr	r3, [pc, #592]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80e4 	beq.w	800392e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_RCC_OscConfig+0x4c>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	f040 808b 	bne.w	800388a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b01      	cmp	r3, #1
 8003778:	f040 8087 	bne.w	800388a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800377c:	4b88      	ldr	r3, [pc, #544]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x64>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e3df      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	4b81      	ldr	r3, [pc, #516]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_RCC_OscConfig+0x7e>
 80037a4:	4b7e      	ldr	r3, [pc, #504]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037ac:	e005      	b.n	80037ba <HAL_RCC_OscConfig+0x8a>
 80037ae:	4b7c      	ldr	r3, [pc, #496]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d223      	bcs.n	8003806 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fdcc 	bl	8004360 <RCC_SetFlashLatencyFromMSIRange>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e3c0      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f043 0308 	orr.w	r3, r3, #8
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	496d      	ldr	r1, [pc, #436]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f0:	4b6b      	ldr	r3, [pc, #428]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	4968      	ldr	r1, [pc, #416]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e025      	b.n	8003852 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003806:	4b66      	ldr	r3, [pc, #408]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a65      	ldr	r2, [pc, #404]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b63      	ldr	r3, [pc, #396]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4960      	ldr	r1, [pc, #384]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003824:	4b5e      	ldr	r3, [pc, #376]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	495b      	ldr	r1, [pc, #364]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fd8c 	bl	8004360 <RCC_SetFlashLatencyFromMSIRange>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e380      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003852:	f000 fcc1 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b51      	ldr	r3, [pc, #324]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4950      	ldr	r1, [pc, #320]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a4e      	ldr	r2, [pc, #312]	@ (80039a8 <HAL_RCC_OscConfig+0x278>)
 8003870:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003872:	4b4e      	ldr	r3, [pc, #312]	@ (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe f950 	bl	8001b1c <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d052      	beq.n	800392c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	e364      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d032      	beq.n	80038f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003892:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a42      	ldr	r2, [pc, #264]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800389e:	f7fe f98d 	bl	8001bbc <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a6:	f7fe f989 	bl	8001bbc <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e34d      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038b8:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a35      	ldr	r2, [pc, #212]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038ca:	f043 0308 	orr.w	r3, r3, #8
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b33      	ldr	r3, [pc, #204]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4930      	ldr	r1, [pc, #192]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	492b      	ldr	r1, [pc, #172]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
 80038f6:	e01a      	b.n	800392e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f8:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003904:	f7fe f95a 	bl	8001bbc <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390c:	f7fe f956 	bl	8001bbc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e31a      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1dc>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d073      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x21c>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d10e      	bne.n	8003964 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d063      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d15f      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e2f7      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x24c>
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0b      	ldr	r2, [pc, #44]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e025      	b.n	80039c8 <HAL_RCC_OscConfig+0x298>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003984:	d114      	bne.n	80039b0 <HAL_RCC_OscConfig+0x280>
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a05      	ldr	r2, [pc, #20]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a02      	ldr	r2, [pc, #8]	@ (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e013      	b.n	80039c8 <HAL_RCC_OscConfig+0x298>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	080086f0 	.word	0x080086f0
 80039a8:	20040000 	.word	0x20040000
 80039ac:	20040004 	.word	0x20040004
 80039b0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b9d      	ldr	r3, [pc, #628]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a9c      	ldr	r2, [pc, #624]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe f8f4 	bl	8001bbc <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe f8f0 	bl	8001bbc <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e2b4      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	4b92      	ldr	r3, [pc, #584]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2a8>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe f8e0 	bl	8001bbc <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe f8dc 	bl	8001bbc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	@ 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e2a0      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a12:	4b88      	ldr	r3, [pc, #544]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d0>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d060      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x310>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d119      	bne.n	8003a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d116      	bne.n	8003a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a40:	4b7c      	ldr	r3, [pc, #496]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_OscConfig+0x328>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e27d      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b76      	ldr	r3, [pc, #472]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	4973      	ldr	r1, [pc, #460]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6c:	e040      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d023      	beq.n	8003abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a76:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe f89b 	bl	8001bbc <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe f897 	bl	8001bbc <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e25b      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9c:	4b65      	ldr	r3, [pc, #404]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b62      	ldr	r3, [pc, #392]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	495f      	ldr	r1, [pc, #380]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b5d      	ldr	r3, [pc, #372]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe f877 	bl	8001bbc <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe f873 	bl	8001bbc <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e237      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae4:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe f852 	bl	8001bbc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe f84e 	bl	8001bbc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e212      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b2e:	4b41      	ldr	r3, [pc, #260]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <HAL_RCC_OscConfig+0x3ec>
 8003b3c:	e01b      	b.n	8003b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b44:	4a3b      	ldr	r2, [pc, #236]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe f835 	bl	8001bbc <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fe f831 	bl	8001bbc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1f5      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b68:	4b32      	ldr	r3, [pc, #200]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ef      	bne.n	8003b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80a6 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10d      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	4a26      	ldr	r2, [pc, #152]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba0:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	4b21      	ldr	r3, [pc, #132]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d118      	bne.n	8003bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fff8 	bl	8001bbc <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fd fff4 	bl	8001bbc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1b8      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be2:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <HAL_RCC_OscConfig+0x508>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4d8>
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c06:	e029      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d115      	bne.n	8003c3c <HAL_RCC_OscConfig+0x50c>
 8003c10:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	4a07      	ldr	r2, [pc, #28]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	4a03      	ldr	r2, [pc, #12]	@ (8003c34 <HAL_RCC_OscConfig+0x504>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	4a9c      	ldr	r2, [pc, #624]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c4c:	4b99      	ldr	r3, [pc, #612]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	4a98      	ldr	r2, [pc, #608]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fd ffaa 	bl	8001bbc <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fd ffa6 	bl	8001bbc <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e168      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	4b8c      	ldr	r3, [pc, #560]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ed      	beq.n	8003c6c <HAL_RCC_OscConfig+0x53c>
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fd ff93 	bl	8001bbc <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd ff8f 	bl	8001bbc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e151      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb0:	4b80      	ldr	r3, [pc, #512]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ed      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ce4:	4b73      	ldr	r3, [pc, #460]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cea:	4a72      	ldr	r2, [pc, #456]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd ff62 	bl	8001bbc <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfc:	f7fd ff5e 	bl	8001bbc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e122      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d0e:	4b69      	ldr	r3, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x5cc>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d1e:	4b65      	ldr	r3, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d24:	4a63      	ldr	r2, [pc, #396]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd ff45 	bl	8001bbc <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d36:	f7fd ff41 	bl	8001bbc <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e105      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d48:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80f9 	beq.w	8003f52 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f040 80cf 	bne.w	8003f08 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d6a:	4b52      	ldr	r3, [pc, #328]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d12c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d123      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d113      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d071      	beq.n	8003ebc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d068      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dde:	4b35      	ldr	r3, [pc, #212]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dea:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0ac      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e06:	f7fd fed9 	bl	8001bbc <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd fed5 	bl	8001bbc <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e099      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e20:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b21      	ldr	r3, [pc, #132]	@ (8003eb8 <HAL_RCC_OscConfig+0x788>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	4311      	orrs	r1, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e46:	0212      	lsls	r2, r2, #8
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e4e:	0852      	lsrs	r2, r2, #1
 8003e50:	3a01      	subs	r2, #1
 8003e52:	0552      	lsls	r2, r2, #21
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e5a:	0852      	lsrs	r2, r2, #1
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0652      	lsls	r2, r2, #25
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e66:	06d2      	lsls	r2, r2, #27
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	4912      	ldr	r1, [pc, #72]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e70:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0f      	ldr	r2, [pc, #60]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e88:	f7fd fe98 	bl	8001bbc <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fe94 	bl	8001bbc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e058      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea2:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <HAL_RCC_OscConfig+0x784>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eae:	e050      	b.n	8003f52 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04f      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebc:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d144      	bne.n	8003f52 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ec8:	4b24      	ldr	r3, [pc, #144]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ed4:	4b21      	ldr	r3, [pc, #132]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a20      	ldr	r2, [pc, #128]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ede:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ee0:	f7fd fe6c 	bl	8001bbc <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd fe68 	bl	8001bbc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e02c      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003efa:	4b18      	ldr	r3, [pc, #96]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x7b8>
 8003f06:	e024      	b.n	8003f52 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d01f      	beq.n	8003f4e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fe4f 	bl	8001bbc <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fd fe4b 	bl	8001bbc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e00f      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	4905      	ldr	r1, [pc, #20]	@ (8003f5c <HAL_RCC_OscConfig+0x82c>)
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_RCC_OscConfig+0x830>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60cb      	str	r3, [r1, #12]
 8003f4c:	e001      	b.n	8003f52 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	feeefffc 	.word	0xfeeefffc

08003f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e11d      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b90      	ldr	r3, [pc, #576]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d910      	bls.n	8003fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b8d      	ldr	r3, [pc, #564]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 020f 	bic.w	r2, r3, #15
 8003f92:	498b      	ldr	r1, [pc, #556]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b89      	ldr	r3, [pc, #548]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e105      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d010      	beq.n	8003fda <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	4b81      	ldr	r3, [pc, #516]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d908      	bls.n	8003fda <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	497b      	ldr	r1, [pc, #492]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d079      	beq.n	80040da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d11e      	bne.n	800402c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0dc      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003ffe:	f000 fa09 	bl	8004414 <RCC_GetSysClockFreqFromPLLSource>
 8004002:	4603      	mov	r3, r0
 8004004:	4a70      	ldr	r2, [pc, #448]	@ (80041c8 <HAL_RCC_ClockConfig+0x264>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d946      	bls.n	8004098 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800400a:	4b6e      	ldr	r3, [pc, #440]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d140      	bne.n	8004098 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004016:	4b6b      	ldr	r3, [pc, #428]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800401e:	4a69      	ldr	r2, [pc, #420]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e035      	b.n	8004098 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d107      	bne.n	8004044 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004034:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d115      	bne.n	800406c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0b9      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800404c:	4b5d      	ldr	r3, [pc, #372]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0ad      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405c:	4b59      	ldr	r3, [pc, #356]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0a5      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800406c:	f000 f8b4 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004070:	4603      	mov	r3, r0
 8004072:	4a55      	ldr	r2, [pc, #340]	@ (80041c8 <HAL_RCC_ClockConfig+0x264>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d90f      	bls.n	8004098 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004078:	4b52      	ldr	r3, [pc, #328]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004084:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800408c:	4a4d      	ldr	r2, [pc, #308]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800408e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004092:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004098:	4b4a      	ldr	r3, [pc, #296]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 0203 	bic.w	r2, r3, #3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4947      	ldr	r1, [pc, #284]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040aa:	f7fd fd87 	bl	8001bbc <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b2:	f7fd fd83 	bl	8001bbc <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e077      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c8:	4b3e      	ldr	r3, [pc, #248]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 020c 	and.w	r2, r3, #12
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d1eb      	bne.n	80040b2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d105      	bne.n	80040ec <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040e0:	4b38      	ldr	r3, [pc, #224]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a37      	ldr	r2, [pc, #220]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 80040e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ea:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	4b31      	ldr	r3, [pc, #196]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004104:	429a      	cmp	r2, r3
 8004106:	d208      	bcs.n	800411a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	492b      	ldr	r1, [pc, #172]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411a:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d210      	bcs.n	800414a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 020f 	bic.w	r2, r3, #15
 8004130:	4923      	ldr	r1, [pc, #140]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004138:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <HAL_RCC_ClockConfig+0x25c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e036      	b.n	80041b8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004156:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4918      	ldr	r1, [pc, #96]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004174:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4910      	ldr	r1, [pc, #64]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004188:	f000 f826 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <HAL_RCC_ClockConfig+0x260>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	490c      	ldr	r1, [pc, #48]	@ (80041cc <HAL_RCC_ClockConfig+0x268>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	4a0a      	ldr	r2, [pc, #40]	@ (80041d0 <HAL_RCC_ClockConfig+0x26c>)
 80041a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041a8:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <HAL_RCC_ClockConfig+0x270>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd fcb5 	bl	8001b1c <HAL_InitTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	73fb      	strb	r3, [r7, #15]

  return status;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40021000 	.word	0x40021000
 80041c8:	04c4b400 	.word	0x04c4b400
 80041cc:	080086f0 	.word	0x080086f0
 80041d0:	20040000 	.word	0x20040000
 80041d4:	20040004 	.word	0x20040004

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e6:	4b3e      	ldr	r3, [pc, #248]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d121      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d11e      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800420c:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d107      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e005      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004228:	4b2d      	ldr	r3, [pc, #180]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004234:	4a2b      	ldr	r2, [pc, #172]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10d      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d102      	bne.n	8004256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e004      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d101      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800425c:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x114>)
 800425e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d134      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0xa6>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d003      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xac>
 800427c:	e005      	b.n	800428a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800427e:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004280:	617b      	str	r3, [r7, #20]
      break;
 8004282:	e005      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004286:	617b      	str	r3, [r7, #20]
      break;
 8004288:	e002      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	617b      	str	r3, [r7, #20]
      break;
 800428e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004290:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3301      	adds	r3, #1
 800429c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	fb03 f202 	mul.w	r2, r3, r2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	0e5b      	lsrs	r3, r3, #25
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	3301      	adds	r3, #1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042d0:	69bb      	ldr	r3, [r7, #24]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	@ 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	08008708 	.word	0x08008708
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b03      	ldr	r3, [pc, #12]	@ (8004304 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20040000 	.word	0x20040000

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800430c:	f7ff fff0 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	08008700 	.word	0x08008700

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004338:	f7ff ffda 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0adb      	lsrs	r3, r3, #11
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <HAL_RCC_GetPCLK2Freq+0x28>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	08008700 	.word	0x08008700

08004360 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800436c:	4b27      	ldr	r3, [pc, #156]	@ (800440c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004378:	f7ff f906 	bl	8003588 <HAL_PWREx_GetVoltageRange>
 800437c:	6178      	str	r0, [r7, #20]
 800437e:	e014      	b.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b22      	ldr	r3, [pc, #136]	@ (800440c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	4a21      	ldr	r2, [pc, #132]	@ (800440c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	@ 0x58
 800438c:	4b1f      	ldr	r3, [pc, #124]	@ (800440c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004398:	f7ff f8f6 	bl	8003588 <HAL_PWREx_GetVoltageRange>
 800439c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	4a1a      	ldr	r2, [pc, #104]	@ (800440c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b0:	d10b      	bne.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d913      	bls.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80043bc:	d902      	bls.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043be:	2302      	movs	r3, #2
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	e00d      	b.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c4:	2301      	movs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e00a      	b.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80043ce:	d902      	bls.n	80043d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80043d0:	2302      	movs	r3, #2
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e004      	b.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b70      	cmp	r3, #112	@ 0x70
 80043da:	d101      	bne.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043dc:	2301      	movs	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 020f 	bic.w	r2, r3, #15
 80043e8:	4909      	ldr	r1, [pc, #36]	@ (8004410 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	40022000 	.word	0x40022000

08004414 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800441a:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d00b      	beq.n	8004442 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d825      	bhi.n	800447c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d008      	beq.n	8004448 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d11f      	bne.n	800447c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800443c:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800443e:	613b      	str	r3, [r7, #16]
    break;
 8004440:	e01f      	b.n	8004482 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004442:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004444:	613b      	str	r3, [r7, #16]
    break;
 8004446:	e01c      	b.n	8004482 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004448:	4b21      	ldr	r3, [pc, #132]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004454:	4b1e      	ldr	r3, [pc, #120]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e005      	b.n	8004470 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004464:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004470:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004478:	613b      	str	r3, [r7, #16]
    break;
 800447a:	e002      	b.n	8004482 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
    break;
 8004480:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004482:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	3301      	adds	r3, #1
 800448e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004490:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	fb03 f202 	mul.w	r2, r3, r2
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0e5b      	lsrs	r3, r3, #25
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044c2:	683b      	ldr	r3, [r7, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40021000 	.word	0x40021000
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	007a1200 	.word	0x007a1200
 80044dc:	08008708 	.word	0x08008708

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ec:	2300      	movs	r3, #0
 80044ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d040      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004500:	2b80      	cmp	r3, #128	@ 0x80
 8004502:	d02a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004504:	2b80      	cmp	r3, #128	@ 0x80
 8004506:	d825      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004508:	2b60      	cmp	r3, #96	@ 0x60
 800450a:	d026      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800450c:	2b60      	cmp	r3, #96	@ 0x60
 800450e:	d821      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d006      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004514:	2b40      	cmp	r3, #64	@ 0x40
 8004516:	d81d      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d010      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004520:	e018      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004522:	4b89      	ldr	r3, [pc, #548]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4a88      	ldr	r2, [pc, #544]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800452e:	e015      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fb02 	bl	8004b40 <RCCEx_PLLSAI1_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004540:	e00c      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3320      	adds	r3, #32
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fbed 	bl	8004d28 <RCCEx_PLLSAI2_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004552:	e003      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	74fb      	strb	r3, [r7, #19]
      break;
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800455a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004562:	4b79      	ldr	r3, [pc, #484]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004568:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004570:	4975      	ldr	r1, [pc, #468]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004578:	e001      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d047      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004592:	d030      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004598:	d82a      	bhi.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800459a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800459e:	d02a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80045a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045a4:	d824      	bhi.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045aa:	d008      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xde>
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b0:	d81e      	bhi.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ba:	d010      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045bc:	e018      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045be:	4b62      	ldr	r3, [pc, #392]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4a61      	ldr	r2, [pc, #388]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ca:	e015      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fab4 	bl	8004b40 <RCCEx_PLLSAI1_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045dc:	e00c      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3320      	adds	r3, #32
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fb9f 	bl	8004d28 <RCCEx_PLLSAI2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ee:	e003      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	74fb      	strb	r3, [r7, #19]
      break;
 80045f4:	e000      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80045f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045fe:	4b52      	ldr	r3, [pc, #328]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004604:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	494e      	ldr	r1, [pc, #312]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004614:	e001      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 809f 	beq.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004628:	2300      	movs	r3, #0
 800462a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800462c:	4b46      	ldr	r3, [pc, #280]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	4b41      	ldr	r3, [pc, #260]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004646:	4a40      	ldr	r2, [pc, #256]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464c:	6593      	str	r3, [r2, #88]	@ 0x58
 800464e:	4b3e      	ldr	r3, [pc, #248]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465a:	2301      	movs	r3, #1
 800465c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465e:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3a      	ldr	r2, [pc, #232]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800466a:	f7fd faa7 	bl	8001bbc <HAL_GetTick>
 800466e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004670:	e009      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004672:	f7fd faa3 	bl	8001bbc <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d902      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	74fb      	strb	r3, [r7, #19]
        break;
 8004684:	e005      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004686:	4b31      	ldr	r3, [pc, #196]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ef      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d15b      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004698:	4b2b      	ldr	r3, [pc, #172]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01f      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d019      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046b6:	4b24      	ldr	r3, [pc, #144]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046c2:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046e2:	4a19      	ldr	r2, [pc, #100]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd fa62 	bl	8001bbc <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fa:	e00b      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fd fa5e 	bl	8001bbc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d902      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	74fb      	strb	r3, [r7, #19]
            break;
 8004712:	e006      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0ec      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004722:	7cfb      	ldrb	r3, [r7, #19]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10c      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004728:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	4903      	ldr	r1, [pc, #12]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004740:	e008      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	74bb      	strb	r3, [r7, #18]
 8004746:	e005      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004754:	7c7b      	ldrb	r3, [r7, #17]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475a:	4ba0      	ldr	r3, [pc, #640]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	4a9f      	ldr	r2, [pc, #636]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004772:	4b9a      	ldr	r3, [pc, #616]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f023 0203 	bic.w	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	4996      	ldr	r1, [pc, #600]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004794:	4b91      	ldr	r3, [pc, #580]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	f023 020c 	bic.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	498e      	ldr	r1, [pc, #568]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b6:	4b89      	ldr	r3, [pc, #548]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c4:	4985      	ldr	r1, [pc, #532]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d8:	4b80      	ldr	r3, [pc, #512]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e6:	497d      	ldr	r1, [pc, #500]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047fa:	4b78      	ldr	r3, [pc, #480]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004808:	4974      	ldr	r1, [pc, #464]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800481c:	4b6f      	ldr	r3, [pc, #444]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482a:	496c      	ldr	r1, [pc, #432]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800483e:	4b67      	ldr	r3, [pc, #412]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800484c:	4963      	ldr	r1, [pc, #396]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004860:	4b5e      	ldr	r3, [pc, #376]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486e:	495b      	ldr	r1, [pc, #364]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004882:	4b56      	ldr	r3, [pc, #344]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004888:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	4952      	ldr	r1, [pc, #328]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048a4:	4b4d      	ldr	r3, [pc, #308]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	494a      	ldr	r1, [pc, #296]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048c6:	4b45      	ldr	r3, [pc, #276]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	4941      	ldr	r1, [pc, #260]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048e8:	4b3c      	ldr	r3, [pc, #240]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	4939      	ldr	r1, [pc, #228]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800490a:	4b34      	ldr	r3, [pc, #208]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004918:	4930      	ldr	r1, [pc, #192]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004928:	d106      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492a:	4b2c      	ldr	r3, [pc, #176]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a2b      	ldr	r2, [pc, #172]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004934:	60d3      	str	r3, [r2, #12]
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f8f9 	bl	8004b40 <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d04d      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800496c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004970:	d108      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004972:	4b1a      	ldr	r3, [pc, #104]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004974:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004978:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800497a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800497e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004982:	e012      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004984:	4b15      	ldr	r3, [pc, #84]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498a:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004990:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049a2:	490e      	ldr	r1, [pc, #56]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e020      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ca:	d109      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a02      	ldr	r2, [pc, #8]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
 80049d8:	e014      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2101      	movs	r1, #1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f8a5 	bl	8004b40 <RCCEx_PLLSAI1_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d028      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a10:	4b4a      	ldr	r3, [pc, #296]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a1e:	4947      	ldr	r1, [pc, #284]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a30:	4b42      	ldr	r3, [pc, #264]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a41      	ldr	r2, [pc, #260]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a3a:	60d3      	str	r3, [r2, #12]
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f876 	bl	8004b40 <RCCEx_PLLSAI1_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01e      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a6e:	4b33      	ldr	r3, [pc, #204]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a7e:	492f      	ldr	r1, [pc, #188]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 f851 	bl	8004b40 <RCCEx_PLLSAI1_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ab8:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004abe:	f023 0204 	bic.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac8:	491c      	ldr	r1, [pc, #112]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004adc:	4b17      	ldr	r3, [pc, #92]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ae2:	f023 0218 	bic.w	r2, r3, #24
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	4913      	ldr	r1, [pc, #76]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b00:	4b0e      	ldr	r3, [pc, #56]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b10:	490a      	ldr	r1, [pc, #40]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b22:	d105      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a04      	ldr	r2, [pc, #16]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b30:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000

08004b40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b4e:	4b72      	ldr	r3, [pc, #456]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0203 	and.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d103      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d142      	bne.n	8004bf8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	e03f      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d018      	beq.n	8004bb2 <RCCEx_PLLSAI1_Config+0x72>
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d825      	bhi.n	8004bd0 <RCCEx_PLLSAI1_Config+0x90>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d002      	beq.n	8004b8e <RCCEx_PLLSAI1_Config+0x4e>
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d009      	beq.n	8004ba0 <RCCEx_PLLSAI1_Config+0x60>
 8004b8c:	e020      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b8e:	4b62      	ldr	r3, [pc, #392]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9e:	e01a      	b.n	8004bd6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb0:	e013      	b.n	8004bda <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bb2:	4b59      	ldr	r3, [pc, #356]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bbe:	4b56      	ldr	r3, [pc, #344]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bce:	e006      	b.n	8004bde <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd4:	e004      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004be6:	4b4c      	ldr	r3, [pc, #304]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4949      	ldr	r1, [pc, #292]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8086 	bne.w	8004d0c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c00:	4b45      	ldr	r3, [pc, #276]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a44      	ldr	r2, [pc, #272]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fc ffd6 	bl	8001bbc <HAL_GetTick>
 8004c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c12:	e009      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c14:	f7fc ffd2 	bl	8001bbc <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d902      	bls.n	8004c28 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	73fb      	strb	r3, [r7, #15]
        break;
 8004c26:	e005      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c28:	4b3b      	ldr	r3, [pc, #236]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ef      	bne.n	8004c14 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d168      	bne.n	8004d0c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d113      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c40:	4b35      	ldr	r3, [pc, #212]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	0211      	lsls	r1, r2, #8
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68d2      	ldr	r2, [r2, #12]
 8004c52:	06d2      	lsls	r2, r2, #27
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6852      	ldr	r2, [r2, #4]
 8004c5a:	3a01      	subs	r2, #1
 8004c5c:	0112      	lsls	r2, r2, #4
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	492d      	ldr	r1, [pc, #180]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	610b      	str	r3, [r1, #16]
 8004c66:	e02d      	b.n	8004cc4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d115      	bne.n	8004c9a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	0211      	lsls	r1, r2, #8
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6912      	ldr	r2, [r2, #16]
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0552      	lsls	r2, r2, #21
 8004c86:	4311      	orrs	r1, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	430a      	orrs	r2, r1
 8004c92:	4921      	ldr	r1, [pc, #132]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
 8004c98:	e014      	b.n	8004cc4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6892      	ldr	r2, [r2, #8]
 8004ca6:	0211      	lsls	r1, r2, #8
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6952      	ldr	r2, [r2, #20]
 8004cac:	0852      	lsrs	r2, r2, #1
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	0652      	lsls	r2, r2, #25
 8004cb2:	4311      	orrs	r1, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6852      	ldr	r2, [r2, #4]
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	4916      	ldr	r1, [pc, #88]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cc4:	4b14      	ldr	r3, [pc, #80]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fc ff74 	bl	8001bbc <HAL_GetTick>
 8004cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cd6:	e009      	b.n	8004cec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cd8:	f7fc ff70 	bl	8001bbc <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d902      	bls.n	8004cec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8004cea:	e005      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cec:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ef      	beq.n	8004cd8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	4904      	ldr	r1, [pc, #16]	@ (8004d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	07ff800f 	.word	0x07ff800f
 8004d20:	ff9f800f 	.word	0xff9f800f
 8004d24:	f9ff800f 	.word	0xf9ff800f

08004d28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d36:	4b72      	ldr	r3, [pc, #456]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00e      	beq.n	8004d60 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d42:	4b6f      	ldr	r3, [pc, #444]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0203 	and.w	r2, r3, #3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d103      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
       ||
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d142      	bne.n	8004de0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e03f      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d018      	beq.n	8004d9a <RCCEx_PLLSAI2_Config+0x72>
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d825      	bhi.n	8004db8 <RCCEx_PLLSAI2_Config+0x90>
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d002      	beq.n	8004d76 <RCCEx_PLLSAI2_Config+0x4e>
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d009      	beq.n	8004d88 <RCCEx_PLLSAI2_Config+0x60>
 8004d74:	e020      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d76:	4b62      	ldr	r3, [pc, #392]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11d      	bne.n	8004dbe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d86:	e01a      	b.n	8004dbe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d88:	4b5d      	ldr	r3, [pc, #372]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d116      	bne.n	8004dc2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e013      	b.n	8004dc2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d9a:	4b59      	ldr	r3, [pc, #356]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004da6:	4b56      	ldr	r3, [pc, #344]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004db6:	e006      	b.n	8004dc6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e004      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004dce:	4b4c      	ldr	r3, [pc, #304]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 0203 	bic.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4949      	ldr	r1, [pc, #292]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8086 	bne.w	8004ef4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004de8:	4b45      	ldr	r3, [pc, #276]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a44      	ldr	r2, [pc, #272]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fc fee2 	bl	8001bbc <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dfc:	f7fc fede 	bl	8001bbc <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e10:	4b3b      	ldr	r3, [pc, #236]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ef      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d168      	bne.n	8004ef4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d113      	bne.n	8004e50 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e28:	4b35      	ldr	r3, [pc, #212]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	4b35      	ldr	r3, [pc, #212]	@ (8004f04 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	0211      	lsls	r1, r2, #8
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	06d2      	lsls	r2, r2, #27
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6852      	ldr	r2, [r2, #4]
 8004e42:	3a01      	subs	r2, #1
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	430a      	orrs	r2, r1
 8004e48:	492d      	ldr	r1, [pc, #180]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	614b      	str	r3, [r1, #20]
 8004e4e:	e02d      	b.n	8004eac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d115      	bne.n	8004e82 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e56:	4b2a      	ldr	r3, [pc, #168]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004f08 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0211      	lsls	r1, r2, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6912      	ldr	r2, [r2, #16]
 8004e68:	0852      	lsrs	r2, r2, #1
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0552      	lsls	r2, r2, #21
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	4921      	ldr	r1, [pc, #132]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	614b      	str	r3, [r1, #20]
 8004e80:	e014      	b.n	8004eac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e82:	4b1f      	ldr	r3, [pc, #124]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	4b21      	ldr	r3, [pc, #132]	@ (8004f0c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6892      	ldr	r2, [r2, #8]
 8004e8e:	0211      	lsls	r1, r2, #8
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6952      	ldr	r2, [r2, #20]
 8004e94:	0852      	lsrs	r2, r2, #1
 8004e96:	3a01      	subs	r2, #1
 8004e98:	0652      	lsls	r2, r2, #25
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6852      	ldr	r2, [r2, #4]
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	4916      	ldr	r1, [pc, #88]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004eac:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc fe80 	bl	8001bbc <HAL_GetTick>
 8004ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ebe:	e009      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec0:	f7fc fe7c 	bl	8001bbc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d902      	bls.n	8004ed4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ed2:	e005      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ef      	beq.n	8004ec0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ee6:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	07ff800f 	.word	0x07ff800f
 8004f08:	ff9f800f 	.word	0xff9f800f
 8004f0c:	f9ff800f 	.word	0xf9ff800f

08004f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e042      	b.n	8004fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc fc47 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2224      	movs	r2, #36	@ 0x24
 8004f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fbb2 	bl	80056c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8b3 	bl	80050cc <UART_SetConfig>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e01b      	b.n	8004fa8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fc31 	bl	8005808 <UART_CheckIdleState>
 8004fa6:	4603      	mov	r3, r0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	@ 0x28
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d17b      	bne.n	80050c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_Transmit+0x26>
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e074      	b.n	80050c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2221      	movs	r2, #33	@ 0x21
 8004fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fea:	f7fc fde7 	bl	8001bbc <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005008:	d108      	bne.n	800501c <HAL_UART_Transmit+0x6c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e003      	b.n	8005024 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005024:	e030      	b.n	8005088 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	2180      	movs	r1, #128	@ 0x80
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fc93 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e03d      	b.n	80050c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	881a      	ldrh	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505a:	b292      	uxth	r2, r2
 800505c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3302      	adds	r3, #2
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e007      	b.n	8005076 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	3301      	adds	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1c8      	bne.n	8005026 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2200      	movs	r2, #0
 800509c:	2140      	movs	r1, #64	@ 0x40
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fc5c 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e006      	b.n	80050c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
  }
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b08c      	sub	sp, #48	@ 0x30
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4baa      	ldr	r3, [pc, #680]	@ (80053a4 <UART_SetConfig+0x2d8>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005104:	430b      	orrs	r3, r1
 8005106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a9f      	ldr	r2, [pc, #636]	@ (80053a8 <UART_SetConfig+0x2dc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005134:	4313      	orrs	r3, r2
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005142:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800514c:	430b      	orrs	r3, r1
 800514e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005156:	f023 010f 	bic.w	r1, r3, #15
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a90      	ldr	r2, [pc, #576]	@ (80053ac <UART_SetConfig+0x2e0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d125      	bne.n	80051bc <UART_SetConfig+0xf0>
 8005170:	4b8f      	ldr	r3, [pc, #572]	@ (80053b0 <UART_SetConfig+0x2e4>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b03      	cmp	r3, #3
 800517c:	d81a      	bhi.n	80051b4 <UART_SetConfig+0xe8>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <UART_SetConfig+0xb8>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005195 	.word	0x08005195
 8005188:	080051a5 	.word	0x080051a5
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080051ad 	.word	0x080051ad
 8005194:	2301      	movs	r3, #1
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519a:	e116      	b.n	80053ca <UART_SetConfig+0x2fe>
 800519c:	2302      	movs	r3, #2
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a2:	e112      	b.n	80053ca <UART_SetConfig+0x2fe>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051aa:	e10e      	b.n	80053ca <UART_SetConfig+0x2fe>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b2:	e10a      	b.n	80053ca <UART_SetConfig+0x2fe>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ba:	e106      	b.n	80053ca <UART_SetConfig+0x2fe>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a7c      	ldr	r2, [pc, #496]	@ (80053b4 <UART_SetConfig+0x2e8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d138      	bne.n	8005238 <UART_SetConfig+0x16c>
 80051c6:	4b7a      	ldr	r3, [pc, #488]	@ (80053b0 <UART_SetConfig+0x2e4>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	d82d      	bhi.n	8005230 <UART_SetConfig+0x164>
 80051d4:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x110>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	08005211 	.word	0x08005211
 80051e0:	08005231 	.word	0x08005231
 80051e4:	08005231 	.word	0x08005231
 80051e8:	08005231 	.word	0x08005231
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005231 	.word	0x08005231
 80051f4:	08005231 	.word	0x08005231
 80051f8:	08005231 	.word	0x08005231
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005231 	.word	0x08005231
 8005204:	08005231 	.word	0x08005231
 8005208:	08005231 	.word	0x08005231
 800520c:	08005229 	.word	0x08005229
 8005210:	2300      	movs	r3, #0
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005216:	e0d8      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005218:	2302      	movs	r3, #2
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521e:	e0d4      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005220:	2304      	movs	r3, #4
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005226:	e0d0      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005228:	2308      	movs	r3, #8
 800522a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522e:	e0cc      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005230:	2310      	movs	r3, #16
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005236:	e0c8      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5e      	ldr	r2, [pc, #376]	@ (80053b8 <UART_SetConfig+0x2ec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d125      	bne.n	800528e <UART_SetConfig+0x1c2>
 8005242:	4b5b      	ldr	r3, [pc, #364]	@ (80053b0 <UART_SetConfig+0x2e4>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800524c:	2b30      	cmp	r3, #48	@ 0x30
 800524e:	d016      	beq.n	800527e <UART_SetConfig+0x1b2>
 8005250:	2b30      	cmp	r3, #48	@ 0x30
 8005252:	d818      	bhi.n	8005286 <UART_SetConfig+0x1ba>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d00a      	beq.n	800526e <UART_SetConfig+0x1a2>
 8005258:	2b20      	cmp	r3, #32
 800525a:	d814      	bhi.n	8005286 <UART_SetConfig+0x1ba>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <UART_SetConfig+0x19a>
 8005260:	2b10      	cmp	r3, #16
 8005262:	d008      	beq.n	8005276 <UART_SetConfig+0x1aa>
 8005264:	e00f      	b.n	8005286 <UART_SetConfig+0x1ba>
 8005266:	2300      	movs	r3, #0
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526c:	e0ad      	b.n	80053ca <UART_SetConfig+0x2fe>
 800526e:	2302      	movs	r3, #2
 8005270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005274:	e0a9      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005276:	2304      	movs	r3, #4
 8005278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527c:	e0a5      	b.n	80053ca <UART_SetConfig+0x2fe>
 800527e:	2308      	movs	r3, #8
 8005280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005284:	e0a1      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005286:	2310      	movs	r3, #16
 8005288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528c:	e09d      	b.n	80053ca <UART_SetConfig+0x2fe>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a4a      	ldr	r2, [pc, #296]	@ (80053bc <UART_SetConfig+0x2f0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d125      	bne.n	80052e4 <UART_SetConfig+0x218>
 8005298:	4b45      	ldr	r3, [pc, #276]	@ (80053b0 <UART_SetConfig+0x2e4>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052a4:	d016      	beq.n	80052d4 <UART_SetConfig+0x208>
 80052a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052a8:	d818      	bhi.n	80052dc <UART_SetConfig+0x210>
 80052aa:	2b80      	cmp	r3, #128	@ 0x80
 80052ac:	d00a      	beq.n	80052c4 <UART_SetConfig+0x1f8>
 80052ae:	2b80      	cmp	r3, #128	@ 0x80
 80052b0:	d814      	bhi.n	80052dc <UART_SetConfig+0x210>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <UART_SetConfig+0x1f0>
 80052b6:	2b40      	cmp	r3, #64	@ 0x40
 80052b8:	d008      	beq.n	80052cc <UART_SetConfig+0x200>
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x210>
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e082      	b.n	80053ca <UART_SetConfig+0x2fe>
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e07e      	b.n	80053ca <UART_SetConfig+0x2fe>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e07a      	b.n	80053ca <UART_SetConfig+0x2fe>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e076      	b.n	80053ca <UART_SetConfig+0x2fe>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e2:	e072      	b.n	80053ca <UART_SetConfig+0x2fe>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a35      	ldr	r2, [pc, #212]	@ (80053c0 <UART_SetConfig+0x2f4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d12a      	bne.n	8005344 <UART_SetConfig+0x278>
 80052ee:	4b30      	ldr	r3, [pc, #192]	@ (80053b0 <UART_SetConfig+0x2e4>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052fc:	d01a      	beq.n	8005334 <UART_SetConfig+0x268>
 80052fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005302:	d81b      	bhi.n	800533c <UART_SetConfig+0x270>
 8005304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005308:	d00c      	beq.n	8005324 <UART_SetConfig+0x258>
 800530a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800530e:	d815      	bhi.n	800533c <UART_SetConfig+0x270>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <UART_SetConfig+0x250>
 8005314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005318:	d008      	beq.n	800532c <UART_SetConfig+0x260>
 800531a:	e00f      	b.n	800533c <UART_SetConfig+0x270>
 800531c:	2300      	movs	r3, #0
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005322:	e052      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005324:	2302      	movs	r3, #2
 8005326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532a:	e04e      	b.n	80053ca <UART_SetConfig+0x2fe>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005332:	e04a      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533a:	e046      	b.n	80053ca <UART_SetConfig+0x2fe>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005342:	e042      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <UART_SetConfig+0x2dc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d13a      	bne.n	80053c4 <UART_SetConfig+0x2f8>
 800534e:	4b18      	ldr	r3, [pc, #96]	@ (80053b0 <UART_SetConfig+0x2e4>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005354:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005358:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800535c:	d01a      	beq.n	8005394 <UART_SetConfig+0x2c8>
 800535e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005362:	d81b      	bhi.n	800539c <UART_SetConfig+0x2d0>
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005368:	d00c      	beq.n	8005384 <UART_SetConfig+0x2b8>
 800536a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800536e:	d815      	bhi.n	800539c <UART_SetConfig+0x2d0>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <UART_SetConfig+0x2b0>
 8005374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005378:	d008      	beq.n	800538c <UART_SetConfig+0x2c0>
 800537a:	e00f      	b.n	800539c <UART_SetConfig+0x2d0>
 800537c:	2300      	movs	r3, #0
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e022      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005384:	2302      	movs	r3, #2
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e01e      	b.n	80053ca <UART_SetConfig+0x2fe>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e01a      	b.n	80053ca <UART_SetConfig+0x2fe>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539a:	e016      	b.n	80053ca <UART_SetConfig+0x2fe>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a2:	e012      	b.n	80053ca <UART_SetConfig+0x2fe>
 80053a4:	cfff69f3 	.word	0xcfff69f3
 80053a8:	40008000 	.word	0x40008000
 80053ac:	40013800 	.word	0x40013800
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40004400 	.word	0x40004400
 80053b8:	40004800 	.word	0x40004800
 80053bc:	40004c00 	.word	0x40004c00
 80053c0:	40005000 	.word	0x40005000
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4aae      	ldr	r2, [pc, #696]	@ (8005688 <UART_SetConfig+0x5bc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	f040 8097 	bne.w	8005504 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d823      	bhi.n	8005426 <UART_SetConfig+0x35a>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0x318>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005427 	.word	0x08005427
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005427 	.word	0x08005427
 80053f4:	08005417 	.word	0x08005417
 80053f8:	08005427 	.word	0x08005427
 80053fc:	08005427 	.word	0x08005427
 8005400:	08005427 	.word	0x08005427
 8005404:	0800541f 	.word	0x0800541f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7fe ff7e 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 800540c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800540e:	e010      	b.n	8005432 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005410:	4b9e      	ldr	r3, [pc, #632]	@ (800568c <UART_SetConfig+0x5c0>)
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005414:	e00d      	b.n	8005432 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005416:	f7fe fedf 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800541a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800541c:	e009      	b.n	8005432 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005424:	e005      	b.n	8005432 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005430:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8130 	beq.w	800569a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	4a94      	ldr	r2, [pc, #592]	@ (8005690 <UART_SetConfig+0x5c4>)
 8005440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005444:	461a      	mov	r2, r3
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	fbb3 f3f2 	udiv	r3, r3, r2
 800544c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d305      	bcc.n	800546a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	429a      	cmp	r2, r3
 8005468:	d903      	bls.n	8005472 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005470:	e113      	b.n	800569a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2200      	movs	r2, #0
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	60fa      	str	r2, [r7, #12]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	4a84      	ldr	r2, [pc, #528]	@ (8005690 <UART_SetConfig+0x5c4>)
 8005480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005484:	b29b      	uxth	r3, r3
 8005486:	2200      	movs	r2, #0
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005494:	f7fb fba0 	bl	8000bd8 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	020b      	lsls	r3, r1, #8
 80054aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054ae:	0202      	lsls	r2, r0, #8
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	6849      	ldr	r1, [r1, #4]
 80054b4:	0849      	lsrs	r1, r1, #1
 80054b6:	2000      	movs	r0, #0
 80054b8:	460c      	mov	r4, r1
 80054ba:	4605      	mov	r5, r0
 80054bc:	eb12 0804 	adds.w	r8, r2, r4
 80054c0:	eb43 0905 	adc.w	r9, r3, r5
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	469a      	mov	sl, r3
 80054cc:	4693      	mov	fp, r2
 80054ce:	4652      	mov	r2, sl
 80054d0:	465b      	mov	r3, fp
 80054d2:	4640      	mov	r0, r8
 80054d4:	4649      	mov	r1, r9
 80054d6:	f7fb fb7f 	bl	8000bd8 <__aeabi_uldivmod>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4613      	mov	r3, r2
 80054e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e8:	d308      	bcc.n	80054fc <UART_SetConfig+0x430>
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f0:	d204      	bcs.n	80054fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	e0ce      	b.n	800569a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005502:	e0ca      	b.n	800569a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800550c:	d166      	bne.n	80055dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800550e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005512:	2b08      	cmp	r3, #8
 8005514:	d827      	bhi.n	8005566 <UART_SetConfig+0x49a>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <UART_SetConfig+0x450>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005541 	.word	0x08005541
 8005520:	08005549 	.word	0x08005549
 8005524:	08005551 	.word	0x08005551
 8005528:	08005567 	.word	0x08005567
 800552c:	08005557 	.word	0x08005557
 8005530:	08005567 	.word	0x08005567
 8005534:	08005567 	.word	0x08005567
 8005538:	08005567 	.word	0x08005567
 800553c:	0800555f 	.word	0x0800555f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005540:	f7fe fee2 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005546:	e014      	b.n	8005572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005548:	f7fe fef4 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 800554c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800554e:	e010      	b.n	8005572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005550:	4b4e      	ldr	r3, [pc, #312]	@ (800568c <UART_SetConfig+0x5c0>)
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005554:	e00d      	b.n	8005572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005556:	f7fe fe3f 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800555a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800555c:	e009      	b.n	8005572 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005564:	e005      	b.n	8005572 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8090 	beq.w	800569a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	4a44      	ldr	r2, [pc, #272]	@ (8005690 <UART_SetConfig+0x5c4>)
 8005580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005584:	461a      	mov	r2, r3
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	fbb3 f3f2 	udiv	r3, r3, r2
 800558c:	005a      	lsls	r2, r3, #1
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	441a      	add	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d916      	bls.n	80055d4 <UART_SetConfig+0x508>
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ac:	d212      	bcs.n	80055d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f023 030f 	bic.w	r3, r3, #15
 80055b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	8bfb      	ldrh	r3, [r7, #30]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	8bfa      	ldrh	r2, [r7, #30]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	e062      	b.n	800569a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055da:	e05e      	b.n	800569a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d828      	bhi.n	8005636 <UART_SetConfig+0x56a>
 80055e4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <UART_SetConfig+0x520>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	08005637 	.word	0x08005637
 80055fc:	08005627 	.word	0x08005627
 8005600:	08005637 	.word	0x08005637
 8005604:	08005637 	.word	0x08005637
 8005608:	08005637 	.word	0x08005637
 800560c:	0800562f 	.word	0x0800562f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fe fe7a 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005616:	e014      	b.n	8005642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005618:	f7fe fe8c 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 800561c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800561e:	e010      	b.n	8005642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005620:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <UART_SetConfig+0x5c0>)
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005624:	e00d      	b.n	8005642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005626:	f7fe fdd7 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800562a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800562c:	e009      	b.n	8005642 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005634:	e005      	b.n	8005642 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005640:	bf00      	nop
    }

    if (pclk != 0U)
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d028      	beq.n	800569a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	4a10      	ldr	r2, [pc, #64]	@ (8005690 <UART_SetConfig+0x5c4>)
 800564e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005652:	461a      	mov	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	fbb3 f2f2 	udiv	r2, r3, r2
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	441a      	add	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d910      	bls.n	8005694 <UART_SetConfig+0x5c8>
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005678:	d20c      	bcs.n	8005694 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	b29a      	uxth	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	e009      	b.n	800569a <UART_SetConfig+0x5ce>
 8005686:	bf00      	nop
 8005688:	40008000 	.word	0x40008000
 800568c:	00f42400 	.word	0x00f42400
 8005690:	08008738 	.word	0x08008738
      }
      else
      {
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2201      	movs	r2, #1
 800569e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3730      	adds	r7, #48	@ 0x30
 80056be:	46bd      	mov	sp, r7
 80056c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01a      	beq.n	80057da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c2:	d10a      	bne.n	80057da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b098      	sub	sp, #96	@ 0x60
 800580c:	af02      	add	r7, sp, #8
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005818:	f7fc f9d0 	bl	8001bbc <HAL_GetTick>
 800581c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d12f      	bne.n	800588c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800582c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005834:	2200      	movs	r2, #0
 8005836:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f88e 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d022      	beq.n	800588c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800585a:	653b      	str	r3, [r7, #80]	@ 0x50
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005864:	647b      	str	r3, [r7, #68]	@ 0x44
 8005866:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e6      	bne.n	8005846 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e063      	b.n	8005954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b04      	cmp	r3, #4
 8005898:	d149      	bne.n	800592e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a2:	2200      	movs	r2, #0
 80058a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f857 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03c      	beq.n	800592e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	623b      	str	r3, [r7, #32]
   return(result);
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e6      	bne.n	80058b4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005906:	61fa      	str	r2, [r7, #28]
 8005908:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	617b      	str	r3, [r7, #20]
   return(result);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e5      	bne.n	80058e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e012      	b.n	8005954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3758      	adds	r7, #88	@ 0x58
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596c:	e04f      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005974:	d04b      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005976:	f7fc f921 	bl	8001bbc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <UART_WaitOnFlagUntilTimeout+0x30>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e04e      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d037      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b80      	cmp	r3, #128	@ 0x80
 80059a2:	d034      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b40      	cmp	r3, #64	@ 0x40
 80059a8:	d031      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d110      	bne.n	80059da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2208      	movs	r2, #8
 80059be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f838 	bl	8005a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2208      	movs	r2, #8
 80059ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e029      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059e8:	d111      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f81e 	bl	8005a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e00f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d0a0      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b095      	sub	sp, #84	@ 0x54
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e3      	bne.n	8005a70 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d118      	bne.n	8005ae2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f023 0310 	bic.w	r3, r3, #16
 8005ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	613b      	str	r3, [r7, #16]
   return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005af6:	bf00      	nop
 8005af8:	3754      	adds	r7, #84	@ 0x54
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e027      	b.n	8005b68 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	@ 0x24
 8005b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e02d      	b.n	8005be8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	@ 0x24
 8005b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f84f 	bl	8005c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e02d      	b.n	8005c64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	@ 0x24
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f811 	bl	8005c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c8c:	e031      	b.n	8005cf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c8e:	2308      	movs	r3, #8
 8005c90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c92:	2308      	movs	r3, #8
 8005c94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	0e5b      	lsrs	r3, r3, #25
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0f5b      	lsrs	r3, r3, #29
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	7b3a      	ldrb	r2, [r7, #12]
 8005cba:	4911      	ldr	r1, [pc, #68]	@ (8005d00 <UARTEx_SetNbDataToProcess+0x94>)
 8005cbc:	5c8a      	ldrb	r2, [r1, r2]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cc2:	7b3a      	ldrb	r2, [r7, #12]
 8005cc4:	490f      	ldr	r1, [pc, #60]	@ (8005d04 <UARTEx_SetNbDataToProcess+0x98>)
 8005cc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	7b7a      	ldrb	r2, [r7, #13]
 8005cd8:	4909      	ldr	r1, [pc, #36]	@ (8005d00 <UARTEx_SetNbDataToProcess+0x94>)
 8005cda:	5c8a      	ldrb	r2, [r1, r2]
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ce0:	7b7a      	ldrb	r2, [r7, #13]
 8005ce2:	4908      	ldr	r1, [pc, #32]	@ (8005d04 <UARTEx_SetNbDataToProcess+0x98>)
 8005ce4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ce6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	08008750 	.word	0x08008750
 8005d04:	08008758 	.word	0x08008758

08005d08 <__cvt>:
 8005d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	ec57 6b10 	vmov	r6, r7, d0
 8005d10:	2f00      	cmp	r7, #0
 8005d12:	460c      	mov	r4, r1
 8005d14:	4619      	mov	r1, r3
 8005d16:	463b      	mov	r3, r7
 8005d18:	bfbb      	ittet	lt
 8005d1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d1e:	461f      	movlt	r7, r3
 8005d20:	2300      	movge	r3, #0
 8005d22:	232d      	movlt	r3, #45	@ 0x2d
 8005d24:	700b      	strb	r3, [r1, #0]
 8005d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d2c:	4691      	mov	r9, r2
 8005d2e:	f023 0820 	bic.w	r8, r3, #32
 8005d32:	bfbc      	itt	lt
 8005d34:	4632      	movlt	r2, r6
 8005d36:	4616      	movlt	r6, r2
 8005d38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d3c:	d005      	beq.n	8005d4a <__cvt+0x42>
 8005d3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d42:	d100      	bne.n	8005d46 <__cvt+0x3e>
 8005d44:	3401      	adds	r4, #1
 8005d46:	2102      	movs	r1, #2
 8005d48:	e000      	b.n	8005d4c <__cvt+0x44>
 8005d4a:	2103      	movs	r1, #3
 8005d4c:	ab03      	add	r3, sp, #12
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	ab02      	add	r3, sp, #8
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	ec47 6b10 	vmov	d0, r6, r7
 8005d58:	4653      	mov	r3, sl
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	f000 fe10 	bl	8006980 <_dtoa_r>
 8005d60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d64:	4605      	mov	r5, r0
 8005d66:	d119      	bne.n	8005d9c <__cvt+0x94>
 8005d68:	f019 0f01 	tst.w	r9, #1
 8005d6c:	d00e      	beq.n	8005d8c <__cvt+0x84>
 8005d6e:	eb00 0904 	add.w	r9, r0, r4
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4630      	mov	r0, r6
 8005d78:	4639      	mov	r1, r7
 8005d7a:	f7fa febd 	bl	8000af8 <__aeabi_dcmpeq>
 8005d7e:	b108      	cbz	r0, 8005d84 <__cvt+0x7c>
 8005d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d84:	2230      	movs	r2, #48	@ 0x30
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	454b      	cmp	r3, r9
 8005d8a:	d31e      	bcc.n	8005dca <__cvt+0xc2>
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d90:	1b5b      	subs	r3, r3, r5
 8005d92:	4628      	mov	r0, r5
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	b004      	add	sp, #16
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005da0:	eb00 0904 	add.w	r9, r0, r4
 8005da4:	d1e5      	bne.n	8005d72 <__cvt+0x6a>
 8005da6:	7803      	ldrb	r3, [r0, #0]
 8005da8:	2b30      	cmp	r3, #48	@ 0x30
 8005daa:	d10a      	bne.n	8005dc2 <__cvt+0xba>
 8005dac:	2200      	movs	r2, #0
 8005dae:	2300      	movs	r3, #0
 8005db0:	4630      	mov	r0, r6
 8005db2:	4639      	mov	r1, r7
 8005db4:	f7fa fea0 	bl	8000af8 <__aeabi_dcmpeq>
 8005db8:	b918      	cbnz	r0, 8005dc2 <__cvt+0xba>
 8005dba:	f1c4 0401 	rsb	r4, r4, #1
 8005dbe:	f8ca 4000 	str.w	r4, [sl]
 8005dc2:	f8da 3000 	ldr.w	r3, [sl]
 8005dc6:	4499      	add	r9, r3
 8005dc8:	e7d3      	b.n	8005d72 <__cvt+0x6a>
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e7d9      	b.n	8005d86 <__cvt+0x7e>

08005dd2 <__exponent>:
 8005dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	bfba      	itte	lt
 8005dd8:	4249      	neglt	r1, r1
 8005dda:	232d      	movlt	r3, #45	@ 0x2d
 8005ddc:	232b      	movge	r3, #43	@ 0x2b
 8005dde:	2909      	cmp	r1, #9
 8005de0:	7002      	strb	r2, [r0, #0]
 8005de2:	7043      	strb	r3, [r0, #1]
 8005de4:	dd29      	ble.n	8005e3a <__exponent+0x68>
 8005de6:	f10d 0307 	add.w	r3, sp, #7
 8005dea:	461d      	mov	r5, r3
 8005dec:	270a      	movs	r7, #10
 8005dee:	461a      	mov	r2, r3
 8005df0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005df4:	fb07 1416 	mls	r4, r7, r6, r1
 8005df8:	3430      	adds	r4, #48	@ 0x30
 8005dfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dfe:	460c      	mov	r4, r1
 8005e00:	2c63      	cmp	r4, #99	@ 0x63
 8005e02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005e06:	4631      	mov	r1, r6
 8005e08:	dcf1      	bgt.n	8005dee <__exponent+0x1c>
 8005e0a:	3130      	adds	r1, #48	@ 0x30
 8005e0c:	1e94      	subs	r4, r2, #2
 8005e0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e12:	1c41      	adds	r1, r0, #1
 8005e14:	4623      	mov	r3, r4
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	d30a      	bcc.n	8005e30 <__exponent+0x5e>
 8005e1a:	f10d 0309 	add.w	r3, sp, #9
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	42ac      	cmp	r4, r5
 8005e22:	bf88      	it	hi
 8005e24:	2300      	movhi	r3, #0
 8005e26:	3302      	adds	r3, #2
 8005e28:	4403      	add	r3, r0
 8005e2a:	1a18      	subs	r0, r3, r0
 8005e2c:	b003      	add	sp, #12
 8005e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e38:	e7ed      	b.n	8005e16 <__exponent+0x44>
 8005e3a:	2330      	movs	r3, #48	@ 0x30
 8005e3c:	3130      	adds	r1, #48	@ 0x30
 8005e3e:	7083      	strb	r3, [r0, #2]
 8005e40:	70c1      	strb	r1, [r0, #3]
 8005e42:	1d03      	adds	r3, r0, #4
 8005e44:	e7f1      	b.n	8005e2a <__exponent+0x58>
	...

08005e48 <_printf_float>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	b08d      	sub	sp, #52	@ 0x34
 8005e4e:	460c      	mov	r4, r1
 8005e50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e54:	4616      	mov	r6, r2
 8005e56:	461f      	mov	r7, r3
 8005e58:	4605      	mov	r5, r0
 8005e5a:	f000 fcd5 	bl	8006808 <_localeconv_r>
 8005e5e:	6803      	ldr	r3, [r0, #0]
 8005e60:	9304      	str	r3, [sp, #16]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa fa1c 	bl	80002a0 <strlen>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e70:	9005      	str	r0, [sp, #20]
 8005e72:	3307      	adds	r3, #7
 8005e74:	f023 0307 	bic.w	r3, r3, #7
 8005e78:	f103 0208 	add.w	r2, r3, #8
 8005e7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e80:	f8d4 b000 	ldr.w	fp, [r4]
 8005e84:	f8c8 2000 	str.w	r2, [r8]
 8005e88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e90:	9307      	str	r3, [sp, #28]
 8005e92:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8006110 <_printf_float+0x2c8>)
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ea4:	f7fa fe5a 	bl	8000b5c <__aeabi_dcmpun>
 8005ea8:	bb70      	cbnz	r0, 8005f08 <_printf_float+0xc0>
 8005eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eae:	4b98      	ldr	r3, [pc, #608]	@ (8006110 <_printf_float+0x2c8>)
 8005eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005eb4:	f7fa fe34 	bl	8000b20 <__aeabi_dcmple>
 8005eb8:	bb30      	cbnz	r0, 8005f08 <_printf_float+0xc0>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa fe23 	bl	8000b0c <__aeabi_dcmplt>
 8005ec6:	b110      	cbz	r0, 8005ece <_printf_float+0x86>
 8005ec8:	232d      	movs	r3, #45	@ 0x2d
 8005eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ece:	4a91      	ldr	r2, [pc, #580]	@ (8006114 <_printf_float+0x2cc>)
 8005ed0:	4b91      	ldr	r3, [pc, #580]	@ (8006118 <_printf_float+0x2d0>)
 8005ed2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ed6:	bf94      	ite	ls
 8005ed8:	4690      	movls	r8, r2
 8005eda:	4698      	movhi	r8, r3
 8005edc:	2303      	movs	r3, #3
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	f02b 0304 	bic.w	r3, fp, #4
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	f04f 0900 	mov.w	r9, #0
 8005eea:	9700      	str	r7, [sp, #0]
 8005eec:	4633      	mov	r3, r6
 8005eee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 f9d2 	bl	800629c <_printf_common>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f040 808d 	bne.w	8006018 <_printf_float+0x1d0>
 8005efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f02:	b00d      	add	sp, #52	@ 0x34
 8005f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	4649      	mov	r1, r9
 8005f10:	f7fa fe24 	bl	8000b5c <__aeabi_dcmpun>
 8005f14:	b140      	cbz	r0, 8005f28 <_printf_float+0xe0>
 8005f16:	464b      	mov	r3, r9
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bfbc      	itt	lt
 8005f1c:	232d      	movlt	r3, #45	@ 0x2d
 8005f1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f22:	4a7e      	ldr	r2, [pc, #504]	@ (800611c <_printf_float+0x2d4>)
 8005f24:	4b7e      	ldr	r3, [pc, #504]	@ (8006120 <_printf_float+0x2d8>)
 8005f26:	e7d4      	b.n	8005ed2 <_printf_float+0x8a>
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f2e:	9206      	str	r2, [sp, #24]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	d13b      	bne.n	8005fac <_printf_float+0x164>
 8005f34:	2306      	movs	r3, #6
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	6022      	str	r2, [r4, #0]
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f48:	ab09      	add	r3, sp, #36	@ 0x24
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	6861      	ldr	r1, [r4, #4]
 8005f4e:	ec49 8b10 	vmov	d0, r8, r9
 8005f52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f56:	4628      	mov	r0, r5
 8005f58:	f7ff fed6 	bl	8005d08 <__cvt>
 8005f5c:	9b06      	ldr	r3, [sp, #24]
 8005f5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f60:	2b47      	cmp	r3, #71	@ 0x47
 8005f62:	4680      	mov	r8, r0
 8005f64:	d129      	bne.n	8005fba <_printf_float+0x172>
 8005f66:	1cc8      	adds	r0, r1, #3
 8005f68:	db02      	blt.n	8005f70 <_printf_float+0x128>
 8005f6a:	6863      	ldr	r3, [r4, #4]
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	dd41      	ble.n	8005ff4 <_printf_float+0x1ac>
 8005f70:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f74:	fa5f fa8a 	uxtb.w	sl, sl
 8005f78:	3901      	subs	r1, #1
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f80:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f82:	f7ff ff26 	bl	8005dd2 <__exponent>
 8005f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f88:	1813      	adds	r3, r2, r0
 8005f8a:	2a01      	cmp	r2, #1
 8005f8c:	4681      	mov	r9, r0
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	dc02      	bgt.n	8005f98 <_printf_float+0x150>
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	07d2      	lsls	r2, r2, #31
 8005f96:	d501      	bpl.n	8005f9c <_printf_float+0x154>
 8005f98:	3301      	adds	r3, #1
 8005f9a:	6123      	str	r3, [r4, #16]
 8005f9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0a2      	beq.n	8005eea <_printf_float+0xa2>
 8005fa4:	232d      	movs	r3, #45	@ 0x2d
 8005fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005faa:	e79e      	b.n	8005eea <_printf_float+0xa2>
 8005fac:	9a06      	ldr	r2, [sp, #24]
 8005fae:	2a47      	cmp	r2, #71	@ 0x47
 8005fb0:	d1c2      	bne.n	8005f38 <_printf_float+0xf0>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1c0      	bne.n	8005f38 <_printf_float+0xf0>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7bd      	b.n	8005f36 <_printf_float+0xee>
 8005fba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fbe:	d9db      	bls.n	8005f78 <_printf_float+0x130>
 8005fc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005fc4:	d118      	bne.n	8005ff8 <_printf_float+0x1b0>
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	dd0b      	ble.n	8005fe4 <_printf_float+0x19c>
 8005fcc:	6121      	str	r1, [r4, #16]
 8005fce:	b913      	cbnz	r3, 8005fd6 <_printf_float+0x18e>
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	07d0      	lsls	r0, r2, #31
 8005fd4:	d502      	bpl.n	8005fdc <_printf_float+0x194>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	440b      	add	r3, r1
 8005fda:	6123      	str	r3, [r4, #16]
 8005fdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fde:	f04f 0900 	mov.w	r9, #0
 8005fe2:	e7db      	b.n	8005f9c <_printf_float+0x154>
 8005fe4:	b913      	cbnz	r3, 8005fec <_printf_float+0x1a4>
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	07d2      	lsls	r2, r2, #31
 8005fea:	d501      	bpl.n	8005ff0 <_printf_float+0x1a8>
 8005fec:	3302      	adds	r3, #2
 8005fee:	e7f4      	b.n	8005fda <_printf_float+0x192>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e7f2      	b.n	8005fda <_printf_float+0x192>
 8005ff4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	db05      	blt.n	800600a <_printf_float+0x1c2>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	6121      	str	r1, [r4, #16]
 8006002:	07d8      	lsls	r0, r3, #31
 8006004:	d5ea      	bpl.n	8005fdc <_printf_float+0x194>
 8006006:	1c4b      	adds	r3, r1, #1
 8006008:	e7e7      	b.n	8005fda <_printf_float+0x192>
 800600a:	2900      	cmp	r1, #0
 800600c:	bfd4      	ite	le
 800600e:	f1c1 0202 	rsble	r2, r1, #2
 8006012:	2201      	movgt	r2, #1
 8006014:	4413      	add	r3, r2
 8006016:	e7e0      	b.n	8005fda <_printf_float+0x192>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	055a      	lsls	r2, r3, #21
 800601c:	d407      	bmi.n	800602e <_printf_float+0x1e6>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	4642      	mov	r2, r8
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	d12b      	bne.n	8006084 <_printf_float+0x23c>
 800602c:	e767      	b.n	8005efe <_printf_float+0xb6>
 800602e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006032:	f240 80dd 	bls.w	80061f0 <_printf_float+0x3a8>
 8006036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800603a:	2200      	movs	r2, #0
 800603c:	2300      	movs	r3, #0
 800603e:	f7fa fd5b 	bl	8000af8 <__aeabi_dcmpeq>
 8006042:	2800      	cmp	r0, #0
 8006044:	d033      	beq.n	80060ae <_printf_float+0x266>
 8006046:	4a37      	ldr	r2, [pc, #220]	@ (8006124 <_printf_float+0x2dc>)
 8006048:	2301      	movs	r3, #1
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f af54 	beq.w	8005efe <_printf_float+0xb6>
 8006056:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800605a:	4543      	cmp	r3, r8
 800605c:	db02      	blt.n	8006064 <_printf_float+0x21c>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	07d8      	lsls	r0, r3, #31
 8006062:	d50f      	bpl.n	8006084 <_printf_float+0x23c>
 8006064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006068:	4631      	mov	r1, r6
 800606a:	4628      	mov	r0, r5
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f af45 	beq.w	8005efe <_printf_float+0xb6>
 8006074:	f04f 0900 	mov.w	r9, #0
 8006078:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800607c:	f104 0a1a 	add.w	sl, r4, #26
 8006080:	45c8      	cmp	r8, r9
 8006082:	dc09      	bgt.n	8006098 <_printf_float+0x250>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	079b      	lsls	r3, r3, #30
 8006088:	f100 8103 	bmi.w	8006292 <_printf_float+0x44a>
 800608c:	68e0      	ldr	r0, [r4, #12]
 800608e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006090:	4298      	cmp	r0, r3
 8006092:	bfb8      	it	lt
 8006094:	4618      	movlt	r0, r3
 8006096:	e734      	b.n	8005f02 <_printf_float+0xba>
 8006098:	2301      	movs	r3, #1
 800609a:	4652      	mov	r2, sl
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af2b 	beq.w	8005efe <_printf_float+0xb6>
 80060a8:	f109 0901 	add.w	r9, r9, #1
 80060ac:	e7e8      	b.n	8006080 <_printf_float+0x238>
 80060ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dc39      	bgt.n	8006128 <_printf_float+0x2e0>
 80060b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006124 <_printf_float+0x2dc>)
 80060b6:	2301      	movs	r3, #1
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f af1d 	beq.w	8005efe <_printf_float+0xb6>
 80060c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80060c8:	ea59 0303 	orrs.w	r3, r9, r3
 80060cc:	d102      	bne.n	80060d4 <_printf_float+0x28c>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	07d9      	lsls	r1, r3, #31
 80060d2:	d5d7      	bpl.n	8006084 <_printf_float+0x23c>
 80060d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f af0d 	beq.w	8005efe <_printf_float+0xb6>
 80060e4:	f04f 0a00 	mov.w	sl, #0
 80060e8:	f104 0b1a 	add.w	fp, r4, #26
 80060ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ee:	425b      	negs	r3, r3
 80060f0:	4553      	cmp	r3, sl
 80060f2:	dc01      	bgt.n	80060f8 <_printf_float+0x2b0>
 80060f4:	464b      	mov	r3, r9
 80060f6:	e793      	b.n	8006020 <_printf_float+0x1d8>
 80060f8:	2301      	movs	r3, #1
 80060fa:	465a      	mov	r2, fp
 80060fc:	4631      	mov	r1, r6
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	f43f aefb 	beq.w	8005efe <_printf_float+0xb6>
 8006108:	f10a 0a01 	add.w	sl, sl, #1
 800610c:	e7ee      	b.n	80060ec <_printf_float+0x2a4>
 800610e:	bf00      	nop
 8006110:	7fefffff 	.word	0x7fefffff
 8006114:	08008760 	.word	0x08008760
 8006118:	08008764 	.word	0x08008764
 800611c:	08008768 	.word	0x08008768
 8006120:	0800876c 	.word	0x0800876c
 8006124:	08008770 	.word	0x08008770
 8006128:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800612a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800612e:	4553      	cmp	r3, sl
 8006130:	bfa8      	it	ge
 8006132:	4653      	movge	r3, sl
 8006134:	2b00      	cmp	r3, #0
 8006136:	4699      	mov	r9, r3
 8006138:	dc36      	bgt.n	80061a8 <_printf_float+0x360>
 800613a:	f04f 0b00 	mov.w	fp, #0
 800613e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006142:	f104 021a 	add.w	r2, r4, #26
 8006146:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006148:	9306      	str	r3, [sp, #24]
 800614a:	eba3 0309 	sub.w	r3, r3, r9
 800614e:	455b      	cmp	r3, fp
 8006150:	dc31      	bgt.n	80061b6 <_printf_float+0x36e>
 8006152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006154:	459a      	cmp	sl, r3
 8006156:	dc3a      	bgt.n	80061ce <_printf_float+0x386>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07da      	lsls	r2, r3, #31
 800615c:	d437      	bmi.n	80061ce <_printf_float+0x386>
 800615e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006160:	ebaa 0903 	sub.w	r9, sl, r3
 8006164:	9b06      	ldr	r3, [sp, #24]
 8006166:	ebaa 0303 	sub.w	r3, sl, r3
 800616a:	4599      	cmp	r9, r3
 800616c:	bfa8      	it	ge
 800616e:	4699      	movge	r9, r3
 8006170:	f1b9 0f00 	cmp.w	r9, #0
 8006174:	dc33      	bgt.n	80061de <_printf_float+0x396>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800617e:	f104 0b1a 	add.w	fp, r4, #26
 8006182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006184:	ebaa 0303 	sub.w	r3, sl, r3
 8006188:	eba3 0309 	sub.w	r3, r3, r9
 800618c:	4543      	cmp	r3, r8
 800618e:	f77f af79 	ble.w	8006084 <_printf_float+0x23c>
 8006192:	2301      	movs	r3, #1
 8006194:	465a      	mov	r2, fp
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f aeae 	beq.w	8005efe <_printf_float+0xb6>
 80061a2:	f108 0801 	add.w	r8, r8, #1
 80061a6:	e7ec      	b.n	8006182 <_printf_float+0x33a>
 80061a8:	4642      	mov	r2, r8
 80061aa:	4631      	mov	r1, r6
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	d1c2      	bne.n	800613a <_printf_float+0x2f2>
 80061b4:	e6a3      	b.n	8005efe <_printf_float+0xb6>
 80061b6:	2301      	movs	r3, #1
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	9206      	str	r2, [sp, #24]
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	f43f ae9c 	beq.w	8005efe <_printf_float+0xb6>
 80061c6:	9a06      	ldr	r2, [sp, #24]
 80061c8:	f10b 0b01 	add.w	fp, fp, #1
 80061cc:	e7bb      	b.n	8006146 <_printf_float+0x2fe>
 80061ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	d1c0      	bne.n	800615e <_printf_float+0x316>
 80061dc:	e68f      	b.n	8005efe <_printf_float+0xb6>
 80061de:	9a06      	ldr	r2, [sp, #24]
 80061e0:	464b      	mov	r3, r9
 80061e2:	4442      	add	r2, r8
 80061e4:	4631      	mov	r1, r6
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	d1c3      	bne.n	8006176 <_printf_float+0x32e>
 80061ee:	e686      	b.n	8005efe <_printf_float+0xb6>
 80061f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061f4:	f1ba 0f01 	cmp.w	sl, #1
 80061f8:	dc01      	bgt.n	80061fe <_printf_float+0x3b6>
 80061fa:	07db      	lsls	r3, r3, #31
 80061fc:	d536      	bpl.n	800626c <_printf_float+0x424>
 80061fe:	2301      	movs	r3, #1
 8006200:	4642      	mov	r2, r8
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f ae78 	beq.w	8005efe <_printf_float+0xb6>
 800620e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae70 	beq.w	8005efe <_printf_float+0xb6>
 800621e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006222:	2200      	movs	r2, #0
 8006224:	2300      	movs	r3, #0
 8006226:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800622a:	f7fa fc65 	bl	8000af8 <__aeabi_dcmpeq>
 800622e:	b9c0      	cbnz	r0, 8006262 <_printf_float+0x41a>
 8006230:	4653      	mov	r3, sl
 8006232:	f108 0201 	add.w	r2, r8, #1
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	d10c      	bne.n	800625a <_printf_float+0x412>
 8006240:	e65d      	b.n	8005efe <_printf_float+0xb6>
 8006242:	2301      	movs	r3, #1
 8006244:	465a      	mov	r2, fp
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae56 	beq.w	8005efe <_printf_float+0xb6>
 8006252:	f108 0801 	add.w	r8, r8, #1
 8006256:	45d0      	cmp	r8, sl
 8006258:	dbf3      	blt.n	8006242 <_printf_float+0x3fa>
 800625a:	464b      	mov	r3, r9
 800625c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006260:	e6df      	b.n	8006022 <_printf_float+0x1da>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	f104 0b1a 	add.w	fp, r4, #26
 800626a:	e7f4      	b.n	8006256 <_printf_float+0x40e>
 800626c:	2301      	movs	r3, #1
 800626e:	4642      	mov	r2, r8
 8006270:	e7e1      	b.n	8006236 <_printf_float+0x3ee>
 8006272:	2301      	movs	r3, #1
 8006274:	464a      	mov	r2, r9
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	f43f ae3e 	beq.w	8005efe <_printf_float+0xb6>
 8006282:	f108 0801 	add.w	r8, r8, #1
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800628a:	1a5b      	subs	r3, r3, r1
 800628c:	4543      	cmp	r3, r8
 800628e:	dcf0      	bgt.n	8006272 <_printf_float+0x42a>
 8006290:	e6fc      	b.n	800608c <_printf_float+0x244>
 8006292:	f04f 0800 	mov.w	r8, #0
 8006296:	f104 0919 	add.w	r9, r4, #25
 800629a:	e7f4      	b.n	8006286 <_printf_float+0x43e>

0800629c <_printf_common>:
 800629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	4616      	mov	r6, r2
 80062a2:	4698      	mov	r8, r3
 80062a4:	688a      	ldr	r2, [r1, #8]
 80062a6:	690b      	ldr	r3, [r1, #16]
 80062a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bfb8      	it	lt
 80062b0:	4613      	movlt	r3, r2
 80062b2:	6033      	str	r3, [r6, #0]
 80062b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062b8:	4607      	mov	r7, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	b10a      	cbz	r2, 80062c2 <_printf_common+0x26>
 80062be:	3301      	adds	r3, #1
 80062c0:	6033      	str	r3, [r6, #0]
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	0699      	lsls	r1, r3, #26
 80062c6:	bf42      	ittt	mi
 80062c8:	6833      	ldrmi	r3, [r6, #0]
 80062ca:	3302      	addmi	r3, #2
 80062cc:	6033      	strmi	r3, [r6, #0]
 80062ce:	6825      	ldr	r5, [r4, #0]
 80062d0:	f015 0506 	ands.w	r5, r5, #6
 80062d4:	d106      	bne.n	80062e4 <_printf_common+0x48>
 80062d6:	f104 0a19 	add.w	sl, r4, #25
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	6832      	ldr	r2, [r6, #0]
 80062de:	1a9b      	subs	r3, r3, r2
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	dc26      	bgt.n	8006332 <_printf_common+0x96>
 80062e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	3b00      	subs	r3, #0
 80062ec:	bf18      	it	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	0692      	lsls	r2, r2, #26
 80062f2:	d42b      	bmi.n	800634c <_printf_common+0xb0>
 80062f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062f8:	4641      	mov	r1, r8
 80062fa:	4638      	mov	r0, r7
 80062fc:	47c8      	blx	r9
 80062fe:	3001      	adds	r0, #1
 8006300:	d01e      	beq.n	8006340 <_printf_common+0xa4>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	6922      	ldr	r2, [r4, #16]
 8006306:	f003 0306 	and.w	r3, r3, #6
 800630a:	2b04      	cmp	r3, #4
 800630c:	bf02      	ittt	eq
 800630e:	68e5      	ldreq	r5, [r4, #12]
 8006310:	6833      	ldreq	r3, [r6, #0]
 8006312:	1aed      	subeq	r5, r5, r3
 8006314:	68a3      	ldr	r3, [r4, #8]
 8006316:	bf0c      	ite	eq
 8006318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800631c:	2500      	movne	r5, #0
 800631e:	4293      	cmp	r3, r2
 8006320:	bfc4      	itt	gt
 8006322:	1a9b      	subgt	r3, r3, r2
 8006324:	18ed      	addgt	r5, r5, r3
 8006326:	2600      	movs	r6, #0
 8006328:	341a      	adds	r4, #26
 800632a:	42b5      	cmp	r5, r6
 800632c:	d11a      	bne.n	8006364 <_printf_common+0xc8>
 800632e:	2000      	movs	r0, #0
 8006330:	e008      	b.n	8006344 <_printf_common+0xa8>
 8006332:	2301      	movs	r3, #1
 8006334:	4652      	mov	r2, sl
 8006336:	4641      	mov	r1, r8
 8006338:	4638      	mov	r0, r7
 800633a:	47c8      	blx	r9
 800633c:	3001      	adds	r0, #1
 800633e:	d103      	bne.n	8006348 <_printf_common+0xac>
 8006340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	3501      	adds	r5, #1
 800634a:	e7c6      	b.n	80062da <_printf_common+0x3e>
 800634c:	18e1      	adds	r1, r4, r3
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	2030      	movs	r0, #48	@ 0x30
 8006352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006356:	4422      	add	r2, r4
 8006358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800635c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006360:	3302      	adds	r3, #2
 8006362:	e7c7      	b.n	80062f4 <_printf_common+0x58>
 8006364:	2301      	movs	r3, #1
 8006366:	4622      	mov	r2, r4
 8006368:	4641      	mov	r1, r8
 800636a:	4638      	mov	r0, r7
 800636c:	47c8      	blx	r9
 800636e:	3001      	adds	r0, #1
 8006370:	d0e6      	beq.n	8006340 <_printf_common+0xa4>
 8006372:	3601      	adds	r6, #1
 8006374:	e7d9      	b.n	800632a <_printf_common+0x8e>
	...

08006378 <_printf_i>:
 8006378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	7e0f      	ldrb	r7, [r1, #24]
 800637e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006380:	2f78      	cmp	r7, #120	@ 0x78
 8006382:	4691      	mov	r9, r2
 8006384:	4680      	mov	r8, r0
 8006386:	460c      	mov	r4, r1
 8006388:	469a      	mov	sl, r3
 800638a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800638e:	d807      	bhi.n	80063a0 <_printf_i+0x28>
 8006390:	2f62      	cmp	r7, #98	@ 0x62
 8006392:	d80a      	bhi.n	80063aa <_printf_i+0x32>
 8006394:	2f00      	cmp	r7, #0
 8006396:	f000 80d2 	beq.w	800653e <_printf_i+0x1c6>
 800639a:	2f58      	cmp	r7, #88	@ 0x58
 800639c:	f000 80b9 	beq.w	8006512 <_printf_i+0x19a>
 80063a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063a8:	e03a      	b.n	8006420 <_printf_i+0xa8>
 80063aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063ae:	2b15      	cmp	r3, #21
 80063b0:	d8f6      	bhi.n	80063a0 <_printf_i+0x28>
 80063b2:	a101      	add	r1, pc, #4	@ (adr r1, 80063b8 <_printf_i+0x40>)
 80063b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063b8:	08006411 	.word	0x08006411
 80063bc:	08006425 	.word	0x08006425
 80063c0:	080063a1 	.word	0x080063a1
 80063c4:	080063a1 	.word	0x080063a1
 80063c8:	080063a1 	.word	0x080063a1
 80063cc:	080063a1 	.word	0x080063a1
 80063d0:	08006425 	.word	0x08006425
 80063d4:	080063a1 	.word	0x080063a1
 80063d8:	080063a1 	.word	0x080063a1
 80063dc:	080063a1 	.word	0x080063a1
 80063e0:	080063a1 	.word	0x080063a1
 80063e4:	08006525 	.word	0x08006525
 80063e8:	0800644f 	.word	0x0800644f
 80063ec:	080064df 	.word	0x080064df
 80063f0:	080063a1 	.word	0x080063a1
 80063f4:	080063a1 	.word	0x080063a1
 80063f8:	08006547 	.word	0x08006547
 80063fc:	080063a1 	.word	0x080063a1
 8006400:	0800644f 	.word	0x0800644f
 8006404:	080063a1 	.word	0x080063a1
 8006408:	080063a1 	.word	0x080063a1
 800640c:	080064e7 	.word	0x080064e7
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	1d1a      	adds	r2, r3, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6032      	str	r2, [r6, #0]
 8006418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800641c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006420:	2301      	movs	r3, #1
 8006422:	e09d      	b.n	8006560 <_printf_i+0x1e8>
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	1d19      	adds	r1, r3, #4
 800642a:	6031      	str	r1, [r6, #0]
 800642c:	0606      	lsls	r6, r0, #24
 800642e:	d501      	bpl.n	8006434 <_printf_i+0xbc>
 8006430:	681d      	ldr	r5, [r3, #0]
 8006432:	e003      	b.n	800643c <_printf_i+0xc4>
 8006434:	0645      	lsls	r5, r0, #25
 8006436:	d5fb      	bpl.n	8006430 <_printf_i+0xb8>
 8006438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800643c:	2d00      	cmp	r5, #0
 800643e:	da03      	bge.n	8006448 <_printf_i+0xd0>
 8006440:	232d      	movs	r3, #45	@ 0x2d
 8006442:	426d      	negs	r5, r5
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006448:	4859      	ldr	r0, [pc, #356]	@ (80065b0 <_printf_i+0x238>)
 800644a:	230a      	movs	r3, #10
 800644c:	e011      	b.n	8006472 <_printf_i+0xfa>
 800644e:	6821      	ldr	r1, [r4, #0]
 8006450:	6833      	ldr	r3, [r6, #0]
 8006452:	0608      	lsls	r0, r1, #24
 8006454:	f853 5b04 	ldr.w	r5, [r3], #4
 8006458:	d402      	bmi.n	8006460 <_printf_i+0xe8>
 800645a:	0649      	lsls	r1, r1, #25
 800645c:	bf48      	it	mi
 800645e:	b2ad      	uxthmi	r5, r5
 8006460:	2f6f      	cmp	r7, #111	@ 0x6f
 8006462:	4853      	ldr	r0, [pc, #332]	@ (80065b0 <_printf_i+0x238>)
 8006464:	6033      	str	r3, [r6, #0]
 8006466:	bf14      	ite	ne
 8006468:	230a      	movne	r3, #10
 800646a:	2308      	moveq	r3, #8
 800646c:	2100      	movs	r1, #0
 800646e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006472:	6866      	ldr	r6, [r4, #4]
 8006474:	60a6      	str	r6, [r4, #8]
 8006476:	2e00      	cmp	r6, #0
 8006478:	bfa2      	ittt	ge
 800647a:	6821      	ldrge	r1, [r4, #0]
 800647c:	f021 0104 	bicge.w	r1, r1, #4
 8006480:	6021      	strge	r1, [r4, #0]
 8006482:	b90d      	cbnz	r5, 8006488 <_printf_i+0x110>
 8006484:	2e00      	cmp	r6, #0
 8006486:	d04b      	beq.n	8006520 <_printf_i+0x1a8>
 8006488:	4616      	mov	r6, r2
 800648a:	fbb5 f1f3 	udiv	r1, r5, r3
 800648e:	fb03 5711 	mls	r7, r3, r1, r5
 8006492:	5dc7      	ldrb	r7, [r0, r7]
 8006494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006498:	462f      	mov	r7, r5
 800649a:	42bb      	cmp	r3, r7
 800649c:	460d      	mov	r5, r1
 800649e:	d9f4      	bls.n	800648a <_printf_i+0x112>
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d10b      	bne.n	80064bc <_printf_i+0x144>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	07df      	lsls	r7, r3, #31
 80064a8:	d508      	bpl.n	80064bc <_printf_i+0x144>
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	6861      	ldr	r1, [r4, #4]
 80064ae:	4299      	cmp	r1, r3
 80064b0:	bfde      	ittt	le
 80064b2:	2330      	movle	r3, #48	@ 0x30
 80064b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80064bc:	1b92      	subs	r2, r2, r6
 80064be:	6122      	str	r2, [r4, #16]
 80064c0:	f8cd a000 	str.w	sl, [sp]
 80064c4:	464b      	mov	r3, r9
 80064c6:	aa03      	add	r2, sp, #12
 80064c8:	4621      	mov	r1, r4
 80064ca:	4640      	mov	r0, r8
 80064cc:	f7ff fee6 	bl	800629c <_printf_common>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d14a      	bne.n	800656a <_printf_i+0x1f2>
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064d8:	b004      	add	sp, #16
 80064da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f043 0320 	orr.w	r3, r3, #32
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	4833      	ldr	r0, [pc, #204]	@ (80065b4 <_printf_i+0x23c>)
 80064e8:	2778      	movs	r7, #120	@ 0x78
 80064ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	6831      	ldr	r1, [r6, #0]
 80064f2:	061f      	lsls	r7, r3, #24
 80064f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80064f8:	d402      	bmi.n	8006500 <_printf_i+0x188>
 80064fa:	065f      	lsls	r7, r3, #25
 80064fc:	bf48      	it	mi
 80064fe:	b2ad      	uxthmi	r5, r5
 8006500:	6031      	str	r1, [r6, #0]
 8006502:	07d9      	lsls	r1, r3, #31
 8006504:	bf44      	itt	mi
 8006506:	f043 0320 	orrmi.w	r3, r3, #32
 800650a:	6023      	strmi	r3, [r4, #0]
 800650c:	b11d      	cbz	r5, 8006516 <_printf_i+0x19e>
 800650e:	2310      	movs	r3, #16
 8006510:	e7ac      	b.n	800646c <_printf_i+0xf4>
 8006512:	4827      	ldr	r0, [pc, #156]	@ (80065b0 <_printf_i+0x238>)
 8006514:	e7e9      	b.n	80064ea <_printf_i+0x172>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f023 0320 	bic.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	e7f6      	b.n	800650e <_printf_i+0x196>
 8006520:	4616      	mov	r6, r2
 8006522:	e7bd      	b.n	80064a0 <_printf_i+0x128>
 8006524:	6833      	ldr	r3, [r6, #0]
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	6961      	ldr	r1, [r4, #20]
 800652a:	1d18      	adds	r0, r3, #4
 800652c:	6030      	str	r0, [r6, #0]
 800652e:	062e      	lsls	r6, r5, #24
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	d501      	bpl.n	8006538 <_printf_i+0x1c0>
 8006534:	6019      	str	r1, [r3, #0]
 8006536:	e002      	b.n	800653e <_printf_i+0x1c6>
 8006538:	0668      	lsls	r0, r5, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0x1bc>
 800653c:	8019      	strh	r1, [r3, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	6123      	str	r3, [r4, #16]
 8006542:	4616      	mov	r6, r2
 8006544:	e7bc      	b.n	80064c0 <_printf_i+0x148>
 8006546:	6833      	ldr	r3, [r6, #0]
 8006548:	1d1a      	adds	r2, r3, #4
 800654a:	6032      	str	r2, [r6, #0]
 800654c:	681e      	ldr	r6, [r3, #0]
 800654e:	6862      	ldr	r2, [r4, #4]
 8006550:	2100      	movs	r1, #0
 8006552:	4630      	mov	r0, r6
 8006554:	f7f9 fe54 	bl	8000200 <memchr>
 8006558:	b108      	cbz	r0, 800655e <_printf_i+0x1e6>
 800655a:	1b80      	subs	r0, r0, r6
 800655c:	6060      	str	r0, [r4, #4]
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	2300      	movs	r3, #0
 8006564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006568:	e7aa      	b.n	80064c0 <_printf_i+0x148>
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	4632      	mov	r2, r6
 800656e:	4649      	mov	r1, r9
 8006570:	4640      	mov	r0, r8
 8006572:	47d0      	blx	sl
 8006574:	3001      	adds	r0, #1
 8006576:	d0ad      	beq.n	80064d4 <_printf_i+0x15c>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	079b      	lsls	r3, r3, #30
 800657c:	d413      	bmi.n	80065a6 <_printf_i+0x22e>
 800657e:	68e0      	ldr	r0, [r4, #12]
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	4298      	cmp	r0, r3
 8006584:	bfb8      	it	lt
 8006586:	4618      	movlt	r0, r3
 8006588:	e7a6      	b.n	80064d8 <_printf_i+0x160>
 800658a:	2301      	movs	r3, #1
 800658c:	4632      	mov	r2, r6
 800658e:	4649      	mov	r1, r9
 8006590:	4640      	mov	r0, r8
 8006592:	47d0      	blx	sl
 8006594:	3001      	adds	r0, #1
 8006596:	d09d      	beq.n	80064d4 <_printf_i+0x15c>
 8006598:	3501      	adds	r5, #1
 800659a:	68e3      	ldr	r3, [r4, #12]
 800659c:	9903      	ldr	r1, [sp, #12]
 800659e:	1a5b      	subs	r3, r3, r1
 80065a0:	42ab      	cmp	r3, r5
 80065a2:	dcf2      	bgt.n	800658a <_printf_i+0x212>
 80065a4:	e7eb      	b.n	800657e <_printf_i+0x206>
 80065a6:	2500      	movs	r5, #0
 80065a8:	f104 0619 	add.w	r6, r4, #25
 80065ac:	e7f5      	b.n	800659a <_printf_i+0x222>
 80065ae:	bf00      	nop
 80065b0:	08008772 	.word	0x08008772
 80065b4:	08008783 	.word	0x08008783

080065b8 <std>:
 80065b8:	2300      	movs	r3, #0
 80065ba:	b510      	push	{r4, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	e9c0 3300 	strd	r3, r3, [r0]
 80065c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065c6:	6083      	str	r3, [r0, #8]
 80065c8:	8181      	strh	r1, [r0, #12]
 80065ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80065cc:	81c2      	strh	r2, [r0, #14]
 80065ce:	6183      	str	r3, [r0, #24]
 80065d0:	4619      	mov	r1, r3
 80065d2:	2208      	movs	r2, #8
 80065d4:	305c      	adds	r0, #92	@ 0x5c
 80065d6:	f000 f90f 	bl	80067f8 <memset>
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <std+0x58>)
 80065dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80065de:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <std+0x5c>)
 80065e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006618 <std+0x60>)
 80065e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065e6:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <std+0x64>)
 80065e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80065ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006620 <std+0x68>)
 80065ec:	6224      	str	r4, [r4, #32]
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d006      	beq.n	8006600 <std+0x48>
 80065f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065f6:	4294      	cmp	r4, r2
 80065f8:	d002      	beq.n	8006600 <std+0x48>
 80065fa:	33d0      	adds	r3, #208	@ 0xd0
 80065fc:	429c      	cmp	r4, r3
 80065fe:	d105      	bne.n	800660c <std+0x54>
 8006600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006608:	f000 b92c 	b.w	8006864 <__retarget_lock_init_recursive>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	bf00      	nop
 8006610:	08007ed1 	.word	0x08007ed1
 8006614:	08007ef3 	.word	0x08007ef3
 8006618:	08007f2b 	.word	0x08007f2b
 800661c:	08007f4f 	.word	0x08007f4f
 8006620:	200402f4 	.word	0x200402f4

08006624 <stdio_exit_handler>:
 8006624:	4a02      	ldr	r2, [pc, #8]	@ (8006630 <stdio_exit_handler+0xc>)
 8006626:	4903      	ldr	r1, [pc, #12]	@ (8006634 <stdio_exit_handler+0x10>)
 8006628:	4803      	ldr	r0, [pc, #12]	@ (8006638 <stdio_exit_handler+0x14>)
 800662a:	f000 b869 	b.w	8006700 <_fwalk_sglue>
 800662e:	bf00      	nop
 8006630:	2004000c 	.word	0x2004000c
 8006634:	08007765 	.word	0x08007765
 8006638:	2004001c 	.word	0x2004001c

0800663c <cleanup_stdio>:
 800663c:	6841      	ldr	r1, [r0, #4]
 800663e:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <cleanup_stdio+0x34>)
 8006640:	4299      	cmp	r1, r3
 8006642:	b510      	push	{r4, lr}
 8006644:	4604      	mov	r4, r0
 8006646:	d001      	beq.n	800664c <cleanup_stdio+0x10>
 8006648:	f001 f88c 	bl	8007764 <_fflush_r>
 800664c:	68a1      	ldr	r1, [r4, #8]
 800664e:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <cleanup_stdio+0x38>)
 8006650:	4299      	cmp	r1, r3
 8006652:	d002      	beq.n	800665a <cleanup_stdio+0x1e>
 8006654:	4620      	mov	r0, r4
 8006656:	f001 f885 	bl	8007764 <_fflush_r>
 800665a:	68e1      	ldr	r1, [r4, #12]
 800665c:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <cleanup_stdio+0x3c>)
 800665e:	4299      	cmp	r1, r3
 8006660:	d004      	beq.n	800666c <cleanup_stdio+0x30>
 8006662:	4620      	mov	r0, r4
 8006664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006668:	f001 b87c 	b.w	8007764 <_fflush_r>
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	200402f4 	.word	0x200402f4
 8006674:	2004035c 	.word	0x2004035c
 8006678:	200403c4 	.word	0x200403c4

0800667c <global_stdio_init.part.0>:
 800667c:	b510      	push	{r4, lr}
 800667e:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <global_stdio_init.part.0+0x30>)
 8006680:	4c0b      	ldr	r4, [pc, #44]	@ (80066b0 <global_stdio_init.part.0+0x34>)
 8006682:	4a0c      	ldr	r2, [pc, #48]	@ (80066b4 <global_stdio_init.part.0+0x38>)
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	4620      	mov	r0, r4
 8006688:	2200      	movs	r2, #0
 800668a:	2104      	movs	r1, #4
 800668c:	f7ff ff94 	bl	80065b8 <std>
 8006690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006694:	2201      	movs	r2, #1
 8006696:	2109      	movs	r1, #9
 8006698:	f7ff ff8e 	bl	80065b8 <std>
 800669c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066a0:	2202      	movs	r2, #2
 80066a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a6:	2112      	movs	r1, #18
 80066a8:	f7ff bf86 	b.w	80065b8 <std>
 80066ac:	2004042c 	.word	0x2004042c
 80066b0:	200402f4 	.word	0x200402f4
 80066b4:	08006625 	.word	0x08006625

080066b8 <__sfp_lock_acquire>:
 80066b8:	4801      	ldr	r0, [pc, #4]	@ (80066c0 <__sfp_lock_acquire+0x8>)
 80066ba:	f000 b8d4 	b.w	8006866 <__retarget_lock_acquire_recursive>
 80066be:	bf00      	nop
 80066c0:	20040431 	.word	0x20040431

080066c4 <__sfp_lock_release>:
 80066c4:	4801      	ldr	r0, [pc, #4]	@ (80066cc <__sfp_lock_release+0x8>)
 80066c6:	f000 b8cf 	b.w	8006868 <__retarget_lock_release_recursive>
 80066ca:	bf00      	nop
 80066cc:	20040431 	.word	0x20040431

080066d0 <__sinit>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	f7ff fff0 	bl	80066b8 <__sfp_lock_acquire>
 80066d8:	6a23      	ldr	r3, [r4, #32]
 80066da:	b11b      	cbz	r3, 80066e4 <__sinit+0x14>
 80066dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e0:	f7ff bff0 	b.w	80066c4 <__sfp_lock_release>
 80066e4:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <__sinit+0x28>)
 80066e6:	6223      	str	r3, [r4, #32]
 80066e8:	4b04      	ldr	r3, [pc, #16]	@ (80066fc <__sinit+0x2c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f5      	bne.n	80066dc <__sinit+0xc>
 80066f0:	f7ff ffc4 	bl	800667c <global_stdio_init.part.0>
 80066f4:	e7f2      	b.n	80066dc <__sinit+0xc>
 80066f6:	bf00      	nop
 80066f8:	0800663d 	.word	0x0800663d
 80066fc:	2004042c 	.word	0x2004042c

08006700 <_fwalk_sglue>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	4607      	mov	r7, r0
 8006706:	4688      	mov	r8, r1
 8006708:	4614      	mov	r4, r2
 800670a:	2600      	movs	r6, #0
 800670c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006710:	f1b9 0901 	subs.w	r9, r9, #1
 8006714:	d505      	bpl.n	8006722 <_fwalk_sglue+0x22>
 8006716:	6824      	ldr	r4, [r4, #0]
 8006718:	2c00      	cmp	r4, #0
 800671a:	d1f7      	bne.n	800670c <_fwalk_sglue+0xc>
 800671c:	4630      	mov	r0, r6
 800671e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006722:	89ab      	ldrh	r3, [r5, #12]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d907      	bls.n	8006738 <_fwalk_sglue+0x38>
 8006728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800672c:	3301      	adds	r3, #1
 800672e:	d003      	beq.n	8006738 <_fwalk_sglue+0x38>
 8006730:	4629      	mov	r1, r5
 8006732:	4638      	mov	r0, r7
 8006734:	47c0      	blx	r8
 8006736:	4306      	orrs	r6, r0
 8006738:	3568      	adds	r5, #104	@ 0x68
 800673a:	e7e9      	b.n	8006710 <_fwalk_sglue+0x10>

0800673c <_puts_r>:
 800673c:	6a03      	ldr	r3, [r0, #32]
 800673e:	b570      	push	{r4, r5, r6, lr}
 8006740:	6884      	ldr	r4, [r0, #8]
 8006742:	4605      	mov	r5, r0
 8006744:	460e      	mov	r6, r1
 8006746:	b90b      	cbnz	r3, 800674c <_puts_r+0x10>
 8006748:	f7ff ffc2 	bl	80066d0 <__sinit>
 800674c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800674e:	07db      	lsls	r3, r3, #31
 8006750:	d405      	bmi.n	800675e <_puts_r+0x22>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	0598      	lsls	r0, r3, #22
 8006756:	d402      	bmi.n	800675e <_puts_r+0x22>
 8006758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800675a:	f000 f884 	bl	8006866 <__retarget_lock_acquire_recursive>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	0719      	lsls	r1, r3, #28
 8006762:	d502      	bpl.n	800676a <_puts_r+0x2e>
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d135      	bne.n	80067d6 <_puts_r+0x9a>
 800676a:	4621      	mov	r1, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f001 fc31 	bl	8007fd4 <__swsetup_r>
 8006772:	b380      	cbz	r0, 80067d6 <_puts_r+0x9a>
 8006774:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800677a:	07da      	lsls	r2, r3, #31
 800677c:	d405      	bmi.n	800678a <_puts_r+0x4e>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	059b      	lsls	r3, r3, #22
 8006782:	d402      	bmi.n	800678a <_puts_r+0x4e>
 8006784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006786:	f000 f86f 	bl	8006868 <__retarget_lock_release_recursive>
 800678a:	4628      	mov	r0, r5
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	2b00      	cmp	r3, #0
 8006790:	da04      	bge.n	800679c <_puts_r+0x60>
 8006792:	69a2      	ldr	r2, [r4, #24]
 8006794:	429a      	cmp	r2, r3
 8006796:	dc17      	bgt.n	80067c8 <_puts_r+0x8c>
 8006798:	290a      	cmp	r1, #10
 800679a:	d015      	beq.n	80067c8 <_puts_r+0x8c>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	6022      	str	r2, [r4, #0]
 80067a2:	7019      	strb	r1, [r3, #0]
 80067a4:	68a3      	ldr	r3, [r4, #8]
 80067a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067aa:	3b01      	subs	r3, #1
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	2900      	cmp	r1, #0
 80067b0:	d1ed      	bne.n	800678e <_puts_r+0x52>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da11      	bge.n	80067da <_puts_r+0x9e>
 80067b6:	4622      	mov	r2, r4
 80067b8:	210a      	movs	r1, #10
 80067ba:	4628      	mov	r0, r5
 80067bc:	f001 fbcb 	bl	8007f56 <__swbuf_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d0d7      	beq.n	8006774 <_puts_r+0x38>
 80067c4:	250a      	movs	r5, #10
 80067c6:	e7d7      	b.n	8006778 <_puts_r+0x3c>
 80067c8:	4622      	mov	r2, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	f001 fbc3 	bl	8007f56 <__swbuf_r>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d1e7      	bne.n	80067a4 <_puts_r+0x68>
 80067d4:	e7ce      	b.n	8006774 <_puts_r+0x38>
 80067d6:	3e01      	subs	r6, #1
 80067d8:	e7e4      	b.n	80067a4 <_puts_r+0x68>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	6022      	str	r2, [r4, #0]
 80067e0:	220a      	movs	r2, #10
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	e7ee      	b.n	80067c4 <_puts_r+0x88>
	...

080067e8 <puts>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	@ (80067f4 <puts+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f7ff bfa5 	b.w	800673c <_puts_r>
 80067f2:	bf00      	nop
 80067f4:	20040018 	.word	0x20040018

080067f8 <memset>:
 80067f8:	4402      	add	r2, r0
 80067fa:	4603      	mov	r3, r0
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d100      	bne.n	8006802 <memset+0xa>
 8006800:	4770      	bx	lr
 8006802:	f803 1b01 	strb.w	r1, [r3], #1
 8006806:	e7f9      	b.n	80067fc <memset+0x4>

08006808 <_localeconv_r>:
 8006808:	4800      	ldr	r0, [pc, #0]	@ (800680c <_localeconv_r+0x4>)
 800680a:	4770      	bx	lr
 800680c:	20040158 	.word	0x20040158

08006810 <__errno>:
 8006810:	4b01      	ldr	r3, [pc, #4]	@ (8006818 <__errno+0x8>)
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20040018 	.word	0x20040018

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4d0d      	ldr	r5, [pc, #52]	@ (8006854 <__libc_init_array+0x38>)
 8006820:	4c0d      	ldr	r4, [pc, #52]	@ (8006858 <__libc_init_array+0x3c>)
 8006822:	1b64      	subs	r4, r4, r5
 8006824:	10a4      	asrs	r4, r4, #2
 8006826:	2600      	movs	r6, #0
 8006828:	42a6      	cmp	r6, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	4d0b      	ldr	r5, [pc, #44]	@ (800685c <__libc_init_array+0x40>)
 800682e:	4c0c      	ldr	r4, [pc, #48]	@ (8006860 <__libc_init_array+0x44>)
 8006830:	f001 ff48 	bl	80086c4 <_init>
 8006834:	1b64      	subs	r4, r4, r5
 8006836:	10a4      	asrs	r4, r4, #2
 8006838:	2600      	movs	r6, #0
 800683a:	42a6      	cmp	r6, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	f855 3b04 	ldr.w	r3, [r5], #4
 8006844:	4798      	blx	r3
 8006846:	3601      	adds	r6, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	f855 3b04 	ldr.w	r3, [r5], #4
 800684e:	4798      	blx	r3
 8006850:	3601      	adds	r6, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	08008ad8 	.word	0x08008ad8
 8006858:	08008ad8 	.word	0x08008ad8
 800685c:	08008ad8 	.word	0x08008ad8
 8006860:	08008adc 	.word	0x08008adc

08006864 <__retarget_lock_init_recursive>:
 8006864:	4770      	bx	lr

08006866 <__retarget_lock_acquire_recursive>:
 8006866:	4770      	bx	lr

08006868 <__retarget_lock_release_recursive>:
 8006868:	4770      	bx	lr

0800686a <quorem>:
 800686a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686e:	6903      	ldr	r3, [r0, #16]
 8006870:	690c      	ldr	r4, [r1, #16]
 8006872:	42a3      	cmp	r3, r4
 8006874:	4607      	mov	r7, r0
 8006876:	db7e      	blt.n	8006976 <quorem+0x10c>
 8006878:	3c01      	subs	r4, #1
 800687a:	f101 0814 	add.w	r8, r1, #20
 800687e:	00a3      	lsls	r3, r4, #2
 8006880:	f100 0514 	add.w	r5, r0, #20
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006894:	3301      	adds	r3, #1
 8006896:	429a      	cmp	r2, r3
 8006898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800689c:	fbb2 f6f3 	udiv	r6, r2, r3
 80068a0:	d32e      	bcc.n	8006900 <quorem+0x96>
 80068a2:	f04f 0a00 	mov.w	sl, #0
 80068a6:	46c4      	mov	ip, r8
 80068a8:	46ae      	mov	lr, r5
 80068aa:	46d3      	mov	fp, sl
 80068ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068b0:	b298      	uxth	r0, r3
 80068b2:	fb06 a000 	mla	r0, r6, r0, sl
 80068b6:	0c02      	lsrs	r2, r0, #16
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	fb06 2303 	mla	r3, r6, r3, r2
 80068be:	f8de 2000 	ldr.w	r2, [lr]
 80068c2:	b280      	uxth	r0, r0
 80068c4:	b292      	uxth	r2, r2
 80068c6:	1a12      	subs	r2, r2, r0
 80068c8:	445a      	add	r2, fp
 80068ca:	f8de 0000 	ldr.w	r0, [lr]
 80068ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80068d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80068dc:	b292      	uxth	r2, r2
 80068de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80068e2:	45e1      	cmp	r9, ip
 80068e4:	f84e 2b04 	str.w	r2, [lr], #4
 80068e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068ec:	d2de      	bcs.n	80068ac <quorem+0x42>
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	58eb      	ldr	r3, [r5, r3]
 80068f2:	b92b      	cbnz	r3, 8006900 <quorem+0x96>
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	3b04      	subs	r3, #4
 80068f8:	429d      	cmp	r5, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	d32f      	bcc.n	800695e <quorem+0xf4>
 80068fe:	613c      	str	r4, [r7, #16]
 8006900:	4638      	mov	r0, r7
 8006902:	f001 f9dd 	bl	8007cc0 <__mcmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	db25      	blt.n	8006956 <quorem+0xec>
 800690a:	4629      	mov	r1, r5
 800690c:	2000      	movs	r0, #0
 800690e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006912:	f8d1 c000 	ldr.w	ip, [r1]
 8006916:	fa1f fe82 	uxth.w	lr, r2
 800691a:	fa1f f38c 	uxth.w	r3, ip
 800691e:	eba3 030e 	sub.w	r3, r3, lr
 8006922:	4403      	add	r3, r0
 8006924:	0c12      	lsrs	r2, r2, #16
 8006926:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800692a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800692e:	b29b      	uxth	r3, r3
 8006930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006934:	45c1      	cmp	r9, r8
 8006936:	f841 3b04 	str.w	r3, [r1], #4
 800693a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800693e:	d2e6      	bcs.n	800690e <quorem+0xa4>
 8006940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006948:	b922      	cbnz	r2, 8006954 <quorem+0xea>
 800694a:	3b04      	subs	r3, #4
 800694c:	429d      	cmp	r5, r3
 800694e:	461a      	mov	r2, r3
 8006950:	d30b      	bcc.n	800696a <quorem+0x100>
 8006952:	613c      	str	r4, [r7, #16]
 8006954:	3601      	adds	r6, #1
 8006956:	4630      	mov	r0, r6
 8006958:	b003      	add	sp, #12
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	3b04      	subs	r3, #4
 8006962:	2a00      	cmp	r2, #0
 8006964:	d1cb      	bne.n	80068fe <quorem+0x94>
 8006966:	3c01      	subs	r4, #1
 8006968:	e7c6      	b.n	80068f8 <quorem+0x8e>
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	3b04      	subs	r3, #4
 800696e:	2a00      	cmp	r2, #0
 8006970:	d1ef      	bne.n	8006952 <quorem+0xe8>
 8006972:	3c01      	subs	r4, #1
 8006974:	e7ea      	b.n	800694c <quorem+0xe2>
 8006976:	2000      	movs	r0, #0
 8006978:	e7ee      	b.n	8006958 <quorem+0xee>
 800697a:	0000      	movs	r0, r0
 800697c:	0000      	movs	r0, r0
	...

08006980 <_dtoa_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	69c7      	ldr	r7, [r0, #28]
 8006986:	b099      	sub	sp, #100	@ 0x64
 8006988:	ed8d 0b02 	vstr	d0, [sp, #8]
 800698c:	ec55 4b10 	vmov	r4, r5, d0
 8006990:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006992:	9109      	str	r1, [sp, #36]	@ 0x24
 8006994:	4683      	mov	fp, r0
 8006996:	920e      	str	r2, [sp, #56]	@ 0x38
 8006998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800699a:	b97f      	cbnz	r7, 80069bc <_dtoa_r+0x3c>
 800699c:	2010      	movs	r0, #16
 800699e:	f000 fdb3 	bl	8007508 <malloc>
 80069a2:	4602      	mov	r2, r0
 80069a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80069a8:	b920      	cbnz	r0, 80069b4 <_dtoa_r+0x34>
 80069aa:	4ba7      	ldr	r3, [pc, #668]	@ (8006c48 <_dtoa_r+0x2c8>)
 80069ac:	21ef      	movs	r1, #239	@ 0xef
 80069ae:	48a7      	ldr	r0, [pc, #668]	@ (8006c4c <_dtoa_r+0x2cc>)
 80069b0:	f001 fc4e 	bl	8008250 <__assert_func>
 80069b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80069b8:	6007      	str	r7, [r0, #0]
 80069ba:	60c7      	str	r7, [r0, #12]
 80069bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069c0:	6819      	ldr	r1, [r3, #0]
 80069c2:	b159      	cbz	r1, 80069dc <_dtoa_r+0x5c>
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	604a      	str	r2, [r1, #4]
 80069c8:	2301      	movs	r3, #1
 80069ca:	4093      	lsls	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 ff3c 	bl	800784c <_Bfree>
 80069d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	1e2b      	subs	r3, r5, #0
 80069de:	bfb9      	ittee	lt
 80069e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80069e4:	9303      	strlt	r3, [sp, #12]
 80069e6:	2300      	movge	r3, #0
 80069e8:	6033      	strge	r3, [r6, #0]
 80069ea:	9f03      	ldr	r7, [sp, #12]
 80069ec:	4b98      	ldr	r3, [pc, #608]	@ (8006c50 <_dtoa_r+0x2d0>)
 80069ee:	bfbc      	itt	lt
 80069f0:	2201      	movlt	r2, #1
 80069f2:	6032      	strlt	r2, [r6, #0]
 80069f4:	43bb      	bics	r3, r7
 80069f6:	d112      	bne.n	8006a1e <_dtoa_r+0x9e>
 80069f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a04:	4323      	orrs	r3, r4
 8006a06:	f000 854d 	beq.w	80074a4 <_dtoa_r+0xb24>
 8006a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c64 <_dtoa_r+0x2e4>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 854f 	beq.w	80074b4 <_dtoa_r+0xb34>
 8006a16:	f10a 0303 	add.w	r3, sl, #3
 8006a1a:	f000 bd49 	b.w	80074b0 <_dtoa_r+0xb30>
 8006a1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	ec51 0b17 	vmov	r0, r1, d7
 8006a28:	2300      	movs	r3, #0
 8006a2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006a2e:	f7fa f863 	bl	8000af8 <__aeabi_dcmpeq>
 8006a32:	4680      	mov	r8, r0
 8006a34:	b158      	cbz	r0, 8006a4e <_dtoa_r+0xce>
 8006a36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a38:	2301      	movs	r3, #1
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a3e:	b113      	cbz	r3, 8006a46 <_dtoa_r+0xc6>
 8006a40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a42:	4b84      	ldr	r3, [pc, #528]	@ (8006c54 <_dtoa_r+0x2d4>)
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c68 <_dtoa_r+0x2e8>
 8006a4a:	f000 bd33 	b.w	80074b4 <_dtoa_r+0xb34>
 8006a4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a52:	aa16      	add	r2, sp, #88	@ 0x58
 8006a54:	a917      	add	r1, sp, #92	@ 0x5c
 8006a56:	4658      	mov	r0, fp
 8006a58:	f001 f9e2 	bl	8007e20 <__d2b>
 8006a5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a60:	4681      	mov	r9, r0
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	d077      	beq.n	8006b56 <_dtoa_r+0x1d6>
 8006a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a80:	4619      	mov	r1, r3
 8006a82:	2200      	movs	r2, #0
 8006a84:	4b74      	ldr	r3, [pc, #464]	@ (8006c58 <_dtoa_r+0x2d8>)
 8006a86:	f7f9 fc17 	bl	80002b8 <__aeabi_dsub>
 8006a8a:	a369      	add	r3, pc, #420	@ (adr r3, 8006c30 <_dtoa_r+0x2b0>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fdca 	bl	8000628 <__aeabi_dmul>
 8006a94:	a368      	add	r3, pc, #416	@ (adr r3, 8006c38 <_dtoa_r+0x2b8>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fc0f 	bl	80002bc <__adddf3>
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	f7f9 fd56 	bl	8000554 <__aeabi_i2d>
 8006aa8:	a365      	add	r3, pc, #404	@ (adr r3, 8006c40 <_dtoa_r+0x2c0>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fdbb 	bl	8000628 <__aeabi_dmul>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7f9 fbff 	bl	80002bc <__adddf3>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	f7fa f861 	bl	8000b88 <__aeabi_d2iz>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4607      	mov	r7, r0
 8006aca:	2300      	movs	r3, #0
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7fa f81c 	bl	8000b0c <__aeabi_dcmplt>
 8006ad4:	b140      	cbz	r0, 8006ae8 <_dtoa_r+0x168>
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	f7f9 fd3c 	bl	8000554 <__aeabi_i2d>
 8006adc:	4622      	mov	r2, r4
 8006ade:	462b      	mov	r3, r5
 8006ae0:	f7fa f80a 	bl	8000af8 <__aeabi_dcmpeq>
 8006ae4:	b900      	cbnz	r0, 8006ae8 <_dtoa_r+0x168>
 8006ae6:	3f01      	subs	r7, #1
 8006ae8:	2f16      	cmp	r7, #22
 8006aea:	d851      	bhi.n	8006b90 <_dtoa_r+0x210>
 8006aec:	4b5b      	ldr	r3, [pc, #364]	@ (8006c5c <_dtoa_r+0x2dc>)
 8006aee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006afa:	f7fa f807 	bl	8000b0c <__aeabi_dcmplt>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d048      	beq.n	8006b94 <_dtoa_r+0x214>
 8006b02:	3f01      	subs	r7, #1
 8006b04:	2300      	movs	r3, #0
 8006b06:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b0a:	1b9b      	subs	r3, r3, r6
 8006b0c:	1e5a      	subs	r2, r3, #1
 8006b0e:	bf44      	itt	mi
 8006b10:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b14:	2300      	movmi	r3, #0
 8006b16:	9208      	str	r2, [sp, #32]
 8006b18:	bf54      	ite	pl
 8006b1a:	f04f 0800 	movpl.w	r8, #0
 8006b1e:	9308      	strmi	r3, [sp, #32]
 8006b20:	2f00      	cmp	r7, #0
 8006b22:	db39      	blt.n	8006b98 <_dtoa_r+0x218>
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006b28:	443b      	add	r3, r7
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d864      	bhi.n	8006c00 <_dtoa_r+0x280>
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	bfc4      	itt	gt
 8006b3a:	3b04      	subgt	r3, #4
 8006b3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b40:	f1a3 0302 	sub.w	r3, r3, #2
 8006b44:	bfcc      	ite	gt
 8006b46:	2400      	movgt	r4, #0
 8006b48:	2401      	movle	r4, #1
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d863      	bhi.n	8006c16 <_dtoa_r+0x296>
 8006b4e:	e8df f003 	tbb	[pc, r3]
 8006b52:	372a      	.short	0x372a
 8006b54:	5535      	.short	0x5535
 8006b56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b5a:	441e      	add	r6, r3
 8006b5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	bfc1      	itttt	gt
 8006b64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b68:	409f      	lslgt	r7, r3
 8006b6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b72:	bfd6      	itet	le
 8006b74:	f1c3 0320 	rsble	r3, r3, #32
 8006b78:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b7c:	fa04 f003 	lslle.w	r0, r4, r3
 8006b80:	f7f9 fcd8 	bl	8000534 <__aeabi_ui2d>
 8006b84:	2201      	movs	r2, #1
 8006b86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b8a:	3e01      	subs	r6, #1
 8006b8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b8e:	e777      	b.n	8006a80 <_dtoa_r+0x100>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e7b8      	b.n	8006b06 <_dtoa_r+0x186>
 8006b94:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b96:	e7b7      	b.n	8006b08 <_dtoa_r+0x188>
 8006b98:	427b      	negs	r3, r7
 8006b9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	eba8 0807 	sub.w	r8, r8, r7
 8006ba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ba4:	e7c4      	b.n	8006b30 <_dtoa_r+0x1b0>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dc35      	bgt.n	8006c1c <_dtoa_r+0x29c>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	9307      	str	r3, [sp, #28]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bba:	e00b      	b.n	8006bd4 <_dtoa_r+0x254>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e7f3      	b.n	8006ba8 <_dtoa_r+0x228>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc6:	18fb      	adds	r3, r7, r3
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	bfb8      	it	lt
 8006bd2:	2301      	movlt	r3, #1
 8006bd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2204      	movs	r2, #4
 8006bdc:	f102 0514 	add.w	r5, r2, #20
 8006be0:	429d      	cmp	r5, r3
 8006be2:	d91f      	bls.n	8006c24 <_dtoa_r+0x2a4>
 8006be4:	6041      	str	r1, [r0, #4]
 8006be6:	4658      	mov	r0, fp
 8006be8:	f000 fdf0 	bl	80077cc <_Balloc>
 8006bec:	4682      	mov	sl, r0
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d13c      	bne.n	8006c6c <_dtoa_r+0x2ec>
 8006bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <_dtoa_r+0x2e0>)
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bfa:	e6d8      	b.n	80069ae <_dtoa_r+0x2e>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e7e0      	b.n	8006bc2 <_dtoa_r+0x242>
 8006c00:	2401      	movs	r4, #1
 8006c02:	2300      	movs	r3, #0
 8006c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	9307      	str	r3, [sp, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	2312      	movs	r3, #18
 8006c14:	e7d0      	b.n	8006bb8 <_dtoa_r+0x238>
 8006c16:	2301      	movs	r3, #1
 8006c18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c1a:	e7f5      	b.n	8006c08 <_dtoa_r+0x288>
 8006c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	9307      	str	r3, [sp, #28]
 8006c22:	e7d7      	b.n	8006bd4 <_dtoa_r+0x254>
 8006c24:	3101      	adds	r1, #1
 8006c26:	0052      	lsls	r2, r2, #1
 8006c28:	e7d8      	b.n	8006bdc <_dtoa_r+0x25c>
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w
 8006c30:	636f4361 	.word	0x636f4361
 8006c34:	3fd287a7 	.word	0x3fd287a7
 8006c38:	8b60c8b3 	.word	0x8b60c8b3
 8006c3c:	3fc68a28 	.word	0x3fc68a28
 8006c40:	509f79fb 	.word	0x509f79fb
 8006c44:	3fd34413 	.word	0x3fd34413
 8006c48:	080087a1 	.word	0x080087a1
 8006c4c:	080087b8 	.word	0x080087b8
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	08008771 	.word	0x08008771
 8006c58:	3ff80000 	.word	0x3ff80000
 8006c5c:	080088b0 	.word	0x080088b0
 8006c60:	08008810 	.word	0x08008810
 8006c64:	0800879d 	.word	0x0800879d
 8006c68:	08008770 	.word	0x08008770
 8006c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c70:	6018      	str	r0, [r3, #0]
 8006c72:	9b07      	ldr	r3, [sp, #28]
 8006c74:	2b0e      	cmp	r3, #14
 8006c76:	f200 80a4 	bhi.w	8006dc2 <_dtoa_r+0x442>
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	f000 80a1 	beq.w	8006dc2 <_dtoa_r+0x442>
 8006c80:	2f00      	cmp	r7, #0
 8006c82:	dd33      	ble.n	8006cec <_dtoa_r+0x36c>
 8006c84:	4bad      	ldr	r3, [pc, #692]	@ (8006f3c <_dtoa_r+0x5bc>)
 8006c86:	f007 020f 	and.w	r2, r7, #15
 8006c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c8e:	ed93 7b00 	vldr	d7, [r3]
 8006c92:	05f8      	lsls	r0, r7, #23
 8006c94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c9c:	d516      	bpl.n	8006ccc <_dtoa_r+0x34c>
 8006c9e:	4ba8      	ldr	r3, [pc, #672]	@ (8006f40 <_dtoa_r+0x5c0>)
 8006ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ca8:	f7f9 fde8 	bl	800087c <__aeabi_ddiv>
 8006cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb0:	f004 040f 	and.w	r4, r4, #15
 8006cb4:	2603      	movs	r6, #3
 8006cb6:	4da2      	ldr	r5, [pc, #648]	@ (8006f40 <_dtoa_r+0x5c0>)
 8006cb8:	b954      	cbnz	r4, 8006cd0 <_dtoa_r+0x350>
 8006cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc2:	f7f9 fddb 	bl	800087c <__aeabi_ddiv>
 8006cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cca:	e028      	b.n	8006d1e <_dtoa_r+0x39e>
 8006ccc:	2602      	movs	r6, #2
 8006cce:	e7f2      	b.n	8006cb6 <_dtoa_r+0x336>
 8006cd0:	07e1      	lsls	r1, r4, #31
 8006cd2:	d508      	bpl.n	8006ce6 <_dtoa_r+0x366>
 8006cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cdc:	f7f9 fca4 	bl	8000628 <__aeabi_dmul>
 8006ce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	1064      	asrs	r4, r4, #1
 8006ce8:	3508      	adds	r5, #8
 8006cea:	e7e5      	b.n	8006cb8 <_dtoa_r+0x338>
 8006cec:	f000 80d2 	beq.w	8006e94 <_dtoa_r+0x514>
 8006cf0:	427c      	negs	r4, r7
 8006cf2:	4b92      	ldr	r3, [pc, #584]	@ (8006f3c <_dtoa_r+0x5bc>)
 8006cf4:	4d92      	ldr	r5, [pc, #584]	@ (8006f40 <_dtoa_r+0x5c0>)
 8006cf6:	f004 020f 	and.w	r2, r4, #15
 8006cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d06:	f7f9 fc8f 	bl	8000628 <__aeabi_dmul>
 8006d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d0e:	1124      	asrs	r4, r4, #4
 8006d10:	2300      	movs	r3, #0
 8006d12:	2602      	movs	r6, #2
 8006d14:	2c00      	cmp	r4, #0
 8006d16:	f040 80b2 	bne.w	8006e7e <_dtoa_r+0x4fe>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1d3      	bne.n	8006cc6 <_dtoa_r+0x346>
 8006d1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80b7 	beq.w	8006e98 <_dtoa_r+0x518>
 8006d2a:	4b86      	ldr	r3, [pc, #536]	@ (8006f44 <_dtoa_r+0x5c4>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 feeb 	bl	8000b0c <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f000 80ae 	beq.w	8006e98 <_dtoa_r+0x518>
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 80aa 	beq.w	8006e98 <_dtoa_r+0x518>
 8006d44:	9b00      	ldr	r3, [sp, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dd37      	ble.n	8006dba <_dtoa_r+0x43a>
 8006d4a:	1e7b      	subs	r3, r7, #1
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4b7d      	ldr	r3, [pc, #500]	@ (8006f48 <_dtoa_r+0x5c8>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	4629      	mov	r1, r5
 8006d56:	f7f9 fc67 	bl	8000628 <__aeabi_dmul>
 8006d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5e:	9c00      	ldr	r4, [sp, #0]
 8006d60:	3601      	adds	r6, #1
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7f9 fbf6 	bl	8000554 <__aeabi_i2d>
 8006d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d6c:	f7f9 fc5c 	bl	8000628 <__aeabi_dmul>
 8006d70:	4b76      	ldr	r3, [pc, #472]	@ (8006f4c <_dtoa_r+0x5cc>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	f7f9 faa2 	bl	80002bc <__adddf3>
 8006d78:	4605      	mov	r5, r0
 8006d7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	f040 808d 	bne.w	8006e9e <_dtoa_r+0x51e>
 8006d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d88:	4b71      	ldr	r3, [pc, #452]	@ (8006f50 <_dtoa_r+0x5d0>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f7f9 fa94 	bl	80002b8 <__aeabi_dsub>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d98:	462a      	mov	r2, r5
 8006d9a:	4633      	mov	r3, r6
 8006d9c:	f7f9 fed4 	bl	8000b48 <__aeabi_dcmpgt>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f040 828b 	bne.w	80072bc <_dtoa_r+0x93c>
 8006da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006daa:	462a      	mov	r2, r5
 8006dac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006db0:	f7f9 feac 	bl	8000b0c <__aeabi_dcmplt>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	f040 8128 	bne.w	800700a <_dtoa_r+0x68a>
 8006dba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006dbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006dc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f2c0 815a 	blt.w	800707e <_dtoa_r+0x6fe>
 8006dca:	2f0e      	cmp	r7, #14
 8006dcc:	f300 8157 	bgt.w	800707e <_dtoa_r+0x6fe>
 8006dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8006f3c <_dtoa_r+0x5bc>)
 8006dd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dd6:	ed93 7b00 	vldr	d7, [r3]
 8006dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	ed8d 7b00 	vstr	d7, [sp]
 8006de2:	da03      	bge.n	8006dec <_dtoa_r+0x46c>
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f340 8101 	ble.w	8006fee <_dtoa_r+0x66e>
 8006dec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006df0:	4656      	mov	r6, sl
 8006df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fd3f 	bl	800087c <__aeabi_ddiv>
 8006dfe:	f7f9 fec3 	bl	8000b88 <__aeabi_d2iz>
 8006e02:	4680      	mov	r8, r0
 8006e04:	f7f9 fba6 	bl	8000554 <__aeabi_i2d>
 8006e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e0c:	f7f9 fc0c 	bl	8000628 <__aeabi_dmul>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e1c:	f7f9 fa4c 	bl	80002b8 <__aeabi_dsub>
 8006e20:	f806 4b01 	strb.w	r4, [r6], #1
 8006e24:	9d07      	ldr	r5, [sp, #28]
 8006e26:	eba6 040a 	sub.w	r4, r6, sl
 8006e2a:	42a5      	cmp	r5, r4
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	f040 8117 	bne.w	8007062 <_dtoa_r+0x6e2>
 8006e34:	f7f9 fa42 	bl	80002bc <__adddf3>
 8006e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	460d      	mov	r5, r1
 8006e40:	f7f9 fe82 	bl	8000b48 <__aeabi_dcmpgt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f040 80f9 	bne.w	800703c <_dtoa_r+0x6bc>
 8006e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7f9 fe51 	bl	8000af8 <__aeabi_dcmpeq>
 8006e56:	b118      	cbz	r0, 8006e60 <_dtoa_r+0x4e0>
 8006e58:	f018 0f01 	tst.w	r8, #1
 8006e5c:	f040 80ee 	bne.w	800703c <_dtoa_r+0x6bc>
 8006e60:	4649      	mov	r1, r9
 8006e62:	4658      	mov	r0, fp
 8006e64:	f000 fcf2 	bl	800784c <_Bfree>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	7033      	strb	r3, [r6, #0]
 8006e6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e6e:	3701      	adds	r7, #1
 8006e70:	601f      	str	r7, [r3, #0]
 8006e72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 831d 	beq.w	80074b4 <_dtoa_r+0xb34>
 8006e7a:	601e      	str	r6, [r3, #0]
 8006e7c:	e31a      	b.n	80074b4 <_dtoa_r+0xb34>
 8006e7e:	07e2      	lsls	r2, r4, #31
 8006e80:	d505      	bpl.n	8006e8e <_dtoa_r+0x50e>
 8006e82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e86:	f7f9 fbcf 	bl	8000628 <__aeabi_dmul>
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	1064      	asrs	r4, r4, #1
 8006e90:	3508      	adds	r5, #8
 8006e92:	e73f      	b.n	8006d14 <_dtoa_r+0x394>
 8006e94:	2602      	movs	r6, #2
 8006e96:	e742      	b.n	8006d1e <_dtoa_r+0x39e>
 8006e98:	9c07      	ldr	r4, [sp, #28]
 8006e9a:	9704      	str	r7, [sp, #16]
 8006e9c:	e761      	b.n	8006d62 <_dtoa_r+0x3e2>
 8006e9e:	4b27      	ldr	r3, [pc, #156]	@ (8006f3c <_dtoa_r+0x5bc>)
 8006ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ea6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eaa:	4454      	add	r4, sl
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d053      	beq.n	8006f58 <_dtoa_r+0x5d8>
 8006eb0:	4928      	ldr	r1, [pc, #160]	@ (8006f54 <_dtoa_r+0x5d4>)
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f7f9 fce2 	bl	800087c <__aeabi_ddiv>
 8006eb8:	4633      	mov	r3, r6
 8006eba:	462a      	mov	r2, r5
 8006ebc:	f7f9 f9fc 	bl	80002b8 <__aeabi_dsub>
 8006ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ec4:	4656      	mov	r6, sl
 8006ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eca:	f7f9 fe5d 	bl	8000b88 <__aeabi_d2iz>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	f7f9 fb40 	bl	8000554 <__aeabi_i2d>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006edc:	f7f9 f9ec 	bl	80002b8 <__aeabi_dsub>
 8006ee0:	3530      	adds	r5, #48	@ 0x30
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eea:	f806 5b01 	strb.w	r5, [r6], #1
 8006eee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ef2:	f7f9 fe0b 	bl	8000b0c <__aeabi_dcmplt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d171      	bne.n	8006fde <_dtoa_r+0x65e>
 8006efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006efe:	4911      	ldr	r1, [pc, #68]	@ (8006f44 <_dtoa_r+0x5c4>)
 8006f00:	2000      	movs	r0, #0
 8006f02:	f7f9 f9d9 	bl	80002b8 <__aeabi_dsub>
 8006f06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f0a:	f7f9 fdff 	bl	8000b0c <__aeabi_dcmplt>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f040 8095 	bne.w	800703e <_dtoa_r+0x6be>
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	f43f af50 	beq.w	8006dba <_dtoa_r+0x43a>
 8006f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <_dtoa_r+0x5c8>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	f7f9 fb81 	bl	8000628 <__aeabi_dmul>
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <_dtoa_r+0x5c8>)
 8006f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f32:	f7f9 fb79 	bl	8000628 <__aeabi_dmul>
 8006f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3a:	e7c4      	b.n	8006ec6 <_dtoa_r+0x546>
 8006f3c:	080088b0 	.word	0x080088b0
 8006f40:	08008888 	.word	0x08008888
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	401c0000 	.word	0x401c0000
 8006f50:	40140000 	.word	0x40140000
 8006f54:	3fe00000 	.word	0x3fe00000
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7f9 fb64 	bl	8000628 <__aeabi_dmul>
 8006f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f64:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f66:	4656      	mov	r6, sl
 8006f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f6c:	f7f9 fe0c 	bl	8000b88 <__aeabi_d2iz>
 8006f70:	4605      	mov	r5, r0
 8006f72:	f7f9 faef 	bl	8000554 <__aeabi_i2d>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f7e:	f7f9 f99b 	bl	80002b8 <__aeabi_dsub>
 8006f82:	3530      	adds	r5, #48	@ 0x30
 8006f84:	f806 5b01 	strb.w	r5, [r6], #1
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	42a6      	cmp	r6, r4
 8006f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	d124      	bne.n	8006fe2 <_dtoa_r+0x662>
 8006f98:	4bac      	ldr	r3, [pc, #688]	@ (800724c <_dtoa_r+0x8cc>)
 8006f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f9e:	f7f9 f98d 	bl	80002bc <__adddf3>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	f7f9 fdcd 	bl	8000b48 <__aeabi_dcmpgt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d145      	bne.n	800703e <_dtoa_r+0x6be>
 8006fb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fb6:	49a5      	ldr	r1, [pc, #660]	@ (800724c <_dtoa_r+0x8cc>)
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f7f9 f97d 	bl	80002b8 <__aeabi_dsub>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc6:	f7f9 fda1 	bl	8000b0c <__aeabi_dcmplt>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f43f aef5 	beq.w	8006dba <_dtoa_r+0x43a>
 8006fd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006fd2:	1e73      	subs	r3, r6, #1
 8006fd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006fd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fda:	2b30      	cmp	r3, #48	@ 0x30
 8006fdc:	d0f8      	beq.n	8006fd0 <_dtoa_r+0x650>
 8006fde:	9f04      	ldr	r7, [sp, #16]
 8006fe0:	e73e      	b.n	8006e60 <_dtoa_r+0x4e0>
 8006fe2:	4b9b      	ldr	r3, [pc, #620]	@ (8007250 <_dtoa_r+0x8d0>)
 8006fe4:	f7f9 fb20 	bl	8000628 <__aeabi_dmul>
 8006fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fec:	e7bc      	b.n	8006f68 <_dtoa_r+0x5e8>
 8006fee:	d10c      	bne.n	800700a <_dtoa_r+0x68a>
 8006ff0:	4b98      	ldr	r3, [pc, #608]	@ (8007254 <_dtoa_r+0x8d4>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ff8:	f7f9 fb16 	bl	8000628 <__aeabi_dmul>
 8006ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007000:	f7f9 fd98 	bl	8000b34 <__aeabi_dcmpge>
 8007004:	2800      	cmp	r0, #0
 8007006:	f000 8157 	beq.w	80072b8 <_dtoa_r+0x938>
 800700a:	2400      	movs	r4, #0
 800700c:	4625      	mov	r5, r4
 800700e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007010:	43db      	mvns	r3, r3
 8007012:	9304      	str	r3, [sp, #16]
 8007014:	4656      	mov	r6, sl
 8007016:	2700      	movs	r7, #0
 8007018:	4621      	mov	r1, r4
 800701a:	4658      	mov	r0, fp
 800701c:	f000 fc16 	bl	800784c <_Bfree>
 8007020:	2d00      	cmp	r5, #0
 8007022:	d0dc      	beq.n	8006fde <_dtoa_r+0x65e>
 8007024:	b12f      	cbz	r7, 8007032 <_dtoa_r+0x6b2>
 8007026:	42af      	cmp	r7, r5
 8007028:	d003      	beq.n	8007032 <_dtoa_r+0x6b2>
 800702a:	4639      	mov	r1, r7
 800702c:	4658      	mov	r0, fp
 800702e:	f000 fc0d 	bl	800784c <_Bfree>
 8007032:	4629      	mov	r1, r5
 8007034:	4658      	mov	r0, fp
 8007036:	f000 fc09 	bl	800784c <_Bfree>
 800703a:	e7d0      	b.n	8006fde <_dtoa_r+0x65e>
 800703c:	9704      	str	r7, [sp, #16]
 800703e:	4633      	mov	r3, r6
 8007040:	461e      	mov	r6, r3
 8007042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007046:	2a39      	cmp	r2, #57	@ 0x39
 8007048:	d107      	bne.n	800705a <_dtoa_r+0x6da>
 800704a:	459a      	cmp	sl, r3
 800704c:	d1f8      	bne.n	8007040 <_dtoa_r+0x6c0>
 800704e:	9a04      	ldr	r2, [sp, #16]
 8007050:	3201      	adds	r2, #1
 8007052:	9204      	str	r2, [sp, #16]
 8007054:	2230      	movs	r2, #48	@ 0x30
 8007056:	f88a 2000 	strb.w	r2, [sl]
 800705a:	781a      	ldrb	r2, [r3, #0]
 800705c:	3201      	adds	r2, #1
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	e7bd      	b.n	8006fde <_dtoa_r+0x65e>
 8007062:	4b7b      	ldr	r3, [pc, #492]	@ (8007250 <_dtoa_r+0x8d0>)
 8007064:	2200      	movs	r2, #0
 8007066:	f7f9 fadf 	bl	8000628 <__aeabi_dmul>
 800706a:	2200      	movs	r2, #0
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	460d      	mov	r5, r1
 8007072:	f7f9 fd41 	bl	8000af8 <__aeabi_dcmpeq>
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f aebb 	beq.w	8006df2 <_dtoa_r+0x472>
 800707c:	e6f0      	b.n	8006e60 <_dtoa_r+0x4e0>
 800707e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007080:	2a00      	cmp	r2, #0
 8007082:	f000 80db 	beq.w	800723c <_dtoa_r+0x8bc>
 8007086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007088:	2a01      	cmp	r2, #1
 800708a:	f300 80bf 	bgt.w	800720c <_dtoa_r+0x88c>
 800708e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007090:	2a00      	cmp	r2, #0
 8007092:	f000 80b7 	beq.w	8007204 <_dtoa_r+0x884>
 8007096:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800709a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800709c:	4646      	mov	r6, r8
 800709e:	9a08      	ldr	r2, [sp, #32]
 80070a0:	2101      	movs	r1, #1
 80070a2:	441a      	add	r2, r3
 80070a4:	4658      	mov	r0, fp
 80070a6:	4498      	add	r8, r3
 80070a8:	9208      	str	r2, [sp, #32]
 80070aa:	f000 fc83 	bl	80079b4 <__i2b>
 80070ae:	4605      	mov	r5, r0
 80070b0:	b15e      	cbz	r6, 80070ca <_dtoa_r+0x74a>
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dd08      	ble.n	80070ca <_dtoa_r+0x74a>
 80070b8:	42b3      	cmp	r3, r6
 80070ba:	9a08      	ldr	r2, [sp, #32]
 80070bc:	bfa8      	it	ge
 80070be:	4633      	movge	r3, r6
 80070c0:	eba8 0803 	sub.w	r8, r8, r3
 80070c4:	1af6      	subs	r6, r6, r3
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070cc:	b1f3      	cbz	r3, 800710c <_dtoa_r+0x78c>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80b7 	beq.w	8007244 <_dtoa_r+0x8c4>
 80070d6:	b18c      	cbz	r4, 80070fc <_dtoa_r+0x77c>
 80070d8:	4629      	mov	r1, r5
 80070da:	4622      	mov	r2, r4
 80070dc:	4658      	mov	r0, fp
 80070de:	f000 fd29 	bl	8007b34 <__pow5mult>
 80070e2:	464a      	mov	r2, r9
 80070e4:	4601      	mov	r1, r0
 80070e6:	4605      	mov	r5, r0
 80070e8:	4658      	mov	r0, fp
 80070ea:	f000 fc79 	bl	80079e0 <__multiply>
 80070ee:	4649      	mov	r1, r9
 80070f0:	9004      	str	r0, [sp, #16]
 80070f2:	4658      	mov	r0, fp
 80070f4:	f000 fbaa 	bl	800784c <_Bfree>
 80070f8:	9b04      	ldr	r3, [sp, #16]
 80070fa:	4699      	mov	r9, r3
 80070fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fe:	1b1a      	subs	r2, r3, r4
 8007100:	d004      	beq.n	800710c <_dtoa_r+0x78c>
 8007102:	4649      	mov	r1, r9
 8007104:	4658      	mov	r0, fp
 8007106:	f000 fd15 	bl	8007b34 <__pow5mult>
 800710a:	4681      	mov	r9, r0
 800710c:	2101      	movs	r1, #1
 800710e:	4658      	mov	r0, fp
 8007110:	f000 fc50 	bl	80079b4 <__i2b>
 8007114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007116:	4604      	mov	r4, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 81cf 	beq.w	80074bc <_dtoa_r+0xb3c>
 800711e:	461a      	mov	r2, r3
 8007120:	4601      	mov	r1, r0
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fd06 	bl	8007b34 <__pow5mult>
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	2b01      	cmp	r3, #1
 800712c:	4604      	mov	r4, r0
 800712e:	f300 8095 	bgt.w	800725c <_dtoa_r+0x8dc>
 8007132:	9b02      	ldr	r3, [sp, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 8087 	bne.w	8007248 <_dtoa_r+0x8c8>
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8089 	bne.w	8007258 <_dtoa_r+0x8d8>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	b12b      	cbz	r3, 800715e <_dtoa_r+0x7de>
 8007152:	9b08      	ldr	r3, [sp, #32]
 8007154:	3301      	adds	r3, #1
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	f108 0801 	add.w	r8, r8, #1
 800715c:	2301      	movs	r3, #1
 800715e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 81b0 	beq.w	80074c8 <_dtoa_r+0xb48>
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800716e:	6918      	ldr	r0, [r3, #16]
 8007170:	f000 fbd4 	bl	800791c <__hi0bits>
 8007174:	f1c0 0020 	rsb	r0, r0, #32
 8007178:	9b08      	ldr	r3, [sp, #32]
 800717a:	4418      	add	r0, r3
 800717c:	f010 001f 	ands.w	r0, r0, #31
 8007180:	d077      	beq.n	8007272 <_dtoa_r+0x8f2>
 8007182:	f1c0 0320 	rsb	r3, r0, #32
 8007186:	2b04      	cmp	r3, #4
 8007188:	dd6b      	ble.n	8007262 <_dtoa_r+0x8e2>
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	f1c0 001c 	rsb	r0, r0, #28
 8007190:	4403      	add	r3, r0
 8007192:	4480      	add	r8, r0
 8007194:	4406      	add	r6, r0
 8007196:	9308      	str	r3, [sp, #32]
 8007198:	f1b8 0f00 	cmp.w	r8, #0
 800719c:	dd05      	ble.n	80071aa <_dtoa_r+0x82a>
 800719e:	4649      	mov	r1, r9
 80071a0:	4642      	mov	r2, r8
 80071a2:	4658      	mov	r0, fp
 80071a4:	f000 fd20 	bl	8007be8 <__lshift>
 80071a8:	4681      	mov	r9, r0
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dd05      	ble.n	80071bc <_dtoa_r+0x83c>
 80071b0:	4621      	mov	r1, r4
 80071b2:	461a      	mov	r2, r3
 80071b4:	4658      	mov	r0, fp
 80071b6:	f000 fd17 	bl	8007be8 <__lshift>
 80071ba:	4604      	mov	r4, r0
 80071bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d059      	beq.n	8007276 <_dtoa_r+0x8f6>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4648      	mov	r0, r9
 80071c6:	f000 fd7b 	bl	8007cc0 <__mcmp>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	da53      	bge.n	8007276 <_dtoa_r+0x8f6>
 80071ce:	1e7b      	subs	r3, r7, #1
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	4649      	mov	r1, r9
 80071d4:	2300      	movs	r3, #0
 80071d6:	220a      	movs	r2, #10
 80071d8:	4658      	mov	r0, fp
 80071da:	f000 fb59 	bl	8007890 <__multadd>
 80071de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e0:	4681      	mov	r9, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8172 	beq.w	80074cc <_dtoa_r+0xb4c>
 80071e8:	2300      	movs	r3, #0
 80071ea:	4629      	mov	r1, r5
 80071ec:	220a      	movs	r2, #10
 80071ee:	4658      	mov	r0, fp
 80071f0:	f000 fb4e 	bl	8007890 <__multadd>
 80071f4:	9b00      	ldr	r3, [sp, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	4605      	mov	r5, r0
 80071fa:	dc67      	bgt.n	80072cc <_dtoa_r+0x94c>
 80071fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fe:	2b02      	cmp	r3, #2
 8007200:	dc41      	bgt.n	8007286 <_dtoa_r+0x906>
 8007202:	e063      	b.n	80072cc <_dtoa_r+0x94c>
 8007204:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007206:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800720a:	e746      	b.n	800709a <_dtoa_r+0x71a>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	1e5c      	subs	r4, r3, #1
 8007210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007212:	42a3      	cmp	r3, r4
 8007214:	bfbf      	itttt	lt
 8007216:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007218:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800721a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800721c:	1ae3      	sublt	r3, r4, r3
 800721e:	bfb4      	ite	lt
 8007220:	18d2      	addlt	r2, r2, r3
 8007222:	1b1c      	subge	r4, r3, r4
 8007224:	9b07      	ldr	r3, [sp, #28]
 8007226:	bfbc      	itt	lt
 8007228:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800722a:	2400      	movlt	r4, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfb5      	itete	lt
 8007230:	eba8 0603 	sublt.w	r6, r8, r3
 8007234:	9b07      	ldrge	r3, [sp, #28]
 8007236:	2300      	movlt	r3, #0
 8007238:	4646      	movge	r6, r8
 800723a:	e730      	b.n	800709e <_dtoa_r+0x71e>
 800723c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800723e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007240:	4646      	mov	r6, r8
 8007242:	e735      	b.n	80070b0 <_dtoa_r+0x730>
 8007244:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007246:	e75c      	b.n	8007102 <_dtoa_r+0x782>
 8007248:	2300      	movs	r3, #0
 800724a:	e788      	b.n	800715e <_dtoa_r+0x7de>
 800724c:	3fe00000 	.word	0x3fe00000
 8007250:	40240000 	.word	0x40240000
 8007254:	40140000 	.word	0x40140000
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	e780      	b.n	800715e <_dtoa_r+0x7de>
 800725c:	2300      	movs	r3, #0
 800725e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007260:	e782      	b.n	8007168 <_dtoa_r+0x7e8>
 8007262:	d099      	beq.n	8007198 <_dtoa_r+0x818>
 8007264:	9a08      	ldr	r2, [sp, #32]
 8007266:	331c      	adds	r3, #28
 8007268:	441a      	add	r2, r3
 800726a:	4498      	add	r8, r3
 800726c:	441e      	add	r6, r3
 800726e:	9208      	str	r2, [sp, #32]
 8007270:	e792      	b.n	8007198 <_dtoa_r+0x818>
 8007272:	4603      	mov	r3, r0
 8007274:	e7f6      	b.n	8007264 <_dtoa_r+0x8e4>
 8007276:	9b07      	ldr	r3, [sp, #28]
 8007278:	9704      	str	r7, [sp, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	dc20      	bgt.n	80072c0 <_dtoa_r+0x940>
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007282:	2b02      	cmp	r3, #2
 8007284:	dd1e      	ble.n	80072c4 <_dtoa_r+0x944>
 8007286:	9b00      	ldr	r3, [sp, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f47f aec0 	bne.w	800700e <_dtoa_r+0x68e>
 800728e:	4621      	mov	r1, r4
 8007290:	2205      	movs	r2, #5
 8007292:	4658      	mov	r0, fp
 8007294:	f000 fafc 	bl	8007890 <__multadd>
 8007298:	4601      	mov	r1, r0
 800729a:	4604      	mov	r4, r0
 800729c:	4648      	mov	r0, r9
 800729e:	f000 fd0f 	bl	8007cc0 <__mcmp>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f77f aeb3 	ble.w	800700e <_dtoa_r+0x68e>
 80072a8:	4656      	mov	r6, sl
 80072aa:	2331      	movs	r3, #49	@ 0x31
 80072ac:	f806 3b01 	strb.w	r3, [r6], #1
 80072b0:	9b04      	ldr	r3, [sp, #16]
 80072b2:	3301      	adds	r3, #1
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	e6ae      	b.n	8007016 <_dtoa_r+0x696>
 80072b8:	9c07      	ldr	r4, [sp, #28]
 80072ba:	9704      	str	r7, [sp, #16]
 80072bc:	4625      	mov	r5, r4
 80072be:	e7f3      	b.n	80072a8 <_dtoa_r+0x928>
 80072c0:	9b07      	ldr	r3, [sp, #28]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 8104 	beq.w	80074d4 <_dtoa_r+0xb54>
 80072cc:	2e00      	cmp	r6, #0
 80072ce:	dd05      	ble.n	80072dc <_dtoa_r+0x95c>
 80072d0:	4629      	mov	r1, r5
 80072d2:	4632      	mov	r2, r6
 80072d4:	4658      	mov	r0, fp
 80072d6:	f000 fc87 	bl	8007be8 <__lshift>
 80072da:	4605      	mov	r5, r0
 80072dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d05a      	beq.n	8007398 <_dtoa_r+0xa18>
 80072e2:	6869      	ldr	r1, [r5, #4]
 80072e4:	4658      	mov	r0, fp
 80072e6:	f000 fa71 	bl	80077cc <_Balloc>
 80072ea:	4606      	mov	r6, r0
 80072ec:	b928      	cbnz	r0, 80072fa <_dtoa_r+0x97a>
 80072ee:	4b84      	ldr	r3, [pc, #528]	@ (8007500 <_dtoa_r+0xb80>)
 80072f0:	4602      	mov	r2, r0
 80072f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072f6:	f7ff bb5a 	b.w	80069ae <_dtoa_r+0x2e>
 80072fa:	692a      	ldr	r2, [r5, #16]
 80072fc:	3202      	adds	r2, #2
 80072fe:	0092      	lsls	r2, r2, #2
 8007300:	f105 010c 	add.w	r1, r5, #12
 8007304:	300c      	adds	r0, #12
 8007306:	f000 ff95 	bl	8008234 <memcpy>
 800730a:	2201      	movs	r2, #1
 800730c:	4631      	mov	r1, r6
 800730e:	4658      	mov	r0, fp
 8007310:	f000 fc6a 	bl	8007be8 <__lshift>
 8007314:	f10a 0301 	add.w	r3, sl, #1
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	9b00      	ldr	r3, [sp, #0]
 800731c:	4453      	add	r3, sl
 800731e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007320:	9b02      	ldr	r3, [sp, #8]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	462f      	mov	r7, r5
 8007328:	930a      	str	r3, [sp, #40]	@ 0x28
 800732a:	4605      	mov	r5, r0
 800732c:	9b07      	ldr	r3, [sp, #28]
 800732e:	4621      	mov	r1, r4
 8007330:	3b01      	subs	r3, #1
 8007332:	4648      	mov	r0, r9
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f7ff fa98 	bl	800686a <quorem>
 800733a:	4639      	mov	r1, r7
 800733c:	9002      	str	r0, [sp, #8]
 800733e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007342:	4648      	mov	r0, r9
 8007344:	f000 fcbc 	bl	8007cc0 <__mcmp>
 8007348:	462a      	mov	r2, r5
 800734a:	9008      	str	r0, [sp, #32]
 800734c:	4621      	mov	r1, r4
 800734e:	4658      	mov	r0, fp
 8007350:	f000 fcd2 	bl	8007cf8 <__mdiff>
 8007354:	68c2      	ldr	r2, [r0, #12]
 8007356:	4606      	mov	r6, r0
 8007358:	bb02      	cbnz	r2, 800739c <_dtoa_r+0xa1c>
 800735a:	4601      	mov	r1, r0
 800735c:	4648      	mov	r0, r9
 800735e:	f000 fcaf 	bl	8007cc0 <__mcmp>
 8007362:	4602      	mov	r2, r0
 8007364:	4631      	mov	r1, r6
 8007366:	4658      	mov	r0, fp
 8007368:	920e      	str	r2, [sp, #56]	@ 0x38
 800736a:	f000 fa6f 	bl	800784c <_Bfree>
 800736e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007370:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007372:	9e07      	ldr	r6, [sp, #28]
 8007374:	ea43 0102 	orr.w	r1, r3, r2
 8007378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800737a:	4319      	orrs	r1, r3
 800737c:	d110      	bne.n	80073a0 <_dtoa_r+0xa20>
 800737e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007382:	d029      	beq.n	80073d8 <_dtoa_r+0xa58>
 8007384:	9b08      	ldr	r3, [sp, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	dd02      	ble.n	8007390 <_dtoa_r+0xa10>
 800738a:	9b02      	ldr	r3, [sp, #8]
 800738c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007390:	9b00      	ldr	r3, [sp, #0]
 8007392:	f883 8000 	strb.w	r8, [r3]
 8007396:	e63f      	b.n	8007018 <_dtoa_r+0x698>
 8007398:	4628      	mov	r0, r5
 800739a:	e7bb      	b.n	8007314 <_dtoa_r+0x994>
 800739c:	2201      	movs	r2, #1
 800739e:	e7e1      	b.n	8007364 <_dtoa_r+0x9e4>
 80073a0:	9b08      	ldr	r3, [sp, #32]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	db04      	blt.n	80073b0 <_dtoa_r+0xa30>
 80073a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073a8:	430b      	orrs	r3, r1
 80073aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073ac:	430b      	orrs	r3, r1
 80073ae:	d120      	bne.n	80073f2 <_dtoa_r+0xa72>
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	dded      	ble.n	8007390 <_dtoa_r+0xa10>
 80073b4:	4649      	mov	r1, r9
 80073b6:	2201      	movs	r2, #1
 80073b8:	4658      	mov	r0, fp
 80073ba:	f000 fc15 	bl	8007be8 <__lshift>
 80073be:	4621      	mov	r1, r4
 80073c0:	4681      	mov	r9, r0
 80073c2:	f000 fc7d 	bl	8007cc0 <__mcmp>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	dc03      	bgt.n	80073d2 <_dtoa_r+0xa52>
 80073ca:	d1e1      	bne.n	8007390 <_dtoa_r+0xa10>
 80073cc:	f018 0f01 	tst.w	r8, #1
 80073d0:	d0de      	beq.n	8007390 <_dtoa_r+0xa10>
 80073d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073d6:	d1d8      	bne.n	800738a <_dtoa_r+0xa0a>
 80073d8:	9a00      	ldr	r2, [sp, #0]
 80073da:	2339      	movs	r3, #57	@ 0x39
 80073dc:	7013      	strb	r3, [r2, #0]
 80073de:	4633      	mov	r3, r6
 80073e0:	461e      	mov	r6, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80073e8:	2a39      	cmp	r2, #57	@ 0x39
 80073ea:	d052      	beq.n	8007492 <_dtoa_r+0xb12>
 80073ec:	3201      	adds	r2, #1
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e612      	b.n	8007018 <_dtoa_r+0x698>
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	dd07      	ble.n	8007406 <_dtoa_r+0xa86>
 80073f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073fa:	d0ed      	beq.n	80073d8 <_dtoa_r+0xa58>
 80073fc:	9a00      	ldr	r2, [sp, #0]
 80073fe:	f108 0301 	add.w	r3, r8, #1
 8007402:	7013      	strb	r3, [r2, #0]
 8007404:	e608      	b.n	8007018 <_dtoa_r+0x698>
 8007406:	9b07      	ldr	r3, [sp, #28]
 8007408:	9a07      	ldr	r2, [sp, #28]
 800740a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800740e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007410:	4293      	cmp	r3, r2
 8007412:	d028      	beq.n	8007466 <_dtoa_r+0xae6>
 8007414:	4649      	mov	r1, r9
 8007416:	2300      	movs	r3, #0
 8007418:	220a      	movs	r2, #10
 800741a:	4658      	mov	r0, fp
 800741c:	f000 fa38 	bl	8007890 <__multadd>
 8007420:	42af      	cmp	r7, r5
 8007422:	4681      	mov	r9, r0
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	f04f 020a 	mov.w	r2, #10
 800742c:	4639      	mov	r1, r7
 800742e:	4658      	mov	r0, fp
 8007430:	d107      	bne.n	8007442 <_dtoa_r+0xac2>
 8007432:	f000 fa2d 	bl	8007890 <__multadd>
 8007436:	4607      	mov	r7, r0
 8007438:	4605      	mov	r5, r0
 800743a:	9b07      	ldr	r3, [sp, #28]
 800743c:	3301      	adds	r3, #1
 800743e:	9307      	str	r3, [sp, #28]
 8007440:	e774      	b.n	800732c <_dtoa_r+0x9ac>
 8007442:	f000 fa25 	bl	8007890 <__multadd>
 8007446:	4629      	mov	r1, r5
 8007448:	4607      	mov	r7, r0
 800744a:	2300      	movs	r3, #0
 800744c:	220a      	movs	r2, #10
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fa1e 	bl	8007890 <__multadd>
 8007454:	4605      	mov	r5, r0
 8007456:	e7f0      	b.n	800743a <_dtoa_r+0xaba>
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	bfcc      	ite	gt
 800745e:	461e      	movgt	r6, r3
 8007460:	2601      	movle	r6, #1
 8007462:	4456      	add	r6, sl
 8007464:	2700      	movs	r7, #0
 8007466:	4649      	mov	r1, r9
 8007468:	2201      	movs	r2, #1
 800746a:	4658      	mov	r0, fp
 800746c:	f000 fbbc 	bl	8007be8 <__lshift>
 8007470:	4621      	mov	r1, r4
 8007472:	4681      	mov	r9, r0
 8007474:	f000 fc24 	bl	8007cc0 <__mcmp>
 8007478:	2800      	cmp	r0, #0
 800747a:	dcb0      	bgt.n	80073de <_dtoa_r+0xa5e>
 800747c:	d102      	bne.n	8007484 <_dtoa_r+0xb04>
 800747e:	f018 0f01 	tst.w	r8, #1
 8007482:	d1ac      	bne.n	80073de <_dtoa_r+0xa5e>
 8007484:	4633      	mov	r3, r6
 8007486:	461e      	mov	r6, r3
 8007488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800748c:	2a30      	cmp	r2, #48	@ 0x30
 800748e:	d0fa      	beq.n	8007486 <_dtoa_r+0xb06>
 8007490:	e5c2      	b.n	8007018 <_dtoa_r+0x698>
 8007492:	459a      	cmp	sl, r3
 8007494:	d1a4      	bne.n	80073e0 <_dtoa_r+0xa60>
 8007496:	9b04      	ldr	r3, [sp, #16]
 8007498:	3301      	adds	r3, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	2331      	movs	r3, #49	@ 0x31
 800749e:	f88a 3000 	strb.w	r3, [sl]
 80074a2:	e5b9      	b.n	8007018 <_dtoa_r+0x698>
 80074a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007504 <_dtoa_r+0xb84>
 80074aa:	b11b      	cbz	r3, 80074b4 <_dtoa_r+0xb34>
 80074ac:	f10a 0308 	add.w	r3, sl, #8
 80074b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	4650      	mov	r0, sl
 80074b6:	b019      	add	sp, #100	@ 0x64
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074be:	2b01      	cmp	r3, #1
 80074c0:	f77f ae37 	ble.w	8007132 <_dtoa_r+0x7b2>
 80074c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c8:	2001      	movs	r0, #1
 80074ca:	e655      	b.n	8007178 <_dtoa_r+0x7f8>
 80074cc:	9b00      	ldr	r3, [sp, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f77f aed6 	ble.w	8007280 <_dtoa_r+0x900>
 80074d4:	4656      	mov	r6, sl
 80074d6:	4621      	mov	r1, r4
 80074d8:	4648      	mov	r0, r9
 80074da:	f7ff f9c6 	bl	800686a <quorem>
 80074de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074e2:	f806 8b01 	strb.w	r8, [r6], #1
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	eba6 020a 	sub.w	r2, r6, sl
 80074ec:	4293      	cmp	r3, r2
 80074ee:	ddb3      	ble.n	8007458 <_dtoa_r+0xad8>
 80074f0:	4649      	mov	r1, r9
 80074f2:	2300      	movs	r3, #0
 80074f4:	220a      	movs	r2, #10
 80074f6:	4658      	mov	r0, fp
 80074f8:	f000 f9ca 	bl	8007890 <__multadd>
 80074fc:	4681      	mov	r9, r0
 80074fe:	e7ea      	b.n	80074d6 <_dtoa_r+0xb56>
 8007500:	08008810 	.word	0x08008810
 8007504:	08008794 	.word	0x08008794

08007508 <malloc>:
 8007508:	4b02      	ldr	r3, [pc, #8]	@ (8007514 <malloc+0xc>)
 800750a:	4601      	mov	r1, r0
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	f000 b825 	b.w	800755c <_malloc_r>
 8007512:	bf00      	nop
 8007514:	20040018 	.word	0x20040018

08007518 <sbrk_aligned>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	4e0f      	ldr	r6, [pc, #60]	@ (8007558 <sbrk_aligned+0x40>)
 800751c:	460c      	mov	r4, r1
 800751e:	6831      	ldr	r1, [r6, #0]
 8007520:	4605      	mov	r5, r0
 8007522:	b911      	cbnz	r1, 800752a <sbrk_aligned+0x12>
 8007524:	f000 fe64 	bl	80081f0 <_sbrk_r>
 8007528:	6030      	str	r0, [r6, #0]
 800752a:	4621      	mov	r1, r4
 800752c:	4628      	mov	r0, r5
 800752e:	f000 fe5f 	bl	80081f0 <_sbrk_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d103      	bne.n	800753e <sbrk_aligned+0x26>
 8007536:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800753a:	4620      	mov	r0, r4
 800753c:	bd70      	pop	{r4, r5, r6, pc}
 800753e:	1cc4      	adds	r4, r0, #3
 8007540:	f024 0403 	bic.w	r4, r4, #3
 8007544:	42a0      	cmp	r0, r4
 8007546:	d0f8      	beq.n	800753a <sbrk_aligned+0x22>
 8007548:	1a21      	subs	r1, r4, r0
 800754a:	4628      	mov	r0, r5
 800754c:	f000 fe50 	bl	80081f0 <_sbrk_r>
 8007550:	3001      	adds	r0, #1
 8007552:	d1f2      	bne.n	800753a <sbrk_aligned+0x22>
 8007554:	e7ef      	b.n	8007536 <sbrk_aligned+0x1e>
 8007556:	bf00      	nop
 8007558:	20040434 	.word	0x20040434

0800755c <_malloc_r>:
 800755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007560:	1ccd      	adds	r5, r1, #3
 8007562:	f025 0503 	bic.w	r5, r5, #3
 8007566:	3508      	adds	r5, #8
 8007568:	2d0c      	cmp	r5, #12
 800756a:	bf38      	it	cc
 800756c:	250c      	movcc	r5, #12
 800756e:	2d00      	cmp	r5, #0
 8007570:	4606      	mov	r6, r0
 8007572:	db01      	blt.n	8007578 <_malloc_r+0x1c>
 8007574:	42a9      	cmp	r1, r5
 8007576:	d904      	bls.n	8007582 <_malloc_r+0x26>
 8007578:	230c      	movs	r3, #12
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	2000      	movs	r0, #0
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007658 <_malloc_r+0xfc>
 8007586:	f000 f915 	bl	80077b4 <__malloc_lock>
 800758a:	f8d8 3000 	ldr.w	r3, [r8]
 800758e:	461c      	mov	r4, r3
 8007590:	bb44      	cbnz	r4, 80075e4 <_malloc_r+0x88>
 8007592:	4629      	mov	r1, r5
 8007594:	4630      	mov	r0, r6
 8007596:	f7ff ffbf 	bl	8007518 <sbrk_aligned>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	4604      	mov	r4, r0
 800759e:	d158      	bne.n	8007652 <_malloc_r+0xf6>
 80075a0:	f8d8 4000 	ldr.w	r4, [r8]
 80075a4:	4627      	mov	r7, r4
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	d143      	bne.n	8007632 <_malloc_r+0xd6>
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	d04b      	beq.n	8007646 <_malloc_r+0xea>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	4639      	mov	r1, r7
 80075b2:	4630      	mov	r0, r6
 80075b4:	eb04 0903 	add.w	r9, r4, r3
 80075b8:	f000 fe1a 	bl	80081f0 <_sbrk_r>
 80075bc:	4581      	cmp	r9, r0
 80075be:	d142      	bne.n	8007646 <_malloc_r+0xea>
 80075c0:	6821      	ldr	r1, [r4, #0]
 80075c2:	1a6d      	subs	r5, r5, r1
 80075c4:	4629      	mov	r1, r5
 80075c6:	4630      	mov	r0, r6
 80075c8:	f7ff ffa6 	bl	8007518 <sbrk_aligned>
 80075cc:	3001      	adds	r0, #1
 80075ce:	d03a      	beq.n	8007646 <_malloc_r+0xea>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	442b      	add	r3, r5
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	f8d8 3000 	ldr.w	r3, [r8]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	bb62      	cbnz	r2, 8007638 <_malloc_r+0xdc>
 80075de:	f8c8 7000 	str.w	r7, [r8]
 80075e2:	e00f      	b.n	8007604 <_malloc_r+0xa8>
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	1b52      	subs	r2, r2, r5
 80075e8:	d420      	bmi.n	800762c <_malloc_r+0xd0>
 80075ea:	2a0b      	cmp	r2, #11
 80075ec:	d917      	bls.n	800761e <_malloc_r+0xc2>
 80075ee:	1961      	adds	r1, r4, r5
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	6025      	str	r5, [r4, #0]
 80075f4:	bf18      	it	ne
 80075f6:	6059      	strne	r1, [r3, #4]
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	bf08      	it	eq
 80075fc:	f8c8 1000 	streq.w	r1, [r8]
 8007600:	5162      	str	r2, [r4, r5]
 8007602:	604b      	str	r3, [r1, #4]
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f8db 	bl	80077c0 <__malloc_unlock>
 800760a:	f104 000b 	add.w	r0, r4, #11
 800760e:	1d23      	adds	r3, r4, #4
 8007610:	f020 0007 	bic.w	r0, r0, #7
 8007614:	1ac2      	subs	r2, r0, r3
 8007616:	bf1c      	itt	ne
 8007618:	1a1b      	subne	r3, r3, r0
 800761a:	50a3      	strne	r3, [r4, r2]
 800761c:	e7af      	b.n	800757e <_malloc_r+0x22>
 800761e:	6862      	ldr	r2, [r4, #4]
 8007620:	42a3      	cmp	r3, r4
 8007622:	bf0c      	ite	eq
 8007624:	f8c8 2000 	streq.w	r2, [r8]
 8007628:	605a      	strne	r2, [r3, #4]
 800762a:	e7eb      	b.n	8007604 <_malloc_r+0xa8>
 800762c:	4623      	mov	r3, r4
 800762e:	6864      	ldr	r4, [r4, #4]
 8007630:	e7ae      	b.n	8007590 <_malloc_r+0x34>
 8007632:	463c      	mov	r4, r7
 8007634:	687f      	ldr	r7, [r7, #4]
 8007636:	e7b6      	b.n	80075a6 <_malloc_r+0x4a>
 8007638:	461a      	mov	r2, r3
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	42a3      	cmp	r3, r4
 800763e:	d1fb      	bne.n	8007638 <_malloc_r+0xdc>
 8007640:	2300      	movs	r3, #0
 8007642:	6053      	str	r3, [r2, #4]
 8007644:	e7de      	b.n	8007604 <_malloc_r+0xa8>
 8007646:	230c      	movs	r3, #12
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f8b8 	bl	80077c0 <__malloc_unlock>
 8007650:	e794      	b.n	800757c <_malloc_r+0x20>
 8007652:	6005      	str	r5, [r0, #0]
 8007654:	e7d6      	b.n	8007604 <_malloc_r+0xa8>
 8007656:	bf00      	nop
 8007658:	20040438 	.word	0x20040438

0800765c <__sflush_r>:
 800765c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	0716      	lsls	r6, r2, #28
 8007666:	4605      	mov	r5, r0
 8007668:	460c      	mov	r4, r1
 800766a:	d454      	bmi.n	8007716 <__sflush_r+0xba>
 800766c:	684b      	ldr	r3, [r1, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	dc02      	bgt.n	8007678 <__sflush_r+0x1c>
 8007672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	dd48      	ble.n	800770a <__sflush_r+0xae>
 8007678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800767a:	2e00      	cmp	r6, #0
 800767c:	d045      	beq.n	800770a <__sflush_r+0xae>
 800767e:	2300      	movs	r3, #0
 8007680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007684:	682f      	ldr	r7, [r5, #0]
 8007686:	6a21      	ldr	r1, [r4, #32]
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	d030      	beq.n	80076ee <__sflush_r+0x92>
 800768c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	0759      	lsls	r1, r3, #29
 8007692:	d505      	bpl.n	80076a0 <__sflush_r+0x44>
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800769a:	b10b      	cbz	r3, 80076a0 <__sflush_r+0x44>
 800769c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	2300      	movs	r3, #0
 80076a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076a4:	6a21      	ldr	r1, [r4, #32]
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b0      	blx	r6
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	d106      	bne.n	80076be <__sflush_r+0x62>
 80076b0:	6829      	ldr	r1, [r5, #0]
 80076b2:	291d      	cmp	r1, #29
 80076b4:	d82b      	bhi.n	800770e <__sflush_r+0xb2>
 80076b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007760 <__sflush_r+0x104>)
 80076b8:	410a      	asrs	r2, r1
 80076ba:	07d6      	lsls	r6, r2, #31
 80076bc:	d427      	bmi.n	800770e <__sflush_r+0xb2>
 80076be:	2200      	movs	r2, #0
 80076c0:	6062      	str	r2, [r4, #4]
 80076c2:	04d9      	lsls	r1, r3, #19
 80076c4:	6922      	ldr	r2, [r4, #16]
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	d504      	bpl.n	80076d4 <__sflush_r+0x78>
 80076ca:	1c42      	adds	r2, r0, #1
 80076cc:	d101      	bne.n	80076d2 <__sflush_r+0x76>
 80076ce:	682b      	ldr	r3, [r5, #0]
 80076d0:	b903      	cbnz	r3, 80076d4 <__sflush_r+0x78>
 80076d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80076d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076d6:	602f      	str	r7, [r5, #0]
 80076d8:	b1b9      	cbz	r1, 800770a <__sflush_r+0xae>
 80076da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076de:	4299      	cmp	r1, r3
 80076e0:	d002      	beq.n	80076e8 <__sflush_r+0x8c>
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 fde6 	bl	80082b4 <_free_r>
 80076e8:	2300      	movs	r3, #0
 80076ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ec:	e00d      	b.n	800770a <__sflush_r+0xae>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b0      	blx	r6
 80076f4:	4602      	mov	r2, r0
 80076f6:	1c50      	adds	r0, r2, #1
 80076f8:	d1c9      	bne.n	800768e <__sflush_r+0x32>
 80076fa:	682b      	ldr	r3, [r5, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0c6      	beq.n	800768e <__sflush_r+0x32>
 8007700:	2b1d      	cmp	r3, #29
 8007702:	d001      	beq.n	8007708 <__sflush_r+0xac>
 8007704:	2b16      	cmp	r3, #22
 8007706:	d11e      	bne.n	8007746 <__sflush_r+0xea>
 8007708:	602f      	str	r7, [r5, #0]
 800770a:	2000      	movs	r0, #0
 800770c:	e022      	b.n	8007754 <__sflush_r+0xf8>
 800770e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007712:	b21b      	sxth	r3, r3
 8007714:	e01b      	b.n	800774e <__sflush_r+0xf2>
 8007716:	690f      	ldr	r7, [r1, #16]
 8007718:	2f00      	cmp	r7, #0
 800771a:	d0f6      	beq.n	800770a <__sflush_r+0xae>
 800771c:	0793      	lsls	r3, r2, #30
 800771e:	680e      	ldr	r6, [r1, #0]
 8007720:	bf08      	it	eq
 8007722:	694b      	ldreq	r3, [r1, #20]
 8007724:	600f      	str	r7, [r1, #0]
 8007726:	bf18      	it	ne
 8007728:	2300      	movne	r3, #0
 800772a:	eba6 0807 	sub.w	r8, r6, r7
 800772e:	608b      	str	r3, [r1, #8]
 8007730:	f1b8 0f00 	cmp.w	r8, #0
 8007734:	dde9      	ble.n	800770a <__sflush_r+0xae>
 8007736:	6a21      	ldr	r1, [r4, #32]
 8007738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800773a:	4643      	mov	r3, r8
 800773c:	463a      	mov	r2, r7
 800773e:	4628      	mov	r0, r5
 8007740:	47b0      	blx	r6
 8007742:	2800      	cmp	r0, #0
 8007744:	dc08      	bgt.n	8007758 <__sflush_r+0xfc>
 8007746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007758:	4407      	add	r7, r0
 800775a:	eba8 0800 	sub.w	r8, r8, r0
 800775e:	e7e7      	b.n	8007730 <__sflush_r+0xd4>
 8007760:	dfbffffe 	.word	0xdfbffffe

08007764 <_fflush_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	690b      	ldr	r3, [r1, #16]
 8007768:	4605      	mov	r5, r0
 800776a:	460c      	mov	r4, r1
 800776c:	b913      	cbnz	r3, 8007774 <_fflush_r+0x10>
 800776e:	2500      	movs	r5, #0
 8007770:	4628      	mov	r0, r5
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	b118      	cbz	r0, 800777e <_fflush_r+0x1a>
 8007776:	6a03      	ldr	r3, [r0, #32]
 8007778:	b90b      	cbnz	r3, 800777e <_fflush_r+0x1a>
 800777a:	f7fe ffa9 	bl	80066d0 <__sinit>
 800777e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f3      	beq.n	800776e <_fflush_r+0xa>
 8007786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007788:	07d0      	lsls	r0, r2, #31
 800778a:	d404      	bmi.n	8007796 <_fflush_r+0x32>
 800778c:	0599      	lsls	r1, r3, #22
 800778e:	d402      	bmi.n	8007796 <_fflush_r+0x32>
 8007790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007792:	f7ff f868 	bl	8006866 <__retarget_lock_acquire_recursive>
 8007796:	4628      	mov	r0, r5
 8007798:	4621      	mov	r1, r4
 800779a:	f7ff ff5f 	bl	800765c <__sflush_r>
 800779e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077a0:	07da      	lsls	r2, r3, #31
 80077a2:	4605      	mov	r5, r0
 80077a4:	d4e4      	bmi.n	8007770 <_fflush_r+0xc>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	059b      	lsls	r3, r3, #22
 80077aa:	d4e1      	bmi.n	8007770 <_fflush_r+0xc>
 80077ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ae:	f7ff f85b 	bl	8006868 <__retarget_lock_release_recursive>
 80077b2:	e7dd      	b.n	8007770 <_fflush_r+0xc>

080077b4 <__malloc_lock>:
 80077b4:	4801      	ldr	r0, [pc, #4]	@ (80077bc <__malloc_lock+0x8>)
 80077b6:	f7ff b856 	b.w	8006866 <__retarget_lock_acquire_recursive>
 80077ba:	bf00      	nop
 80077bc:	20040430 	.word	0x20040430

080077c0 <__malloc_unlock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	@ (80077c8 <__malloc_unlock+0x8>)
 80077c2:	f7ff b851 	b.w	8006868 <__retarget_lock_release_recursive>
 80077c6:	bf00      	nop
 80077c8:	20040430 	.word	0x20040430

080077cc <_Balloc>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	69c6      	ldr	r6, [r0, #28]
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	b976      	cbnz	r6, 80077f4 <_Balloc+0x28>
 80077d6:	2010      	movs	r0, #16
 80077d8:	f7ff fe96 	bl	8007508 <malloc>
 80077dc:	4602      	mov	r2, r0
 80077de:	61e0      	str	r0, [r4, #28]
 80077e0:	b920      	cbnz	r0, 80077ec <_Balloc+0x20>
 80077e2:	4b18      	ldr	r3, [pc, #96]	@ (8007844 <_Balloc+0x78>)
 80077e4:	4818      	ldr	r0, [pc, #96]	@ (8007848 <_Balloc+0x7c>)
 80077e6:	216b      	movs	r1, #107	@ 0x6b
 80077e8:	f000 fd32 	bl	8008250 <__assert_func>
 80077ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f0:	6006      	str	r6, [r0, #0]
 80077f2:	60c6      	str	r6, [r0, #12]
 80077f4:	69e6      	ldr	r6, [r4, #28]
 80077f6:	68f3      	ldr	r3, [r6, #12]
 80077f8:	b183      	cbz	r3, 800781c <_Balloc+0x50>
 80077fa:	69e3      	ldr	r3, [r4, #28]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007802:	b9b8      	cbnz	r0, 8007834 <_Balloc+0x68>
 8007804:	2101      	movs	r1, #1
 8007806:	fa01 f605 	lsl.w	r6, r1, r5
 800780a:	1d72      	adds	r2, r6, #5
 800780c:	0092      	lsls	r2, r2, #2
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fd3c 	bl	800828c <_calloc_r>
 8007814:	b160      	cbz	r0, 8007830 <_Balloc+0x64>
 8007816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800781a:	e00e      	b.n	800783a <_Balloc+0x6e>
 800781c:	2221      	movs	r2, #33	@ 0x21
 800781e:	2104      	movs	r1, #4
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fd33 	bl	800828c <_calloc_r>
 8007826:	69e3      	ldr	r3, [r4, #28]
 8007828:	60f0      	str	r0, [r6, #12]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e4      	bne.n	80077fa <_Balloc+0x2e>
 8007830:	2000      	movs	r0, #0
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	6802      	ldr	r2, [r0, #0]
 8007836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800783a:	2300      	movs	r3, #0
 800783c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007840:	e7f7      	b.n	8007832 <_Balloc+0x66>
 8007842:	bf00      	nop
 8007844:	080087a1 	.word	0x080087a1
 8007848:	08008821 	.word	0x08008821

0800784c <_Bfree>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	69c6      	ldr	r6, [r0, #28]
 8007850:	4605      	mov	r5, r0
 8007852:	460c      	mov	r4, r1
 8007854:	b976      	cbnz	r6, 8007874 <_Bfree+0x28>
 8007856:	2010      	movs	r0, #16
 8007858:	f7ff fe56 	bl	8007508 <malloc>
 800785c:	4602      	mov	r2, r0
 800785e:	61e8      	str	r0, [r5, #28]
 8007860:	b920      	cbnz	r0, 800786c <_Bfree+0x20>
 8007862:	4b09      	ldr	r3, [pc, #36]	@ (8007888 <_Bfree+0x3c>)
 8007864:	4809      	ldr	r0, [pc, #36]	@ (800788c <_Bfree+0x40>)
 8007866:	218f      	movs	r1, #143	@ 0x8f
 8007868:	f000 fcf2 	bl	8008250 <__assert_func>
 800786c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007870:	6006      	str	r6, [r0, #0]
 8007872:	60c6      	str	r6, [r0, #12]
 8007874:	b13c      	cbz	r4, 8007886 <_Bfree+0x3a>
 8007876:	69eb      	ldr	r3, [r5, #28]
 8007878:	6862      	ldr	r2, [r4, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007880:	6021      	str	r1, [r4, #0]
 8007882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	080087a1 	.word	0x080087a1
 800788c:	08008821 	.word	0x08008821

08007890 <__multadd>:
 8007890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	690d      	ldr	r5, [r1, #16]
 8007896:	4607      	mov	r7, r0
 8007898:	460c      	mov	r4, r1
 800789a:	461e      	mov	r6, r3
 800789c:	f101 0c14 	add.w	ip, r1, #20
 80078a0:	2000      	movs	r0, #0
 80078a2:	f8dc 3000 	ldr.w	r3, [ip]
 80078a6:	b299      	uxth	r1, r3
 80078a8:	fb02 6101 	mla	r1, r2, r1, r6
 80078ac:	0c1e      	lsrs	r6, r3, #16
 80078ae:	0c0b      	lsrs	r3, r1, #16
 80078b0:	fb02 3306 	mla	r3, r2, r6, r3
 80078b4:	b289      	uxth	r1, r1
 80078b6:	3001      	adds	r0, #1
 80078b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078bc:	4285      	cmp	r5, r0
 80078be:	f84c 1b04 	str.w	r1, [ip], #4
 80078c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078c6:	dcec      	bgt.n	80078a2 <__multadd+0x12>
 80078c8:	b30e      	cbz	r6, 800790e <__multadd+0x7e>
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	42ab      	cmp	r3, r5
 80078ce:	dc19      	bgt.n	8007904 <__multadd+0x74>
 80078d0:	6861      	ldr	r1, [r4, #4]
 80078d2:	4638      	mov	r0, r7
 80078d4:	3101      	adds	r1, #1
 80078d6:	f7ff ff79 	bl	80077cc <_Balloc>
 80078da:	4680      	mov	r8, r0
 80078dc:	b928      	cbnz	r0, 80078ea <__multadd+0x5a>
 80078de:	4602      	mov	r2, r0
 80078e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007914 <__multadd+0x84>)
 80078e2:	480d      	ldr	r0, [pc, #52]	@ (8007918 <__multadd+0x88>)
 80078e4:	21ba      	movs	r1, #186	@ 0xba
 80078e6:	f000 fcb3 	bl	8008250 <__assert_func>
 80078ea:	6922      	ldr	r2, [r4, #16]
 80078ec:	3202      	adds	r2, #2
 80078ee:	f104 010c 	add.w	r1, r4, #12
 80078f2:	0092      	lsls	r2, r2, #2
 80078f4:	300c      	adds	r0, #12
 80078f6:	f000 fc9d 	bl	8008234 <memcpy>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff ffa5 	bl	800784c <_Bfree>
 8007902:	4644      	mov	r4, r8
 8007904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007908:	3501      	adds	r5, #1
 800790a:	615e      	str	r6, [r3, #20]
 800790c:	6125      	str	r5, [r4, #16]
 800790e:	4620      	mov	r0, r4
 8007910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007914:	08008810 	.word	0x08008810
 8007918:	08008821 	.word	0x08008821

0800791c <__hi0bits>:
 800791c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007920:	4603      	mov	r3, r0
 8007922:	bf36      	itet	cc
 8007924:	0403      	lslcc	r3, r0, #16
 8007926:	2000      	movcs	r0, #0
 8007928:	2010      	movcc	r0, #16
 800792a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800792e:	bf3c      	itt	cc
 8007930:	021b      	lslcc	r3, r3, #8
 8007932:	3008      	addcc	r0, #8
 8007934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007938:	bf3c      	itt	cc
 800793a:	011b      	lslcc	r3, r3, #4
 800793c:	3004      	addcc	r0, #4
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007942:	bf3c      	itt	cc
 8007944:	009b      	lslcc	r3, r3, #2
 8007946:	3002      	addcc	r0, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	db05      	blt.n	8007958 <__hi0bits+0x3c>
 800794c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007950:	f100 0001 	add.w	r0, r0, #1
 8007954:	bf08      	it	eq
 8007956:	2020      	moveq	r0, #32
 8007958:	4770      	bx	lr

0800795a <__lo0bits>:
 800795a:	6803      	ldr	r3, [r0, #0]
 800795c:	4602      	mov	r2, r0
 800795e:	f013 0007 	ands.w	r0, r3, #7
 8007962:	d00b      	beq.n	800797c <__lo0bits+0x22>
 8007964:	07d9      	lsls	r1, r3, #31
 8007966:	d421      	bmi.n	80079ac <__lo0bits+0x52>
 8007968:	0798      	lsls	r0, r3, #30
 800796a:	bf49      	itett	mi
 800796c:	085b      	lsrmi	r3, r3, #1
 800796e:	089b      	lsrpl	r3, r3, #2
 8007970:	2001      	movmi	r0, #1
 8007972:	6013      	strmi	r3, [r2, #0]
 8007974:	bf5c      	itt	pl
 8007976:	6013      	strpl	r3, [r2, #0]
 8007978:	2002      	movpl	r0, #2
 800797a:	4770      	bx	lr
 800797c:	b299      	uxth	r1, r3
 800797e:	b909      	cbnz	r1, 8007984 <__lo0bits+0x2a>
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	2010      	movs	r0, #16
 8007984:	b2d9      	uxtb	r1, r3
 8007986:	b909      	cbnz	r1, 800798c <__lo0bits+0x32>
 8007988:	3008      	adds	r0, #8
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	0719      	lsls	r1, r3, #28
 800798e:	bf04      	itt	eq
 8007990:	091b      	lsreq	r3, r3, #4
 8007992:	3004      	addeq	r0, #4
 8007994:	0799      	lsls	r1, r3, #30
 8007996:	bf04      	itt	eq
 8007998:	089b      	lsreq	r3, r3, #2
 800799a:	3002      	addeq	r0, #2
 800799c:	07d9      	lsls	r1, r3, #31
 800799e:	d403      	bmi.n	80079a8 <__lo0bits+0x4e>
 80079a0:	085b      	lsrs	r3, r3, #1
 80079a2:	f100 0001 	add.w	r0, r0, #1
 80079a6:	d003      	beq.n	80079b0 <__lo0bits+0x56>
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	4770      	bx	lr
 80079ac:	2000      	movs	r0, #0
 80079ae:	4770      	bx	lr
 80079b0:	2020      	movs	r0, #32
 80079b2:	4770      	bx	lr

080079b4 <__i2b>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	460c      	mov	r4, r1
 80079b8:	2101      	movs	r1, #1
 80079ba:	f7ff ff07 	bl	80077cc <_Balloc>
 80079be:	4602      	mov	r2, r0
 80079c0:	b928      	cbnz	r0, 80079ce <__i2b+0x1a>
 80079c2:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <__i2b+0x24>)
 80079c4:	4805      	ldr	r0, [pc, #20]	@ (80079dc <__i2b+0x28>)
 80079c6:	f240 1145 	movw	r1, #325	@ 0x145
 80079ca:	f000 fc41 	bl	8008250 <__assert_func>
 80079ce:	2301      	movs	r3, #1
 80079d0:	6144      	str	r4, [r0, #20]
 80079d2:	6103      	str	r3, [r0, #16]
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	bf00      	nop
 80079d8:	08008810 	.word	0x08008810
 80079dc:	08008821 	.word	0x08008821

080079e0 <__multiply>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	4614      	mov	r4, r2
 80079e6:	690a      	ldr	r2, [r1, #16]
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	bfa8      	it	ge
 80079ee:	4623      	movge	r3, r4
 80079f0:	460f      	mov	r7, r1
 80079f2:	bfa4      	itt	ge
 80079f4:	460c      	movge	r4, r1
 80079f6:	461f      	movge	r7, r3
 80079f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80079fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	6861      	ldr	r1, [r4, #4]
 8007a04:	eb0a 0609 	add.w	r6, sl, r9
 8007a08:	42b3      	cmp	r3, r6
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	bfb8      	it	lt
 8007a0e:	3101      	addlt	r1, #1
 8007a10:	f7ff fedc 	bl	80077cc <_Balloc>
 8007a14:	b930      	cbnz	r0, 8007a24 <__multiply+0x44>
 8007a16:	4602      	mov	r2, r0
 8007a18:	4b44      	ldr	r3, [pc, #272]	@ (8007b2c <__multiply+0x14c>)
 8007a1a:	4845      	ldr	r0, [pc, #276]	@ (8007b30 <__multiply+0x150>)
 8007a1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a20:	f000 fc16 	bl	8008250 <__assert_func>
 8007a24:	f100 0514 	add.w	r5, r0, #20
 8007a28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4543      	cmp	r3, r8
 8007a32:	d321      	bcc.n	8007a78 <__multiply+0x98>
 8007a34:	f107 0114 	add.w	r1, r7, #20
 8007a38:	f104 0214 	add.w	r2, r4, #20
 8007a3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a44:	9302      	str	r3, [sp, #8]
 8007a46:	1b13      	subs	r3, r2, r4
 8007a48:	3b15      	subs	r3, #21
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	3304      	adds	r3, #4
 8007a50:	f104 0715 	add.w	r7, r4, #21
 8007a54:	42ba      	cmp	r2, r7
 8007a56:	bf38      	it	cc
 8007a58:	2304      	movcc	r3, #4
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	9b02      	ldr	r3, [sp, #8]
 8007a5e:	9103      	str	r1, [sp, #12]
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d80c      	bhi.n	8007a7e <__multiply+0x9e>
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	dd03      	ble.n	8007a70 <__multiply+0x90>
 8007a68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d05b      	beq.n	8007b28 <__multiply+0x148>
 8007a70:	6106      	str	r6, [r0, #16]
 8007a72:	b005      	add	sp, #20
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	f843 2b04 	str.w	r2, [r3], #4
 8007a7c:	e7d8      	b.n	8007a30 <__multiply+0x50>
 8007a7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a82:	f1ba 0f00 	cmp.w	sl, #0
 8007a86:	d024      	beq.n	8007ad2 <__multiply+0xf2>
 8007a88:	f104 0e14 	add.w	lr, r4, #20
 8007a8c:	46a9      	mov	r9, r5
 8007a8e:	f04f 0c00 	mov.w	ip, #0
 8007a92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a96:	f8d9 3000 	ldr.w	r3, [r9]
 8007a9a:	fa1f fb87 	uxth.w	fp, r7
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aa4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007aa8:	f8d9 7000 	ldr.w	r7, [r9]
 8007aac:	4463      	add	r3, ip
 8007aae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ab2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ab6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ac0:	4572      	cmp	r2, lr
 8007ac2:	f849 3b04 	str.w	r3, [r9], #4
 8007ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007aca:	d8e2      	bhi.n	8007a92 <__multiply+0xb2>
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	f845 c003 	str.w	ip, [r5, r3]
 8007ad2:	9b03      	ldr	r3, [sp, #12]
 8007ad4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ad8:	3104      	adds	r1, #4
 8007ada:	f1b9 0f00 	cmp.w	r9, #0
 8007ade:	d021      	beq.n	8007b24 <__multiply+0x144>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	f104 0c14 	add.w	ip, r4, #20
 8007ae6:	46ae      	mov	lr, r5
 8007ae8:	f04f 0a00 	mov.w	sl, #0
 8007aec:	f8bc b000 	ldrh.w	fp, [ip]
 8007af0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007af4:	fb09 770b 	mla	r7, r9, fp, r7
 8007af8:	4457      	add	r7, sl
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b00:	f84e 3b04 	str.w	r3, [lr], #4
 8007b04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b0c:	f8be 3000 	ldrh.w	r3, [lr]
 8007b10:	fb09 330a 	mla	r3, r9, sl, r3
 8007b14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b18:	4562      	cmp	r2, ip
 8007b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b1e:	d8e5      	bhi.n	8007aec <__multiply+0x10c>
 8007b20:	9f01      	ldr	r7, [sp, #4]
 8007b22:	51eb      	str	r3, [r5, r7]
 8007b24:	3504      	adds	r5, #4
 8007b26:	e799      	b.n	8007a5c <__multiply+0x7c>
 8007b28:	3e01      	subs	r6, #1
 8007b2a:	e79b      	b.n	8007a64 <__multiply+0x84>
 8007b2c:	08008810 	.word	0x08008810
 8007b30:	08008821 	.word	0x08008821

08007b34 <__pow5mult>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	4615      	mov	r5, r2
 8007b3a:	f012 0203 	ands.w	r2, r2, #3
 8007b3e:	4607      	mov	r7, r0
 8007b40:	460e      	mov	r6, r1
 8007b42:	d007      	beq.n	8007b54 <__pow5mult+0x20>
 8007b44:	4c25      	ldr	r4, [pc, #148]	@ (8007bdc <__pow5mult+0xa8>)
 8007b46:	3a01      	subs	r2, #1
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b4e:	f7ff fe9f 	bl	8007890 <__multadd>
 8007b52:	4606      	mov	r6, r0
 8007b54:	10ad      	asrs	r5, r5, #2
 8007b56:	d03d      	beq.n	8007bd4 <__pow5mult+0xa0>
 8007b58:	69fc      	ldr	r4, [r7, #28]
 8007b5a:	b97c      	cbnz	r4, 8007b7c <__pow5mult+0x48>
 8007b5c:	2010      	movs	r0, #16
 8007b5e:	f7ff fcd3 	bl	8007508 <malloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	61f8      	str	r0, [r7, #28]
 8007b66:	b928      	cbnz	r0, 8007b74 <__pow5mult+0x40>
 8007b68:	4b1d      	ldr	r3, [pc, #116]	@ (8007be0 <__pow5mult+0xac>)
 8007b6a:	481e      	ldr	r0, [pc, #120]	@ (8007be4 <__pow5mult+0xb0>)
 8007b6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b70:	f000 fb6e 	bl	8008250 <__assert_func>
 8007b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b78:	6004      	str	r4, [r0, #0]
 8007b7a:	60c4      	str	r4, [r0, #12]
 8007b7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b84:	b94c      	cbnz	r4, 8007b9a <__pow5mult+0x66>
 8007b86:	f240 2171 	movw	r1, #625	@ 0x271
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	f7ff ff12 	bl	80079b4 <__i2b>
 8007b90:	2300      	movs	r3, #0
 8007b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b96:	4604      	mov	r4, r0
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	f04f 0900 	mov.w	r9, #0
 8007b9e:	07eb      	lsls	r3, r5, #31
 8007ba0:	d50a      	bpl.n	8007bb8 <__pow5mult+0x84>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f7ff ff1a 	bl	80079e0 <__multiply>
 8007bac:	4631      	mov	r1, r6
 8007bae:	4680      	mov	r8, r0
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f7ff fe4b 	bl	800784c <_Bfree>
 8007bb6:	4646      	mov	r6, r8
 8007bb8:	106d      	asrs	r5, r5, #1
 8007bba:	d00b      	beq.n	8007bd4 <__pow5mult+0xa0>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	b938      	cbnz	r0, 8007bd0 <__pow5mult+0x9c>
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff ff0b 	bl	80079e0 <__multiply>
 8007bca:	6020      	str	r0, [r4, #0]
 8007bcc:	f8c0 9000 	str.w	r9, [r0]
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	e7e4      	b.n	8007b9e <__pow5mult+0x6a>
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bda:	bf00      	nop
 8007bdc:	0800887c 	.word	0x0800887c
 8007be0:	080087a1 	.word	0x080087a1
 8007be4:	08008821 	.word	0x08008821

08007be8 <__lshift>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	6849      	ldr	r1, [r1, #4]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bf6:	68a3      	ldr	r3, [r4, #8]
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	4691      	mov	r9, r2
 8007bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c00:	f108 0601 	add.w	r6, r8, #1
 8007c04:	42b3      	cmp	r3, r6
 8007c06:	db0b      	blt.n	8007c20 <__lshift+0x38>
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f7ff fddf 	bl	80077cc <_Balloc>
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b948      	cbnz	r0, 8007c26 <__lshift+0x3e>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4b28      	ldr	r3, [pc, #160]	@ (8007cb8 <__lshift+0xd0>)
 8007c16:	4829      	ldr	r0, [pc, #164]	@ (8007cbc <__lshift+0xd4>)
 8007c18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c1c:	f000 fb18 	bl	8008250 <__assert_func>
 8007c20:	3101      	adds	r1, #1
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	e7ee      	b.n	8007c04 <__lshift+0x1c>
 8007c26:	2300      	movs	r3, #0
 8007c28:	f100 0114 	add.w	r1, r0, #20
 8007c2c:	f100 0210 	add.w	r2, r0, #16
 8007c30:	4618      	mov	r0, r3
 8007c32:	4553      	cmp	r3, sl
 8007c34:	db33      	blt.n	8007c9e <__lshift+0xb6>
 8007c36:	6920      	ldr	r0, [r4, #16]
 8007c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c3c:	f104 0314 	add.w	r3, r4, #20
 8007c40:	f019 091f 	ands.w	r9, r9, #31
 8007c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c4c:	d02b      	beq.n	8007ca6 <__lshift+0xbe>
 8007c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c52:	468a      	mov	sl, r1
 8007c54:	2200      	movs	r2, #0
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	fa00 f009 	lsl.w	r0, r0, r9
 8007c5c:	4310      	orrs	r0, r2
 8007c5e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c66:	459c      	cmp	ip, r3
 8007c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c6c:	d8f3      	bhi.n	8007c56 <__lshift+0x6e>
 8007c6e:	ebac 0304 	sub.w	r3, ip, r4
 8007c72:	3b15      	subs	r3, #21
 8007c74:	f023 0303 	bic.w	r3, r3, #3
 8007c78:	3304      	adds	r3, #4
 8007c7a:	f104 0015 	add.w	r0, r4, #21
 8007c7e:	4584      	cmp	ip, r0
 8007c80:	bf38      	it	cc
 8007c82:	2304      	movcc	r3, #4
 8007c84:	50ca      	str	r2, [r1, r3]
 8007c86:	b10a      	cbz	r2, 8007c8c <__lshift+0xa4>
 8007c88:	f108 0602 	add.w	r6, r8, #2
 8007c8c:	3e01      	subs	r6, #1
 8007c8e:	4638      	mov	r0, r7
 8007c90:	612e      	str	r6, [r5, #16]
 8007c92:	4621      	mov	r1, r4
 8007c94:	f7ff fdda 	bl	800784c <_Bfree>
 8007c98:	4628      	mov	r0, r5
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	e7c5      	b.n	8007c32 <__lshift+0x4a>
 8007ca6:	3904      	subs	r1, #4
 8007ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cb0:	459c      	cmp	ip, r3
 8007cb2:	d8f9      	bhi.n	8007ca8 <__lshift+0xc0>
 8007cb4:	e7ea      	b.n	8007c8c <__lshift+0xa4>
 8007cb6:	bf00      	nop
 8007cb8:	08008810 	.word	0x08008810
 8007cbc:	08008821 	.word	0x08008821

08007cc0 <__mcmp>:
 8007cc0:	690a      	ldr	r2, [r1, #16]
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6900      	ldr	r0, [r0, #16]
 8007cc6:	1a80      	subs	r0, r0, r2
 8007cc8:	b530      	push	{r4, r5, lr}
 8007cca:	d10e      	bne.n	8007cea <__mcmp+0x2a>
 8007ccc:	3314      	adds	r3, #20
 8007cce:	3114      	adds	r1, #20
 8007cd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ce0:	4295      	cmp	r5, r2
 8007ce2:	d003      	beq.n	8007cec <__mcmp+0x2c>
 8007ce4:	d205      	bcs.n	8007cf2 <__mcmp+0x32>
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cea:	bd30      	pop	{r4, r5, pc}
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	d3f3      	bcc.n	8007cd8 <__mcmp+0x18>
 8007cf0:	e7fb      	b.n	8007cea <__mcmp+0x2a>
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	e7f9      	b.n	8007cea <__mcmp+0x2a>
	...

08007cf8 <__mdiff>:
 8007cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	4689      	mov	r9, r1
 8007cfe:	4606      	mov	r6, r0
 8007d00:	4611      	mov	r1, r2
 8007d02:	4648      	mov	r0, r9
 8007d04:	4614      	mov	r4, r2
 8007d06:	f7ff ffdb 	bl	8007cc0 <__mcmp>
 8007d0a:	1e05      	subs	r5, r0, #0
 8007d0c:	d112      	bne.n	8007d34 <__mdiff+0x3c>
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4630      	mov	r0, r6
 8007d12:	f7ff fd5b 	bl	80077cc <_Balloc>
 8007d16:	4602      	mov	r2, r0
 8007d18:	b928      	cbnz	r0, 8007d26 <__mdiff+0x2e>
 8007d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e18 <__mdiff+0x120>)
 8007d1c:	f240 2137 	movw	r1, #567	@ 0x237
 8007d20:	483e      	ldr	r0, [pc, #248]	@ (8007e1c <__mdiff+0x124>)
 8007d22:	f000 fa95 	bl	8008250 <__assert_func>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	b003      	add	sp, #12
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	bfbc      	itt	lt
 8007d36:	464b      	movlt	r3, r9
 8007d38:	46a1      	movlt	r9, r4
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d40:	bfba      	itte	lt
 8007d42:	461c      	movlt	r4, r3
 8007d44:	2501      	movlt	r5, #1
 8007d46:	2500      	movge	r5, #0
 8007d48:	f7ff fd40 	bl	80077cc <_Balloc>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	b918      	cbnz	r0, 8007d58 <__mdiff+0x60>
 8007d50:	4b31      	ldr	r3, [pc, #196]	@ (8007e18 <__mdiff+0x120>)
 8007d52:	f240 2145 	movw	r1, #581	@ 0x245
 8007d56:	e7e3      	b.n	8007d20 <__mdiff+0x28>
 8007d58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d5c:	6926      	ldr	r6, [r4, #16]
 8007d5e:	60c5      	str	r5, [r0, #12]
 8007d60:	f109 0310 	add.w	r3, r9, #16
 8007d64:	f109 0514 	add.w	r5, r9, #20
 8007d68:	f104 0e14 	add.w	lr, r4, #20
 8007d6c:	f100 0b14 	add.w	fp, r0, #20
 8007d70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	46d9      	mov	r9, fp
 8007d7c:	f04f 0c00 	mov.w	ip, #0
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	fa1f f38a 	uxth.w	r3, sl
 8007d90:	4619      	mov	r1, r3
 8007d92:	b283      	uxth	r3, r0
 8007d94:	1acb      	subs	r3, r1, r3
 8007d96:	0c00      	lsrs	r0, r0, #16
 8007d98:	4463      	add	r3, ip
 8007d9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007da8:	4576      	cmp	r6, lr
 8007daa:	f849 3b04 	str.w	r3, [r9], #4
 8007dae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007db2:	d8e5      	bhi.n	8007d80 <__mdiff+0x88>
 8007db4:	1b33      	subs	r3, r6, r4
 8007db6:	3b15      	subs	r3, #21
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	3415      	adds	r4, #21
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	42a6      	cmp	r6, r4
 8007dc2:	bf38      	it	cc
 8007dc4:	2304      	movcc	r3, #4
 8007dc6:	441d      	add	r5, r3
 8007dc8:	445b      	add	r3, fp
 8007dca:	461e      	mov	r6, r3
 8007dcc:	462c      	mov	r4, r5
 8007dce:	4544      	cmp	r4, r8
 8007dd0:	d30e      	bcc.n	8007df0 <__mdiff+0xf8>
 8007dd2:	f108 0103 	add.w	r1, r8, #3
 8007dd6:	1b49      	subs	r1, r1, r5
 8007dd8:	f021 0103 	bic.w	r1, r1, #3
 8007ddc:	3d03      	subs	r5, #3
 8007dde:	45a8      	cmp	r8, r5
 8007de0:	bf38      	it	cc
 8007de2:	2100      	movcc	r1, #0
 8007de4:	440b      	add	r3, r1
 8007de6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dea:	b191      	cbz	r1, 8007e12 <__mdiff+0x11a>
 8007dec:	6117      	str	r7, [r2, #16]
 8007dee:	e79d      	b.n	8007d2c <__mdiff+0x34>
 8007df0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007df4:	46e6      	mov	lr, ip
 8007df6:	0c08      	lsrs	r0, r1, #16
 8007df8:	fa1c fc81 	uxtah	ip, ip, r1
 8007dfc:	4471      	add	r1, lr
 8007dfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e02:	b289      	uxth	r1, r1
 8007e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e08:	f846 1b04 	str.w	r1, [r6], #4
 8007e0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e10:	e7dd      	b.n	8007dce <__mdiff+0xd6>
 8007e12:	3f01      	subs	r7, #1
 8007e14:	e7e7      	b.n	8007de6 <__mdiff+0xee>
 8007e16:	bf00      	nop
 8007e18:	08008810 	.word	0x08008810
 8007e1c:	08008821 	.word	0x08008821

08007e20 <__d2b>:
 8007e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	460f      	mov	r7, r1
 8007e26:	2101      	movs	r1, #1
 8007e28:	ec59 8b10 	vmov	r8, r9, d0
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	f7ff fccd 	bl	80077cc <_Balloc>
 8007e32:	4604      	mov	r4, r0
 8007e34:	b930      	cbnz	r0, 8007e44 <__d2b+0x24>
 8007e36:	4602      	mov	r2, r0
 8007e38:	4b23      	ldr	r3, [pc, #140]	@ (8007ec8 <__d2b+0xa8>)
 8007e3a:	4824      	ldr	r0, [pc, #144]	@ (8007ecc <__d2b+0xac>)
 8007e3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e40:	f000 fa06 	bl	8008250 <__assert_func>
 8007e44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e4c:	b10d      	cbz	r5, 8007e52 <__d2b+0x32>
 8007e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	f1b8 0300 	subs.w	r3, r8, #0
 8007e58:	d023      	beq.n	8007ea2 <__d2b+0x82>
 8007e5a:	4668      	mov	r0, sp
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	f7ff fd7c 	bl	800795a <__lo0bits>
 8007e62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e66:	b1d0      	cbz	r0, 8007e9e <__d2b+0x7e>
 8007e68:	f1c0 0320 	rsb	r3, r0, #32
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	430b      	orrs	r3, r1
 8007e72:	40c2      	lsrs	r2, r0
 8007e74:	6163      	str	r3, [r4, #20]
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	61a3      	str	r3, [r4, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2201      	moveq	r2, #1
 8007e82:	2202      	movne	r2, #2
 8007e84:	6122      	str	r2, [r4, #16]
 8007e86:	b1a5      	cbz	r5, 8007eb2 <__d2b+0x92>
 8007e88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e8c:	4405      	add	r5, r0
 8007e8e:	603d      	str	r5, [r7, #0]
 8007e90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e94:	6030      	str	r0, [r6, #0]
 8007e96:	4620      	mov	r0, r4
 8007e98:	b003      	add	sp, #12
 8007e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	6161      	str	r1, [r4, #20]
 8007ea0:	e7ea      	b.n	8007e78 <__d2b+0x58>
 8007ea2:	a801      	add	r0, sp, #4
 8007ea4:	f7ff fd59 	bl	800795a <__lo0bits>
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	6163      	str	r3, [r4, #20]
 8007eac:	3020      	adds	r0, #32
 8007eae:	2201      	movs	r2, #1
 8007eb0:	e7e8      	b.n	8007e84 <__d2b+0x64>
 8007eb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007eba:	6038      	str	r0, [r7, #0]
 8007ebc:	6918      	ldr	r0, [r3, #16]
 8007ebe:	f7ff fd2d 	bl	800791c <__hi0bits>
 8007ec2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ec6:	e7e5      	b.n	8007e94 <__d2b+0x74>
 8007ec8:	08008810 	.word	0x08008810
 8007ecc:	08008821 	.word	0x08008821

08007ed0 <__sread>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 f978 	bl	80081cc <_read_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	bfab      	itete	ge
 8007ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee4:	181b      	addge	r3, r3, r0
 8007ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eea:	bfac      	ite	ge
 8007eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eee:	81a3      	strhlt	r3, [r4, #12]
 8007ef0:	bd10      	pop	{r4, pc}

08007ef2 <__swrite>:
 8007ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	898b      	ldrh	r3, [r1, #12]
 8007efa:	05db      	lsls	r3, r3, #23
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	4616      	mov	r6, r2
 8007f02:	d505      	bpl.n	8007f10 <__swrite+0x1e>
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	2302      	movs	r3, #2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f000 f94c 	bl	80081a8 <_lseek_r>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	463b      	mov	r3, r7
 8007f20:	4628      	mov	r0, r5
 8007f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	f000 b973 	b.w	8008210 <_write_r>

08007f2a <__sseek>:
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f32:	f000 f939 	bl	80081a8 <_lseek_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	bf15      	itete	ne
 8007f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f46:	81a3      	strheq	r3, [r4, #12]
 8007f48:	bf18      	it	ne
 8007f4a:	81a3      	strhne	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__sclose>:
 8007f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f52:	f000 b8f7 	b.w	8008144 <_close_r>

08007f56 <__swbuf_r>:
 8007f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f58:	460e      	mov	r6, r1
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b118      	cbz	r0, 8007f68 <__swbuf_r+0x12>
 8007f60:	6a03      	ldr	r3, [r0, #32]
 8007f62:	b90b      	cbnz	r3, 8007f68 <__swbuf_r+0x12>
 8007f64:	f7fe fbb4 	bl	80066d0 <__sinit>
 8007f68:	69a3      	ldr	r3, [r4, #24]
 8007f6a:	60a3      	str	r3, [r4, #8]
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	071a      	lsls	r2, r3, #28
 8007f70:	d501      	bpl.n	8007f76 <__swbuf_r+0x20>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	b943      	cbnz	r3, 8007f88 <__swbuf_r+0x32>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f82b 	bl	8007fd4 <__swsetup_r>
 8007f7e:	b118      	cbz	r0, 8007f88 <__swbuf_r+0x32>
 8007f80:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007f84:	4638      	mov	r0, r7
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	1a98      	subs	r0, r3, r2
 8007f8e:	6963      	ldr	r3, [r4, #20]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	4283      	cmp	r3, r0
 8007f94:	4637      	mov	r7, r6
 8007f96:	dc05      	bgt.n	8007fa4 <__swbuf_r+0x4e>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff fbe2 	bl	8007764 <_fflush_r>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1ed      	bne.n	8007f80 <__swbuf_r+0x2a>
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	701e      	strb	r6, [r3, #0]
 8007fb2:	6962      	ldr	r2, [r4, #20]
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d004      	beq.n	8007fc4 <__swbuf_r+0x6e>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	07db      	lsls	r3, r3, #31
 8007fbe:	d5e1      	bpl.n	8007f84 <__swbuf_r+0x2e>
 8007fc0:	2e0a      	cmp	r6, #10
 8007fc2:	d1df      	bne.n	8007f84 <__swbuf_r+0x2e>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f7ff fbcc 	bl	8007764 <_fflush_r>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d0d9      	beq.n	8007f84 <__swbuf_r+0x2e>
 8007fd0:	e7d6      	b.n	8007f80 <__swbuf_r+0x2a>
	...

08007fd4 <__swsetup_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4b29      	ldr	r3, [pc, #164]	@ (800807c <__swsetup_r+0xa8>)
 8007fd8:	4605      	mov	r5, r0
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	460c      	mov	r4, r1
 8007fde:	b118      	cbz	r0, 8007fe8 <__swsetup_r+0x14>
 8007fe0:	6a03      	ldr	r3, [r0, #32]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <__swsetup_r+0x14>
 8007fe4:	f7fe fb74 	bl	80066d0 <__sinit>
 8007fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fec:	0719      	lsls	r1, r3, #28
 8007fee:	d422      	bmi.n	8008036 <__swsetup_r+0x62>
 8007ff0:	06da      	lsls	r2, r3, #27
 8007ff2:	d407      	bmi.n	8008004 <__swsetup_r+0x30>
 8007ff4:	2209      	movs	r2, #9
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008002:	e033      	b.n	800806c <__swsetup_r+0x98>
 8008004:	0758      	lsls	r0, r3, #29
 8008006:	d512      	bpl.n	800802e <__swsetup_r+0x5a>
 8008008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800800a:	b141      	cbz	r1, 800801e <__swsetup_r+0x4a>
 800800c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008010:	4299      	cmp	r1, r3
 8008012:	d002      	beq.n	800801a <__swsetup_r+0x46>
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f94d 	bl	80082b4 <_free_r>
 800801a:	2300      	movs	r3, #0
 800801c:	6363      	str	r3, [r4, #52]	@ 0x34
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	2300      	movs	r3, #0
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f043 0308 	orr.w	r3, r3, #8
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b94b      	cbnz	r3, 800804e <__swsetup_r+0x7a>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008044:	d003      	beq.n	800804e <__swsetup_r+0x7a>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f000 f83f 	bl	80080cc <__smakebuf_r>
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	f013 0201 	ands.w	r2, r3, #1
 8008056:	d00a      	beq.n	800806e <__swsetup_r+0x9a>
 8008058:	2200      	movs	r2, #0
 800805a:	60a2      	str	r2, [r4, #8]
 800805c:	6962      	ldr	r2, [r4, #20]
 800805e:	4252      	negs	r2, r2
 8008060:	61a2      	str	r2, [r4, #24]
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	b942      	cbnz	r2, 8008078 <__swsetup_r+0xa4>
 8008066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800806a:	d1c5      	bne.n	8007ff8 <__swsetup_r+0x24>
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	0799      	lsls	r1, r3, #30
 8008070:	bf58      	it	pl
 8008072:	6962      	ldrpl	r2, [r4, #20]
 8008074:	60a2      	str	r2, [r4, #8]
 8008076:	e7f4      	b.n	8008062 <__swsetup_r+0x8e>
 8008078:	2000      	movs	r0, #0
 800807a:	e7f7      	b.n	800806c <__swsetup_r+0x98>
 800807c:	20040018 	.word	0x20040018

08008080 <__swhatbuf_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460c      	mov	r4, r1
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2900      	cmp	r1, #0
 800808a:	b096      	sub	sp, #88	@ 0x58
 800808c:	4615      	mov	r5, r2
 800808e:	461e      	mov	r6, r3
 8008090:	da0d      	bge.n	80080ae <__swhatbuf_r+0x2e>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	bf14      	ite	ne
 800809e:	2340      	movne	r3, #64	@ 0x40
 80080a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080a4:	2000      	movs	r0, #0
 80080a6:	6031      	str	r1, [r6, #0]
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	b016      	add	sp, #88	@ 0x58
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
 80080ae:	466a      	mov	r2, sp
 80080b0:	f000 f858 	bl	8008164 <_fstat_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	dbec      	blt.n	8008092 <__swhatbuf_r+0x12>
 80080b8:	9901      	ldr	r1, [sp, #4]
 80080ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080c2:	4259      	negs	r1, r3
 80080c4:	4159      	adcs	r1, r3
 80080c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ca:	e7eb      	b.n	80080a4 <__swhatbuf_r+0x24>

080080cc <__smakebuf_r>:
 80080cc:	898b      	ldrh	r3, [r1, #12]
 80080ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d0:	079d      	lsls	r5, r3, #30
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	d507      	bpl.n	80080e8 <__smakebuf_r+0x1c>
 80080d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2301      	movs	r3, #1
 80080e2:	6163      	str	r3, [r4, #20]
 80080e4:	b003      	add	sp, #12
 80080e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e8:	ab01      	add	r3, sp, #4
 80080ea:	466a      	mov	r2, sp
 80080ec:	f7ff ffc8 	bl	8008080 <__swhatbuf_r>
 80080f0:	9f00      	ldr	r7, [sp, #0]
 80080f2:	4605      	mov	r5, r0
 80080f4:	4639      	mov	r1, r7
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7ff fa30 	bl	800755c <_malloc_r>
 80080fc:	b948      	cbnz	r0, 8008112 <__smakebuf_r+0x46>
 80080fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008102:	059a      	lsls	r2, r3, #22
 8008104:	d4ee      	bmi.n	80080e4 <__smakebuf_r+0x18>
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	f043 0302 	orr.w	r3, r3, #2
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	e7e2      	b.n	80080d8 <__smakebuf_r+0xc>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	6020      	str	r0, [r4, #0]
 8008116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x70>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f82d 	bl	8008188 <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x70>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	431d      	orrs	r5, r3
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cf      	b.n	80080e4 <__smakebuf_r+0x18>

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d06      	ldr	r5, [pc, #24]	@ (8008160 <_close_r+0x1c>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	f7f9 fc25 	bl	800199e <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	2004043c 	.word	0x2004043c

08008164 <_fstat_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d07      	ldr	r5, [pc, #28]	@ (8008184 <_fstat_r+0x20>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	f7f9 fc20 	bl	80019b6 <_fstat>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d102      	bne.n	8008180 <_fstat_r+0x1c>
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	b103      	cbz	r3, 8008180 <_fstat_r+0x1c>
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	bf00      	nop
 8008184:	2004043c 	.word	0x2004043c

08008188 <_isatty_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	@ (80081a4 <_isatty_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7f9 fc1f 	bl	80019d6 <_isatty>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_isatty_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_isatty_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	2004043c 	.word	0x2004043c

080081a8 <_lseek_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	@ (80081c8 <_lseek_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7f9 fc18 	bl	80019ec <_lseek>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_lseek_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_lseek_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	2004043c 	.word	0x2004043c

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	@ (80081ec <_read_r+0x20>)
 80081d0:	4604      	mov	r4, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7f9 fba6 	bl	800192c <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	2004043c 	.word	0x2004043c

080081f0 <_sbrk_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d06      	ldr	r5, [pc, #24]	@ (800820c <_sbrk_r+0x1c>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7f9 fc04 	bl	8001a08 <_sbrk>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_sbrk_r+0x1a>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_sbrk_r+0x1a>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	2004043c 	.word	0x2004043c

08008210 <_write_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4d07      	ldr	r5, [pc, #28]	@ (8008230 <_write_r+0x20>)
 8008214:	4604      	mov	r4, r0
 8008216:	4608      	mov	r0, r1
 8008218:	4611      	mov	r1, r2
 800821a:	2200      	movs	r2, #0
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7f9 fba1 	bl	8001966 <_write>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_write_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_write_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	2004043c 	.word	0x2004043c

08008234 <memcpy>:
 8008234:	440a      	add	r2, r1
 8008236:	4291      	cmp	r1, r2
 8008238:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800823c:	d100      	bne.n	8008240 <memcpy+0xc>
 800823e:	4770      	bx	lr
 8008240:	b510      	push	{r4, lr}
 8008242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800824a:	4291      	cmp	r1, r2
 800824c:	d1f9      	bne.n	8008242 <memcpy+0xe>
 800824e:	bd10      	pop	{r4, pc}

08008250 <__assert_func>:
 8008250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008252:	4614      	mov	r4, r2
 8008254:	461a      	mov	r2, r3
 8008256:	4b09      	ldr	r3, [pc, #36]	@ (800827c <__assert_func+0x2c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4605      	mov	r5, r0
 800825c:	68d8      	ldr	r0, [r3, #12]
 800825e:	b954      	cbnz	r4, 8008276 <__assert_func+0x26>
 8008260:	4b07      	ldr	r3, [pc, #28]	@ (8008280 <__assert_func+0x30>)
 8008262:	461c      	mov	r4, r3
 8008264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008268:	9100      	str	r1, [sp, #0]
 800826a:	462b      	mov	r3, r5
 800826c:	4905      	ldr	r1, [pc, #20]	@ (8008284 <__assert_func+0x34>)
 800826e:	f000 f87d 	bl	800836c <fiprintf>
 8008272:	f000 f89a 	bl	80083aa <abort>
 8008276:	4b04      	ldr	r3, [pc, #16]	@ (8008288 <__assert_func+0x38>)
 8008278:	e7f4      	b.n	8008264 <__assert_func+0x14>
 800827a:	bf00      	nop
 800827c:	20040018 	.word	0x20040018
 8008280:	08008abe 	.word	0x08008abe
 8008284:	08008a90 	.word	0x08008a90
 8008288:	08008a83 	.word	0x08008a83

0800828c <_calloc_r>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	fba1 5402 	umull	r5, r4, r1, r2
 8008292:	b93c      	cbnz	r4, 80082a4 <_calloc_r+0x18>
 8008294:	4629      	mov	r1, r5
 8008296:	f7ff f961 	bl	800755c <_malloc_r>
 800829a:	4606      	mov	r6, r0
 800829c:	b928      	cbnz	r0, 80082aa <_calloc_r+0x1e>
 800829e:	2600      	movs	r6, #0
 80082a0:	4630      	mov	r0, r6
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	220c      	movs	r2, #12
 80082a6:	6002      	str	r2, [r0, #0]
 80082a8:	e7f9      	b.n	800829e <_calloc_r+0x12>
 80082aa:	462a      	mov	r2, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	f7fe faa3 	bl	80067f8 <memset>
 80082b2:	e7f5      	b.n	80082a0 <_calloc_r+0x14>

080082b4 <_free_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d041      	beq.n	8008340 <_free_r+0x8c>
 80082bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c0:	1f0c      	subs	r4, r1, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfb8      	it	lt
 80082c6:	18e4      	addlt	r4, r4, r3
 80082c8:	f7ff fa74 	bl	80077b4 <__malloc_lock>
 80082cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008344 <_free_r+0x90>)
 80082ce:	6813      	ldr	r3, [r2, #0]
 80082d0:	b933      	cbnz	r3, 80082e0 <_free_r+0x2c>
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	6014      	str	r4, [r2, #0]
 80082d6:	4628      	mov	r0, r5
 80082d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082dc:	f7ff ba70 	b.w	80077c0 <__malloc_unlock>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d908      	bls.n	80082f6 <_free_r+0x42>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	1821      	adds	r1, r4, r0
 80082e8:	428b      	cmp	r3, r1
 80082ea:	bf01      	itttt	eq
 80082ec:	6819      	ldreq	r1, [r3, #0]
 80082ee:	685b      	ldreq	r3, [r3, #4]
 80082f0:	1809      	addeq	r1, r1, r0
 80082f2:	6021      	streq	r1, [r4, #0]
 80082f4:	e7ed      	b.n	80082d2 <_free_r+0x1e>
 80082f6:	461a      	mov	r2, r3
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b10b      	cbz	r3, 8008300 <_free_r+0x4c>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d9fa      	bls.n	80082f6 <_free_r+0x42>
 8008300:	6811      	ldr	r1, [r2, #0]
 8008302:	1850      	adds	r0, r2, r1
 8008304:	42a0      	cmp	r0, r4
 8008306:	d10b      	bne.n	8008320 <_free_r+0x6c>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	4401      	add	r1, r0
 800830c:	1850      	adds	r0, r2, r1
 800830e:	4283      	cmp	r3, r0
 8008310:	6011      	str	r1, [r2, #0]
 8008312:	d1e0      	bne.n	80082d6 <_free_r+0x22>
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	4408      	add	r0, r1
 800831c:	6010      	str	r0, [r2, #0]
 800831e:	e7da      	b.n	80082d6 <_free_r+0x22>
 8008320:	d902      	bls.n	8008328 <_free_r+0x74>
 8008322:	230c      	movs	r3, #12
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	e7d6      	b.n	80082d6 <_free_r+0x22>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	1821      	adds	r1, r4, r0
 800832c:	428b      	cmp	r3, r1
 800832e:	bf04      	itt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	bf04      	itt	eq
 8008338:	1809      	addeq	r1, r1, r0
 800833a:	6021      	streq	r1, [r4, #0]
 800833c:	6054      	str	r4, [r2, #4]
 800833e:	e7ca      	b.n	80082d6 <_free_r+0x22>
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	20040438 	.word	0x20040438

08008348 <__ascii_mbtowc>:
 8008348:	b082      	sub	sp, #8
 800834a:	b901      	cbnz	r1, 800834e <__ascii_mbtowc+0x6>
 800834c:	a901      	add	r1, sp, #4
 800834e:	b142      	cbz	r2, 8008362 <__ascii_mbtowc+0x1a>
 8008350:	b14b      	cbz	r3, 8008366 <__ascii_mbtowc+0x1e>
 8008352:	7813      	ldrb	r3, [r2, #0]
 8008354:	600b      	str	r3, [r1, #0]
 8008356:	7812      	ldrb	r2, [r2, #0]
 8008358:	1e10      	subs	r0, r2, #0
 800835a:	bf18      	it	ne
 800835c:	2001      	movne	r0, #1
 800835e:	b002      	add	sp, #8
 8008360:	4770      	bx	lr
 8008362:	4610      	mov	r0, r2
 8008364:	e7fb      	b.n	800835e <__ascii_mbtowc+0x16>
 8008366:	f06f 0001 	mvn.w	r0, #1
 800836a:	e7f8      	b.n	800835e <__ascii_mbtowc+0x16>

0800836c <fiprintf>:
 800836c:	b40e      	push	{r1, r2, r3}
 800836e:	b503      	push	{r0, r1, lr}
 8008370:	4601      	mov	r1, r0
 8008372:	ab03      	add	r3, sp, #12
 8008374:	4805      	ldr	r0, [pc, #20]	@ (800838c <fiprintf+0x20>)
 8008376:	f853 2b04 	ldr.w	r2, [r3], #4
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	f000 f845 	bl	800840c <_vfiprintf_r>
 8008382:	b002      	add	sp, #8
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	20040018 	.word	0x20040018

08008390 <__ascii_wctomb>:
 8008390:	4603      	mov	r3, r0
 8008392:	4608      	mov	r0, r1
 8008394:	b141      	cbz	r1, 80083a8 <__ascii_wctomb+0x18>
 8008396:	2aff      	cmp	r2, #255	@ 0xff
 8008398:	d904      	bls.n	80083a4 <__ascii_wctomb+0x14>
 800839a:	228a      	movs	r2, #138	@ 0x8a
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083a2:	4770      	bx	lr
 80083a4:	700a      	strb	r2, [r1, #0]
 80083a6:	2001      	movs	r0, #1
 80083a8:	4770      	bx	lr

080083aa <abort>:
 80083aa:	b508      	push	{r3, lr}
 80083ac:	2006      	movs	r0, #6
 80083ae:	f000 f96d 	bl	800868c <raise>
 80083b2:	2001      	movs	r0, #1
 80083b4:	f7f9 faaf 	bl	8001916 <_exit>

080083b8 <__sfputc_r>:
 80083b8:	6893      	ldr	r3, [r2, #8]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	b410      	push	{r4}
 80083c0:	6093      	str	r3, [r2, #8]
 80083c2:	da08      	bge.n	80083d6 <__sfputc_r+0x1e>
 80083c4:	6994      	ldr	r4, [r2, #24]
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	db01      	blt.n	80083ce <__sfputc_r+0x16>
 80083ca:	290a      	cmp	r1, #10
 80083cc:	d103      	bne.n	80083d6 <__sfputc_r+0x1e>
 80083ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d2:	f7ff bdc0 	b.w	8007f56 <__swbuf_r>
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	1c58      	adds	r0, r3, #1
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	7019      	strb	r1, [r3, #0]
 80083de:	4608      	mov	r0, r1
 80083e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <__sfputs_r>:
 80083e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e8:	4606      	mov	r6, r0
 80083ea:	460f      	mov	r7, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	18d5      	adds	r5, r2, r3
 80083f0:	42ac      	cmp	r4, r5
 80083f2:	d101      	bne.n	80083f8 <__sfputs_r+0x12>
 80083f4:	2000      	movs	r0, #0
 80083f6:	e007      	b.n	8008408 <__sfputs_r+0x22>
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	463a      	mov	r2, r7
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ffda 	bl	80083b8 <__sfputc_r>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d1f3      	bne.n	80083f0 <__sfputs_r+0xa>
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800840c <_vfiprintf_r>:
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	460d      	mov	r5, r1
 8008412:	b09d      	sub	sp, #116	@ 0x74
 8008414:	4614      	mov	r4, r2
 8008416:	4698      	mov	r8, r3
 8008418:	4606      	mov	r6, r0
 800841a:	b118      	cbz	r0, 8008424 <_vfiprintf_r+0x18>
 800841c:	6a03      	ldr	r3, [r0, #32]
 800841e:	b90b      	cbnz	r3, 8008424 <_vfiprintf_r+0x18>
 8008420:	f7fe f956 	bl	80066d0 <__sinit>
 8008424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d405      	bmi.n	8008436 <_vfiprintf_r+0x2a>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	059a      	lsls	r2, r3, #22
 800842e:	d402      	bmi.n	8008436 <_vfiprintf_r+0x2a>
 8008430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008432:	f7fe fa18 	bl	8006866 <__retarget_lock_acquire_recursive>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	071b      	lsls	r3, r3, #28
 800843a:	d501      	bpl.n	8008440 <_vfiprintf_r+0x34>
 800843c:	692b      	ldr	r3, [r5, #16]
 800843e:	b99b      	cbnz	r3, 8008468 <_vfiprintf_r+0x5c>
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f7ff fdc6 	bl	8007fd4 <__swsetup_r>
 8008448:	b170      	cbz	r0, 8008468 <_vfiprintf_r+0x5c>
 800844a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800844c:	07dc      	lsls	r4, r3, #31
 800844e:	d504      	bpl.n	800845a <_vfiprintf_r+0x4e>
 8008450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008454:	b01d      	add	sp, #116	@ 0x74
 8008456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	0598      	lsls	r0, r3, #22
 800845e:	d4f7      	bmi.n	8008450 <_vfiprintf_r+0x44>
 8008460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008462:	f7fe fa01 	bl	8006868 <__retarget_lock_release_recursive>
 8008466:	e7f3      	b.n	8008450 <_vfiprintf_r+0x44>
 8008468:	2300      	movs	r3, #0
 800846a:	9309      	str	r3, [sp, #36]	@ 0x24
 800846c:	2320      	movs	r3, #32
 800846e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008472:	f8cd 800c 	str.w	r8, [sp, #12]
 8008476:	2330      	movs	r3, #48	@ 0x30
 8008478:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008628 <_vfiprintf_r+0x21c>
 800847c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008480:	f04f 0901 	mov.w	r9, #1
 8008484:	4623      	mov	r3, r4
 8008486:	469a      	mov	sl, r3
 8008488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848c:	b10a      	cbz	r2, 8008492 <_vfiprintf_r+0x86>
 800848e:	2a25      	cmp	r2, #37	@ 0x25
 8008490:	d1f9      	bne.n	8008486 <_vfiprintf_r+0x7a>
 8008492:	ebba 0b04 	subs.w	fp, sl, r4
 8008496:	d00b      	beq.n	80084b0 <_vfiprintf_r+0xa4>
 8008498:	465b      	mov	r3, fp
 800849a:	4622      	mov	r2, r4
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ffa1 	bl	80083e6 <__sfputs_r>
 80084a4:	3001      	adds	r0, #1
 80084a6:	f000 80a7 	beq.w	80085f8 <_vfiprintf_r+0x1ec>
 80084aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ac:	445a      	add	r2, fp
 80084ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80084b0:	f89a 3000 	ldrb.w	r3, [sl]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 809f 	beq.w	80085f8 <_vfiprintf_r+0x1ec>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c4:	f10a 0a01 	add.w	sl, sl, #1
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80084d2:	4654      	mov	r4, sl
 80084d4:	2205      	movs	r2, #5
 80084d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084da:	4853      	ldr	r0, [pc, #332]	@ (8008628 <_vfiprintf_r+0x21c>)
 80084dc:	f7f7 fe90 	bl	8000200 <memchr>
 80084e0:	9a04      	ldr	r2, [sp, #16]
 80084e2:	b9d8      	cbnz	r0, 800851c <_vfiprintf_r+0x110>
 80084e4:	06d1      	lsls	r1, r2, #27
 80084e6:	bf44      	itt	mi
 80084e8:	2320      	movmi	r3, #32
 80084ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ee:	0713      	lsls	r3, r2, #28
 80084f0:	bf44      	itt	mi
 80084f2:	232b      	movmi	r3, #43	@ 0x2b
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f8:	f89a 3000 	ldrb.w	r3, [sl]
 80084fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80084fe:	d015      	beq.n	800852c <_vfiprintf_r+0x120>
 8008500:	9a07      	ldr	r2, [sp, #28]
 8008502:	4654      	mov	r4, sl
 8008504:	2000      	movs	r0, #0
 8008506:	f04f 0c0a 	mov.w	ip, #10
 800850a:	4621      	mov	r1, r4
 800850c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008510:	3b30      	subs	r3, #48	@ 0x30
 8008512:	2b09      	cmp	r3, #9
 8008514:	d94b      	bls.n	80085ae <_vfiprintf_r+0x1a2>
 8008516:	b1b0      	cbz	r0, 8008546 <_vfiprintf_r+0x13a>
 8008518:	9207      	str	r2, [sp, #28]
 800851a:	e014      	b.n	8008546 <_vfiprintf_r+0x13a>
 800851c:	eba0 0308 	sub.w	r3, r0, r8
 8008520:	fa09 f303 	lsl.w	r3, r9, r3
 8008524:	4313      	orrs	r3, r2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	46a2      	mov	sl, r4
 800852a:	e7d2      	b.n	80084d2 <_vfiprintf_r+0xc6>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1d19      	adds	r1, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	9103      	str	r1, [sp, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfbb      	ittet	lt
 8008538:	425b      	neglt	r3, r3
 800853a:	f042 0202 	orrlt.w	r2, r2, #2
 800853e:	9307      	strge	r3, [sp, #28]
 8008540:	9307      	strlt	r3, [sp, #28]
 8008542:	bfb8      	it	lt
 8008544:	9204      	strlt	r2, [sp, #16]
 8008546:	7823      	ldrb	r3, [r4, #0]
 8008548:	2b2e      	cmp	r3, #46	@ 0x2e
 800854a:	d10a      	bne.n	8008562 <_vfiprintf_r+0x156>
 800854c:	7863      	ldrb	r3, [r4, #1]
 800854e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008550:	d132      	bne.n	80085b8 <_vfiprintf_r+0x1ac>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	1d1a      	adds	r2, r3, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	9203      	str	r2, [sp, #12]
 800855a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800855e:	3402      	adds	r4, #2
 8008560:	9305      	str	r3, [sp, #20]
 8008562:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008638 <_vfiprintf_r+0x22c>
 8008566:	7821      	ldrb	r1, [r4, #0]
 8008568:	2203      	movs	r2, #3
 800856a:	4650      	mov	r0, sl
 800856c:	f7f7 fe48 	bl	8000200 <memchr>
 8008570:	b138      	cbz	r0, 8008582 <_vfiprintf_r+0x176>
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	eba0 000a 	sub.w	r0, r0, sl
 8008578:	2240      	movs	r2, #64	@ 0x40
 800857a:	4082      	lsls	r2, r0
 800857c:	4313      	orrs	r3, r2
 800857e:	3401      	adds	r4, #1
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008586:	4829      	ldr	r0, [pc, #164]	@ (800862c <_vfiprintf_r+0x220>)
 8008588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800858c:	2206      	movs	r2, #6
 800858e:	f7f7 fe37 	bl	8000200 <memchr>
 8008592:	2800      	cmp	r0, #0
 8008594:	d03f      	beq.n	8008616 <_vfiprintf_r+0x20a>
 8008596:	4b26      	ldr	r3, [pc, #152]	@ (8008630 <_vfiprintf_r+0x224>)
 8008598:	bb1b      	cbnz	r3, 80085e2 <_vfiprintf_r+0x1d6>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	3307      	adds	r3, #7
 800859e:	f023 0307 	bic.w	r3, r3, #7
 80085a2:	3308      	adds	r3, #8
 80085a4:	9303      	str	r3, [sp, #12]
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	443b      	add	r3, r7
 80085aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ac:	e76a      	b.n	8008484 <_vfiprintf_r+0x78>
 80085ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b2:	460c      	mov	r4, r1
 80085b4:	2001      	movs	r0, #1
 80085b6:	e7a8      	b.n	800850a <_vfiprintf_r+0xfe>
 80085b8:	2300      	movs	r3, #0
 80085ba:	3401      	adds	r4, #1
 80085bc:	9305      	str	r3, [sp, #20]
 80085be:	4619      	mov	r1, r3
 80085c0:	f04f 0c0a 	mov.w	ip, #10
 80085c4:	4620      	mov	r0, r4
 80085c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ca:	3a30      	subs	r2, #48	@ 0x30
 80085cc:	2a09      	cmp	r2, #9
 80085ce:	d903      	bls.n	80085d8 <_vfiprintf_r+0x1cc>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0c6      	beq.n	8008562 <_vfiprintf_r+0x156>
 80085d4:	9105      	str	r1, [sp, #20]
 80085d6:	e7c4      	b.n	8008562 <_vfiprintf_r+0x156>
 80085d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80085dc:	4604      	mov	r4, r0
 80085de:	2301      	movs	r3, #1
 80085e0:	e7f0      	b.n	80085c4 <_vfiprintf_r+0x1b8>
 80085e2:	ab03      	add	r3, sp, #12
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	462a      	mov	r2, r5
 80085e8:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <_vfiprintf_r+0x228>)
 80085ea:	a904      	add	r1, sp, #16
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7fd fc2b 	bl	8005e48 <_printf_float>
 80085f2:	4607      	mov	r7, r0
 80085f4:	1c78      	adds	r0, r7, #1
 80085f6:	d1d6      	bne.n	80085a6 <_vfiprintf_r+0x19a>
 80085f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d405      	bmi.n	800860a <_vfiprintf_r+0x1fe>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d402      	bmi.n	800860a <_vfiprintf_r+0x1fe>
 8008604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008606:	f7fe f92f 	bl	8006868 <__retarget_lock_release_recursive>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	065b      	lsls	r3, r3, #25
 800860e:	f53f af1f 	bmi.w	8008450 <_vfiprintf_r+0x44>
 8008612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008614:	e71e      	b.n	8008454 <_vfiprintf_r+0x48>
 8008616:	ab03      	add	r3, sp, #12
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	462a      	mov	r2, r5
 800861c:	4b05      	ldr	r3, [pc, #20]	@ (8008634 <_vfiprintf_r+0x228>)
 800861e:	a904      	add	r1, sp, #16
 8008620:	4630      	mov	r0, r6
 8008622:	f7fd fea9 	bl	8006378 <_printf_i>
 8008626:	e7e4      	b.n	80085f2 <_vfiprintf_r+0x1e6>
 8008628:	08008abf 	.word	0x08008abf
 800862c:	08008ac9 	.word	0x08008ac9
 8008630:	08005e49 	.word	0x08005e49
 8008634:	080083e7 	.word	0x080083e7
 8008638:	08008ac5 	.word	0x08008ac5

0800863c <_raise_r>:
 800863c:	291f      	cmp	r1, #31
 800863e:	b538      	push	{r3, r4, r5, lr}
 8008640:	4605      	mov	r5, r0
 8008642:	460c      	mov	r4, r1
 8008644:	d904      	bls.n	8008650 <_raise_r+0x14>
 8008646:	2316      	movs	r3, #22
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008652:	b112      	cbz	r2, 800865a <_raise_r+0x1e>
 8008654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008658:	b94b      	cbnz	r3, 800866e <_raise_r+0x32>
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f830 	bl	80086c0 <_getpid_r>
 8008660:	4622      	mov	r2, r4
 8008662:	4601      	mov	r1, r0
 8008664:	4628      	mov	r0, r5
 8008666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866a:	f000 b817 	b.w	800869c <_kill_r>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d00a      	beq.n	8008688 <_raise_r+0x4c>
 8008672:	1c59      	adds	r1, r3, #1
 8008674:	d103      	bne.n	800867e <_raise_r+0x42>
 8008676:	2316      	movs	r3, #22
 8008678:	6003      	str	r3, [r0, #0]
 800867a:	2001      	movs	r0, #1
 800867c:	e7e7      	b.n	800864e <_raise_r+0x12>
 800867e:	2100      	movs	r1, #0
 8008680:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008684:	4620      	mov	r0, r4
 8008686:	4798      	blx	r3
 8008688:	2000      	movs	r0, #0
 800868a:	e7e0      	b.n	800864e <_raise_r+0x12>

0800868c <raise>:
 800868c:	4b02      	ldr	r3, [pc, #8]	@ (8008698 <raise+0xc>)
 800868e:	4601      	mov	r1, r0
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f7ff bfd3 	b.w	800863c <_raise_r>
 8008696:	bf00      	nop
 8008698:	20040018 	.word	0x20040018

0800869c <_kill_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	@ (80086bc <_kill_r+0x20>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7f9 f924 	bl	80018f6 <_kill>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d102      	bne.n	80086b8 <_kill_r+0x1c>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b103      	cbz	r3, 80086b8 <_kill_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	bf00      	nop
 80086bc:	2004043c 	.word	0x2004043c

080086c0 <_getpid_r>:
 80086c0:	f7f9 b911 	b.w	80018e6 <_getpid>

080086c4 <_init>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	bf00      	nop
 80086c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ca:	bc08      	pop	{r3}
 80086cc:	469e      	mov	lr, r3
 80086ce:	4770      	bx	lr

080086d0 <_fini>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	bf00      	nop
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr
